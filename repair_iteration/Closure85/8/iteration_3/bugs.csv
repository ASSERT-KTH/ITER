bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatements(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatements(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getDeadExprStatements(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
7	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
8	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
9	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  removeDeadExprStatementSafely(n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	61	None	replace
10	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  removeDeadExprStatementSafely(n);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	61	None	replace
11	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
12	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	63	None	replace
13	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfgNode);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	63	None	replace
14	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfg);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  curCfg);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
15	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	63	None	replace
16	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
17	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
18	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
19	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
20	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeestination().getValue();  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination()).getValue();  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
23	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
24	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	96	None	replace
25	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    1;    	non-compiled	[CE]  ';'  expected	96	None	replace
26	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	96	None	replace
27	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    1;    	non-compiled	[CE]  ';'  expected	96	None	replace
28	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
29	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n,  outEdges.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n,  outEdges.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n,  outEdges.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
30	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  n.getDestination()).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
31	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
32	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n.getDestination()).getValue();  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first,  n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	85	None	replace
33	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
34	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	40	None	replace
35	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	40	None	replace
36	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfgNode.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	40	None	replace
37	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough,  n.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough,  n.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough,  n.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	40	None	replace
38	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatement();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
39	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
40	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getType();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getType();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
41	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
42	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getNext();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
43	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue()  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
44	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getString();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getString();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
45	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
46	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getLastChild().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
47	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
48	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getLastChild().getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
49	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.next();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.next();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.next();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
50	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.first.getNext();  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.first.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.first.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	59	None	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  fallThrough.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	compilable	  [FE]  RuntimeException  	59	7	replace
52	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [FE]  RuntimeException  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	compilable	  [FE]  RuntimeException  	59	7	replace
53	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg,  fallThrough.getNext();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg,  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg,  fallThrough.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  ';'  expected	59	None	replace
54	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getNext(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getNext(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getNext(),  fallThrough;	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
55	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
56	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
57	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  ')'  expected	46	None	replace
58	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	46	None	replace
59	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	46	None	replace
60	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
61	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	46	None	replace
62	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(2).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
63	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(2).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
64	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(2).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
65	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
66	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
67	[BUG]  [BUGGY]  Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  outEdges  =  outEdges.get(0).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
68	[BUG]  [BUGGY]  Node  outEdges  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  outEdges  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  outEdges  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
70	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getType()  -  1);  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getType()  -  1);  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getType()  -  1);  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatement(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatement(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getDeadExprStatement(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
72	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
73	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
74	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
75	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
76	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getType();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getType();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getType();	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
77	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
78	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
79	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  ';'  expected	90	None	replace
80	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  ';'  expected	90	None	replace
81	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.peek());	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  ';'  expected	90	None	replace
82	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.pop());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.pop());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  cfgStack.pop());	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  ';'  expected	90	None	replace
83	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
84	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
85	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  first);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
86	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
87	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  cfgStack.peek());	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
88	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	35	None	replace
89	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	99	None	replace
90	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	99	None	replace
91	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	99	None	replace
92	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	99	None	replace
93	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	99	None	replace
94	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(4).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(4).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(4).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(3).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	92	None	replace
95	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  3  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(3).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  3  	92	10	replace
96	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  3  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(3).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  3  	92	10	replace
97	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(3).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
98	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
99	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	70	None	replace
100	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeadExprStatement().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
101	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
102	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	70	None	replace
103	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
104	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	22	None	replace
105	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	22	None	replace
106	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	22	None	replace
107	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	22	None	replace
108	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	22	None	replace
109	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	22	None	replace
110	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfg);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	22	None	replace
111	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
112	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
113	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	11	None	replace
114	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
115	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  first  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	11	10	replace
116	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
117	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
118	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
119	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
120	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
121	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
122	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getNext(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getNext(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
123	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLastChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLastChild();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
124	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
125	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLineno();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLineno();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getLineno();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
126	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
127	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getValue(),  outEdges.get(0).getEntry().getValue(),  fallThrough;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry().getValue(),  outEdges.get(0).getEntry().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getValue(),  outEdges.get(0).getEntry().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	33	None	replace
128	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfgNode;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
129	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	33	None	replace
130	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  parent);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  parent);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  parent);	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	33	None	replace
131	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  finallyCfgNode;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  finallyCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  finallyCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
132	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  second;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  second;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  second;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  n.getLastChild();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	4	replace
134	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getLastChild();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	4	replace
135	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough!=  null?  first.getNext()  :  n.getNext();  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough!=  null?  first.getNext()  :  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough!=  null?  first.getNext()  :  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
136	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough  ==  null?  first.getNext()  :  n.getNext();  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough  ==  null?  first.getNext()  :  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough  ==  null?  first.getNext()  :  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  n.getFirstChild();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	4	replace
138	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	4	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough!=  null?  fallThrough  :  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  fallThrough!=  null?  fallThrough  :  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	9	replace
140	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough!=  null?  fallThrough  :  n.getNext();  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough!=  null?  fallThrough  :  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough!=  null?  fallThrough  :  n.getNext();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	9	replace
141	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	38	None	replace
142	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue()  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
143	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
144	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue(),  first;	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
145	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough),  compiler.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	38	None	replace
146	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  compiler).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  compiler).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  compiler).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
147	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  /  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	89	None	replace
148	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	89	None	replace
149	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	89	None	replace
150	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(2).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(2).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(2).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
151	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
152	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
153	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1).getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
154	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue()  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
155	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getType()  -  1);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
156	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
157	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(0).getValue();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
158	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
159	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	97	None	replace
160	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(2).getValue();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(2).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(2).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
161	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLineno(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLineno(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getLineno(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
162	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
163	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
164	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
165	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
166	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  +  1;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
167	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getLastChild();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getLastChild();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
168	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
169	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
170	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  [CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	replace
171	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getParent(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getParent(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getParent(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
172	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
173	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
174	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
175	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
176	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
177	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  n.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  n.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(0),  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
178	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	54	None	replace
179	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  outEdges.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  outEdges.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  outEdges.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	54	None	replace
180	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getLastChild().getValue();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
181	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getFirstChild().getValue();  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
182	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
183	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
184	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getEntry().getValue();  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	29	None	replace
185	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	29	None	replace
186	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getEntry().getValue();  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfgNode.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	29	None	replace
187	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
188	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
189	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  ';'  expected	87	None	replace
190	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  ';'  expected	87	None	replace
191	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getParent().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
192	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
193	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
194	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
195	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
196	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
197	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue());  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
198	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
199	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
200	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfgNode).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfgNode).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfgNode).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
201	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
202	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfg).getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfg).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  curCfg).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
203	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
204	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getReturnStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
205	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
206	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
207	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue(),  fallThrough  +  1;  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue(),  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue(),  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue()    +    1;    	non-compiled	[CE]  ';'  expected	94	None	replace
208	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  /  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  /  1;	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	94	None	replace
209	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  *  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  *  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  *  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	94	None	replace
210	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  curCfgNode);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
211	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  compiler);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
212	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  tryRemoveUnconditionalBranching);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  tryRemoveUnconditionalBranching);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  tryRemoveUnconditionalBranching);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
213	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
214	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	6	10	replace
215	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	6	10	replace
216	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
217	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	20	None	replace
218	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent(),  fallThrough).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	20	None	replace
219	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getLastChild()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	20	None	replace
220	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	20	None	replace
221	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination())-  outEdges.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination())-  outEdges.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDestination())-  outEdges.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
222	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())/  n.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())/  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())/  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
223	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  n.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
224	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())/  fallThrough.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())/  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())/  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
225	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getLastChild().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
226	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	4	None	replace
227	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(1).getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(1).getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(1).getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
228	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
229	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
230	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
231	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
232	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getEntry(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
233	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
234	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.toString();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
235	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
236	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getParent().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
237	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getParent().getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
238	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
239	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
240	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
241	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getNext();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
242	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(i).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(i).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(i).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol  i	41	None	replace
243	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
244	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
245	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
246	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
247	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
248	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  	non-compiled	[CE]  ';'  expected	80	None	add
249	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
250	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
251	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	69	None	replace
252	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
253	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
254	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  ';'  expected	82	None	replace
255	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  incompatible  types	82	None	replace
256	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  +  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
257	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  -  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	82	None	replace
258	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getValue());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getValue());	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
259	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  /  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue()  /  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue()  /  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	82	None	replace
260	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	93	10	replace
261	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	93	10	replace
262	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
263	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  n  =  first.getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  n  =  first.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  outEdges.get(1).getDestination().getValue();  n  =  first.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
264	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
265	[BUG]  [BUGGY]  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	93	None	replace
266	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
267	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(1).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(1).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(1).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
268	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
269	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirst().getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
270	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
271	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
272	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	55	None	add
273	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  attemptRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  attemptRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  attemptRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
274	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	55	None	add
275	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	55	None	add
276	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	55	None	add
277	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  compiler.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  compiler.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  compiler.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	44	None	replace
278	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfgNode).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfgNode).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfgNode).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	44	None	replace
279	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
280	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(outEdges.get(n.getDestination(),  fallThrough).getValue();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(outEdges.get(n.getDestination(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(outEdges.get(n.getDestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  ')'  expected	44	None	replace
281	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
282	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
283	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(outEdges.get(n.getEntry()).getValue();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(outEdges.get(n.getEntry()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(outEdges.get(n.getEntry()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  ')'  expected	31	None	replace
284	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getName()).getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getName()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getName()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
285	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getEntry()).getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getEntry()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getEntry()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
286	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getKey()).getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getKey()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getKey()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
287	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDeadExprStatement()).getValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
288	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDeadExprStatement()).getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getDeadExprStatement()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDeadExprStatement()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDeadExprStatement()).getValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
289	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  fallThrough.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDeadExprStatement()).getValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
290	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	67	None	replace
291	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	67	None	replace
292	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getValue();    	non-compiled	[CE]  ';'  expected	67	None	replace
293	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	67	None	replace
294	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ')'  expected	37	None	replace
295	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
296	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
297	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ')'  expected	37	None	replace
298	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough.getDestination().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	37	None	replace
299	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.getDestination().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext(),  outEdges.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	37	None	replace
300	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	74	None	replace
301	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
302	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getEntry();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
303	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getEntry().getEntry().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  ';'  expected	74	None	replace
304	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfgNode.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	74	None	replace
305	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  fallThrough;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  fallThrough;	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
306	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfgNode).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfgNode).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfgNode).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
307	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfg).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfg).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  curCfg).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
308	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  compiler).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  compiler).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  compiler).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
309	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  null).getValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  null).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  null).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
310	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  this).getValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  this).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  this).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
311	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getEntry(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
312	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatements(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatements(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatements(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
313	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
314	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getLastChild().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getLastChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
315	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	49	None	replace
316	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getFirstChild().getValue();  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getFirstChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	49	None	replace
317	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(1).getNext().getValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
318	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getNext().getValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
319	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getNext().getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getNext().getValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
320	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getLastChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getLastChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getLastChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
321	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getNext();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
322	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getLastChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getLastChild();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
323	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.get(0).getValue();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.get(0).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.get(0).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
324	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
325	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.getValue();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getFirstChild(),  outEdges.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
326	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
327	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
328	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	79	None	replace
329	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
330	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
331	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
332	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
333	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
334	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
335	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getReturnType(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getReturnType(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getReturnType(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
336	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	72	None	replace
337	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
338	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
339	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	73	None	replace
340	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  /  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  /  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  /  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
341	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	73	None	replace
342	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getParent().getValue();    	non-compiled	[CE]  ';'  expected	71	None	replace
343	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(1).getParent().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(1).getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(1).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
344	[BUG]  [BUGGY]  Node  first  =  fallThrough.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  fallThrough.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  fallThrough.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	62	None	replace
345	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  n.getFirstChild();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	62	None	replace
346	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  n.getLastChild();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	62	None	replace
347	[BUG]  [BUGGY]  Node  first  =  noOpStatements.getNext();  [CE]  cannot  find  symbol  noOpStatements  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  noOpStatements.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  noOpStatements.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	62	None	replace
348	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  next  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  next  =  n.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	62	None	replace
349	[BUG]  [BUGGY]  Node  first  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  n.getPrevious();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  n.getPrevious();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
350	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  n.getParent().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  n.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext(),  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
351	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfgNode).getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfgNode).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfgNode).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
352	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfg).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfg).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  curCfg).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
353	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
354	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getReturnStatements(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
355	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  compiler).getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  compiler).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  compiler).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
356	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
357	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
358	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
359	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
360	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
361	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  1);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
362	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination())-  fallThrough.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination())-  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDestination())-  fallThrough.getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
363	[BUG]  [BUGGY]  Node  nextCfgNode  =  compiler.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  compiler.get(n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  compiler.get(n.getDestination()).getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
364	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDestination()),  fallThrough.getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	45	None	replace
365	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.get(n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.get(n.getDestination()).getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
366	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.get(n.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.get(n.getDestination()).getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
367	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
368	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
369	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
370	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
371	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
372	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfgNode;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
373	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
374	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatements().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
375	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	16	None	replace
376	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  removeNoOpStatements;  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  removeNoOpStatements;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  removeNoOpStatements;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
377	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  parent);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  parent);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  parent);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	16	None	replace
378	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(0),    n.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
379	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  /  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
380	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
381	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  *  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
382	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  -  fallThrough;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  ';'  expected	27	None	replace
383	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  ';'  expected	27	None	replace
384	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
385	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
386	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getType();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getType();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getType();	  Node    nextCfgNode    =    outEdges.get(n),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	24	None	replace
387	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(n),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	24	None	replace
388	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatementSafely().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatementSafely().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDeadExprStatementSafely().getValue();	  Node    nextCfgNode    =    outEdges.get(n),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	24	None	replace
389	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	9	None	replace
390	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
391	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
392	[BUG]  [BUGGY]  Node  secondCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  secondCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  secondCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	9	None	replace
393	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	9	10	replace
394	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	9	10	replace
395	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
396	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(2).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
397	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
398	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
399	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getNext().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(0),  outEdges.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
400	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
401	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
402	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  n  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  n  =  n.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
403	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  firstCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  firstCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  firstCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
404	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  lastCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  lastCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  lastCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
405	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextFgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextFgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  nextFgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
406	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextSfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextSfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  nextSfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
407	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextCfgNode  =  n.getParent();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  nextCfgNode  =  n.getParent();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  nextCfgNode  =  n.getParent();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
408	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  n.getNext().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext(),  n.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.getNext(),  n.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	68	None	replace
409	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfgNode.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	13	None	replace
410	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	13	None	replace
411	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	13	None	replace
412	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
413	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	48	None	replace
414	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getValue();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
415	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfgNode).getValue();  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfgNode).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfgNode).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	48	None	replace
416	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	48	None	replace
417	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n).getValue();  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first,  n).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
418	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack.size()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack.size()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack.size()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	48	None	replace
419	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
420	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
421	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  deleteDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  deleteDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  deleteDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
422	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
423	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  addDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  addDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  addDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
424	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  replaceDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  replaceDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  replaceDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
425	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.get(n.getDestination())-  outEdges.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.get(n.getDestination())-  outEdges.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.get(n.getDestination())-  outEdges.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
426	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  n.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
427	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  fallThrough.getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough.getDestination())-  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
428	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  compiler.getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  compiler.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  compiler.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
429	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	76	None	replace
430	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	76	None	replace
431	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	76	None	replace
432	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild()).getValue();    	non-compiled	[CE]  ';'  expected	76	None	replace
433	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	76	None	replace
434	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
435	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	84	None	replace
436	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	84	None	replace
437	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
438	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	75	None	replace
439	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(1).getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(1).getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(1).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
440	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirst().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirst().getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
441	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getEntry().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	75	None	replace
442	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getFirstChild().getValue());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getFirstChild().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getFirstChild().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild().getValue());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
443	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild().getValue());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getLastChild().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild().getValue());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
444	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  first);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	25	None	replace
445	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  cfgStack.peek();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  cfgStack.peek();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  cfgStack.peek();	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	25	None	replace
446	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	25	None	replace
447	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
448	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
449	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
450	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
451	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
452	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
453	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
454	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
455	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
456	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
457	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
458	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getParent().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild().getParent().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
459	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getParent().getValue();  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getParent().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	17	None	replace
460	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	17	None	replace
461	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
462	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
463	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  curCfg;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
464	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  second;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  second;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  second;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
465	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  compiler.reportCodeChange();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	34	None	replace
466	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfgNode;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
467	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
468	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatement().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
469	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	43	None	replace
470	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  finallyCfgNode;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  finallyCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  finallyCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
471	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  parent);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  parent);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  parent);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	43	None	replace
472	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getLastChild().getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild().getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getLastChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
473	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
474	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
475	[BUG]  [BUGGY]  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	10	None	replace
476	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	10	None	replace
477	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	10	None	replace
478	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
479	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(2).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
480	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getNext().getValue();	  Node    nextCfgNode    =    n.getNext().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
481	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	65	None	replace
482	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext().getValue()  +  fallThrough;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getNext().getValue()  +  fallThrough;	  Node    nextCfgNode    =    n.getNext().getValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
483	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  return  nextCfgNode;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
484	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  return  nextCfgNode;  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
485	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  return  nextCfgNode;  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
486	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getDestination().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
487	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  curCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  curCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  curCfgNode;	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
488	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
489	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  n).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first,  n).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
490	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  n).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
491	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  compiler);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  compiler);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue(),  compiler);	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
492	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
493	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
494	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
495	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
496	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getValue()  -  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getValue()  -  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getValue()  -  1);	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
497	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getValue();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  incompatible  types	82	None	replace
498	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	35	None	replace
499	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  +  first;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	35	None	replace
500	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough  -  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	35	None	replace
501	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  compiler.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  compiler.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  compiler.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	70	None	replace
502	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
503	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getLastChild()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	46	None	replace
504	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
505	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
506	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.clone();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.clone();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.clone();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
507	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
508	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toArray(new  Node[outEdges.size()  ]);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toArray(new  Node[outEdges.size()  ]);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toArray(new  Node[outEdges.size()  ]);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
509	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toString();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
510	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
511	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  compiler);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  compiler);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  compiler);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
512	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgStack.getNext();  [CE]  cannot  find  symbol  curCfgStack  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfgStack.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfgStack.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	59	None	replace
513	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.cloneTree();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.cloneTree();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
514	[BUG]  [BUGGY]  Node  curCfgNode  =  n.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  curCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  curCfgNode  =  n.getNext();	  Node    nextCfgNode    =    curCfg.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	59	None	replace
515	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
516	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  cannot  find  symbol  first	81	None	replace
517	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
518	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	11	10	replace
519	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  2  	11	10	replace
520	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	11	None	replace
521	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfg;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfg;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  curCfg;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
522	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue(),  fallThrough;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	16	None	replace
523	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough  +  1;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	16	None	replace
524	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
525	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).removeValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).removeValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).removeValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
526	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).returnNull();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).returnNull();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).returnNull();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
527	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeUpperCfg(n));  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
528	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  root.getValue());  [CE]  cannot  find  symbol  root  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  root.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  root.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild().getValue());    	non-compiled	[CE]  cannot  find  symbol  root	53	None	replace
529	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  first.getParent().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  first.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  first.getParent().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	17	None	replace
530	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getParent().getValue();  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getParent().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	17	None	replace
531	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getPrevious().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getPrevious().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getPrevious().getValue();	  Node    nextCfgNode    =    n.getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
532	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	96	None	replace
533	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getNext().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  n.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	68	None	replace
534	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	68	None	replace
535	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  fallThrough;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0),    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	68	None	replace
536	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatements().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
537	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough  +  1);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
538	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getFirstChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
539	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  secondCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Node  secondCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Node  secondCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
540	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementOnly(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementOnly(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementOnly(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
541	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeThrough(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeThrough(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeThrough(n));	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
542	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  n.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	77	None	replace
543	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getLastChild().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getLastChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	77	None	replace
544	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  nextCfgNode;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  nextCfgNode;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	22	None	replace
545	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  first;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue(),  first;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	22	None	replace
546	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
547	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  n.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  n.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
548	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
549	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first.getDestination()),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first.getDestination()),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first.getDestination()),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	97	None	replace
550	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
551	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(2).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
552	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }  [CE]  cannot  find  symbol  secondCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }	  	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	80	None	add
553	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	add
554	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination())-  n.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination())-  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination())-  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
555	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()  -  fallThrough)-  n.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()  -  fallThrough)-  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()  -  fallThrough)-  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
556	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getPrevious()).getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getPrevious()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getPrevious()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
557	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  first.getNext().getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  first.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  first.getNext().getValue();	  Node    nextCfgNode    =    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	65	None	replace
558	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getNext().getValue();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  node.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  node.getNext().getValue();	  Node    nextCfgNode    =    n.getNext().getValue();    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
559	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
560	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
561	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	40	None	replace
562	[BUG]  [BUGGY]  Node  nextCfgNode  =  last.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  last  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  last.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  last.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol  last	40	None	replace
563	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  RemoveDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  RemoveDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  RemoveDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
564	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
565	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
566	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
567	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getNext(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getNext(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
568	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
569	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
570	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.cloneTree().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.cloneTree().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.cloneTree().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getParent().getValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
571	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
572	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
573	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
574	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getEntry(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getEntry(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getEntry(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
575	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
576	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatement(n);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatement(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeDeadExprStatement(n);	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
577	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).removeValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
578	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getEntry(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getEntry(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getEntry(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
579	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
580	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement();  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  i	69	None	replace
581	[BUG]  [BUGGY]  Node  first  =  n.removeFirst();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  first  =  n.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  n.removeFirst();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
582	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
583	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
584	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.toString();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
585	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
586	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
587	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough  +  1);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
588	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getEntry().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getEntry().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getEntry().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	26	None	replace
589	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	67	None	replace
590	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	75	None	replace
591	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getParent().getValue();  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getParent().getValue();    	non-compiled	[CE]  ';'  expected	71	None	replace
592	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough),  compiler.getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	48	None	replace
593	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  cfgStack).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	48	None	replace
594	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getValue();  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
595	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDeadExprStatement()).getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDeadExprStatement()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDeadExprStatement()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDeadExprStatement()).getValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
596	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  ';'  expected	31	None	replace
597	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getEntry()).getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getEntry()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getEntry()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
598	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getEntry()).getValue();    	non-compiled	[CE]  ';'  expected	31	None	replace
599	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue(),  fallThrough;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	33	None	replace
600	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue(),  fallThrough;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	33	None	replace
601	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
602	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfg;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfg;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  curCfg;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
603	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getStart()).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
604	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements();  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  i	79	None	replace
605	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(fallThrough),  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
606	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getNext().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
607	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
608	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getDeestination().getValue();  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
609	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeestination().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
610	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
611	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
612	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	9	10	replace
613	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    firstCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	9	None	replace
614	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	25	None	replace
615	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  -  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  -  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	25	None	replace
616	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  +  first;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	25	None	replace
617	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfg).getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfg).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  curCfg).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	44	None	replace
618	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  outEdges.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  outEdges.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  outEdges.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	44	None	replace
619	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
620	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ')'  expected	37	None	replace
621	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()  -  1,  fallThrough.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	37	None	replace
622	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  +  fallThrough.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()  +  fallThrough.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()  +  fallThrough.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
623	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirstChild().getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
624	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
625	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
626	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
627	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getNext()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getNext()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getNext()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	85	None	replace
628	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  first.getDestination()).getValue();  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  first.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  first.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	85	None	replace
629	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
630	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeFirstChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeFirstChild();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
631	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.cloneTree();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
632	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.removeFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.removeFirstChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild(),  fallThrough.removeFirstChild();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
633	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNextChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNextChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNextChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
634	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getFirstChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  curCfg.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	compilable	  [FE]  AssertionFailedError  	29	7	replace
636	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getEntry().getValue();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	compilable	  [FE]  AssertionFailedError  	29	7	replace
637	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
638	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  first.getEntry().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  first.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  first.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	29	None	replace
639	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getEntry().getValue();  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	29	None	replace
640	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getEntry().getValue();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  node.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  node.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  node	29	None	replace
641	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  	non-compiled	[CE]  ';'  expected	83	None	add
642	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  first  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
643	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }  [CE]  cannot  find  symbol  secondCfgNode  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  firstCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  secondCfgNode;  }	  	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	83	None	add
644	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(first));  return  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(first));  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(first));  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
645	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
646	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(  fallThrough),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
647	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
648	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
649	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
650	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
651	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
652	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(2).getDestination().getValue();  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
653	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getFirstChild().getValue();  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	4	None	replace
654	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getParent().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
655	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  n.getParent().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i),  n.getParent().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i),  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
656	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  first.getEntry().getEntry().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  first.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  first.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  ';'  expected	74	None	replace
657	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry(),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry(),  fallThrough.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry(),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  ';'  expected	74	None	replace
658	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  curCfg.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
659	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	74	None	replace
660	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getLastChild()).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getLastChild()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n.getLastChild()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
661	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
662	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(i).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(i).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatement(),  fallThrough,  outEdges.get(i).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
663	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
664	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	93	10	replace
665	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(2).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(2).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	93	10	replace
666	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  n  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
667	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
668	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	27	None	replace
669	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  curCfgNode);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  ';'  expected	27	None	replace
670	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  outEdges.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  outEdges.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  outEdges.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
671	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.cloneTree();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.cloneTree();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
672	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.toString();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
673	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
674	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(first,  fallThrough).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
675	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
676	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue(),  fallThrough;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue(),  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	43	None	replace
677	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfg;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfg;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  curCfg;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
678	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	43	None	replace
679	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
680	[BUG]  [BUGGY]  Node  nextCfgNode  =  root.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  root.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  root.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol  root	13	None	replace
681	[BUG]  [BUGGY]  Node  nextCfgNode  =  last.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  last  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  last.getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  last.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol  last	13	None	replace
682	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getEntry().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  n.getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  n.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
683	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry().getValue(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
684	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getParent(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
685	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getParent(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
686	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(first.getDestination()).getValue();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.get(first.getDestination()).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(first.getDestination()).getValue();	  Node    nextCfgNode    =    n.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol  first	45	None	replace
687	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeadExprStatement().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
688	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  -  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
689	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  first.getNext();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
690	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getParent();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  n.getParent();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	7	replace
691	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getParent();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getParent();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getParent();	  Node    nextCfgNode    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	58	7	replace
692	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeF	  	non-compiled	[CE]  ';'  expected	55	None	add
693	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing	  	non-compiled	[CE]  ';'  expected	55	None	add
694	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(compute  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(compute  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(compute	  	non-compiled	[CE]  ';'  expected	55	None	add
695	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
696	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(	  	non-compiled	[CE]  ';'  expected	55	None	add
697	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);	  	non-compiled	[CE]  ';'  expected	55	None	add
698	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue()  +  1;  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
699	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1),  n.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
700	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
701	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    lastCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	10	10	replace
702	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDeadExprStatements(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
703	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).removeValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).removeValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).removeValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
704	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
705	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	99	None	replace
706	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
707	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
708	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination();	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
709	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getEntry().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext(),    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	38	None	replace
710	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
711	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  root.getValue());  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  root.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  root.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
712	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	replace
713	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	91	None	replace
714	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough	  	non-compiled	[CE]  ';'  expected	80	None	add
715	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
716	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  secondCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  secondCfgNode);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	63	None	replace
717	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	replace
718	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getValue();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
719	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  this.cfgStack.getValue();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  this.cfgStack.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough),  this.cfgStack.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination(),    fallThrough).getValue();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
720	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  nextCfgNode;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  nextCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
721	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  lastCfgNode;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  lastCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough,  lastCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
722	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	43	None	replace
723	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  secondCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  secondCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  secondCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
724	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  lastCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  lastCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  lastCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
725	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
726	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeBollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeBollowing(n));  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeBollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	add
727	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeFirst();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
728	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.removeLastChild();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
729	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough,  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	47	None	replace
730	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getLastChild();	  Node    nextCfgNode    =    outEdges.get(0),    n.getNext().getValue();    	non-compiled	[CE]  ';'  expected	68	None	replace
731	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.removeFirst();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.removeFirst();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
732	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getParent(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	18	None	replace
733	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough	  	non-compiled	[CE]  ';'  expected	83	None	add
734	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
735	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
736	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getKey();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getKey();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getKey();	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
737	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  fallThrough;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0),    n.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
738	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.cloneTree().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.cloneTree().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.cloneTree().getValue();	  Node    nextCfgNode    =    outEdges.get(n),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	24	None	replace
739	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getNext()  ==  null);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
740	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
741	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
742	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
743	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
744	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
745	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  n.getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  n.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	57	None	add
746	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getNext();	  Node    nextCfgNode    =    outEdges.get(0),    n.getParent().getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
747	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  nextCfgNode;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  nextCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
748	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  lastCfgNode;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  lastCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough,  lastCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
749	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  -  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  -  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue()  -  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
750	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getUnconditionalBranchingStatements().getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getUnconditionalBranchingStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getUnconditionalBranchingStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
751	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
752	[BUG]  [BUGGY]  Node  nextCfgNode  =  n,  first.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n,  first.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n,  first.getFirstChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	49	None	replace
753	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getFirstChild().getValue();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  node.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  node.getFirstChild().getValue();	  Node    nextCfgNode    =    n.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
754	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getFirstChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getFirstChild(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getFirstChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
755	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeLastChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.removeLastChild();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
756	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.toString();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	52	None	replace
757	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getDestination())-    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
758	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
759	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	11	None	replace
760	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getSource(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
761	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  /  2;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  /  2;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough  /  2;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	25	None	replace
762	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    n.getDeadExprStatements().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	78	None	replace
763	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(3).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	92	None	replace
764	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));  removeDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    removeDeadExprStatementSafely(n);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFilowing(n));  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	60	None	add
765	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
766	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().removeFirst();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().removeFirst();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
767	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
768	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getCfgNode(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getCfgNode(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getCfgNode(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
769	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeLastChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.removeLastChild();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
770	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  exception);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  exception);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough,  exception);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  ';'  expected	90	None	replace
771	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2.0;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2.0;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough  /  2.0;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    *    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	90	None	replace
772	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough,  finallyCfgNode;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	22	None	replace
773	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
774	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  return  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
775	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);  return  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);  return  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first);  return  nextCfgNode;	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
776	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
777	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDeestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDeestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(2).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
778	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
779	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough.getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry(),  fallThrough.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
780	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
781	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  *  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  *  fallThrough;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue()  *  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDeadExprStatement().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	73	None	replace
782	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getFirstChild().getValue());    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	53	None	replace
783	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getInitializingFunction(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getInitializingFunction(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getInitializingFunction(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
784	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  null);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  null);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
785	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  curCfgNode.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  curCfgNode.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  curCfgNode.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
786	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  compiler.getParent();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  compiler.getParent();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough,  compiler.getParent();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	72	None	replace
787	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
788	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.toString();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.toString();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.toString();	  Node    nextCfgNode    =    outEdges.get(0).getNext(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
789	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough,  finallyCfgNode);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue(),    fallThrough);    	non-compiled	[CE]  ';'  expected	36	None	replace
790	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.get(0);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.get(0);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.get(0);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
791	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.size()  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.size()  -  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  outEdges.size()  -  1);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
792	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  exception);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  exception);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough,  exception);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    fallThrough;    	non-compiled	[CE]  ';'  expected	35	None	replace
793	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  n.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  n.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement())-  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDeadExprStatement()).getValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
794	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	54	None	replace
795	[BUG]  [BUGGY]  Node  nextCfgNode  =  nodes.getFirstChild().getValue();  [CE]  cannot  find  symbol  nodes  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  nodes.getFirstChild().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  nodes.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol  nodes	54	None	replace
796	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getParent()).getValue();    	non-compiled	[CE]  ';'  expected	20	None	replace
797	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getEntry().getValue()  +  1;	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
798	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  node.getEntry().getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  node.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    n.getEntry().getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol  node	74	None	replace
799	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirst().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirst().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.removeFirst().getValue();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
800	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getKey();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getKey();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getKey();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getEntry().getValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
801	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
802	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  Node  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	8	None	replace
803	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough).getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough).getDeadExprStatement().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	70	None	replace
804	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThr	  Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    return    fallThrough;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
805	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getIndex()).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getIndex()).getDeadExprStatement();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getIndex()).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
806	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  null).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  null).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  null).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	48	None	replace
807	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  last).getValue();  [CE]  cannot  find  symbol  last  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  last).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  last).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getValue();    	non-compiled	[CE]  cannot  find  symbol  last	48	None	replace
808	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst()).getEntry().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst()).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
809	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n,    n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
810	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  first).getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  first).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  first).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
811	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  this).getValue();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  this).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  this).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
812	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadThrough(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	100	None	replace
813	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType()  ==  Branch.UNCOND;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType()  ==  Branch.UNCOND;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getType()  ==  Branch.UNCOND;	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getNext().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
814	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeLastChild();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.removeLastChild();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
815	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ')'  expected	97	None	replace
816	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough,  outEdges.get(1).getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination()),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
817	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  2  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  2  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  2  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue()    +    1;    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	89	None	replace
818	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  first).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  first).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough,  first).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	95	None	replace
819	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough.getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough.getValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
820	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
821	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
822	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getType()).getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  incompatible  types  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getType()).getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getType()).getValue();  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  incompatible  types	93	None	replace
823	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  n  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue(),  fallThrough;  n  =  outEdges.get(1).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
824	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.removeFirst();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  fallThrough.removeFirst();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  fallThrough.removeFirst();	  Node    nextCfgNode    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
825	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  nextCfgNode;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  nextCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  nextCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
826	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  lastCfgNode;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  lastCfgNode;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough,  lastCfgNode;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
827	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  outEdges.get(1);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  outEdges.get(1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough,  outEdges.get(1);	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue(),    fallThrough;    	non-compiled	[CE]  ';'  expected	16	None	replace
828	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  n.getValue());  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  n.getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  n.getValue());	  Node    nextCfgNode    =    outEdges.get(n.getDestination().getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
829	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n).getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(n).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough,    outEdges.get(1).getValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
830	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  first).getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  first).getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  first).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement(),    fallThrough).getValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
831	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough,  first);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue()    -    fallThrough;    	non-compiled	[CE]  ';'  expected	27	None	replace
832	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough.getFirstChild().getNext();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild().getValue(),  fallThrough.getFirstChild().getNext();	  Node    nextCfgNode    =    outEdges.get(0),    fallThrough.getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
833	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  curCfg).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
834	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  compiler).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	23	None	replace
835	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough,  first).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n,    fallThrough).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
836	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().cloneTree();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().cloneTree();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatement().cloneTree();	  Node    nextCfgNode    =    n.getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
837	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  1;  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	87	None	replace
838	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue());  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirst(),  fallThrough.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
839	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext())-  1,  fallThrough.getDestination().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext())-  1,  fallThrough.getDestination().getValue();  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext())-  1,  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()),    fallThrough.getDestination().getValue();    	non-compiled	[CE]  ';'  expected	37	None	replace
840	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);  [BUGGY]      if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  -  1);	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue());    	non-compiled	[CE]  ';'  expected	88	None	replace
