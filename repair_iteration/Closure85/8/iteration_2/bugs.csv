bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
7	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
8	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  ';'  expected	4	None	add
9	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
10	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  lastCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
11	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  first  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
12	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatements().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
14	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getParent().getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getParent().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
18	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
19	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getParent().getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getParent().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getParent()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	3	None	replace
21	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
23	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
24	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n),  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
26	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough);  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	10	None	replace
27	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  -  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
28	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getEntry().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
30	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
31	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getEntry()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
33	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
34	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
35	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
36	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough);  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue(),  fallThrough);	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDestination().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()),  fallThrough.getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext(),  fallThrough).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
39	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
40	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getDeadExprStatement().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
41	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
42	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()).getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDeadExprStatement()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
43	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue(),  fallThrough;	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough).getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.get(n.getDestination()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.get(n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
46	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	11	None	replace
49	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getFirstChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
50	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getLastChild().getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getLastChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getLastChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
51	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getFirstChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
52	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
53	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue());  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild().getValue());	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.getFirstChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
56	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  n.getNext();	      	compilable	  [FE]  RuntimeException  	8	4	replace
58	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [FE]  RuntimeException  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getNext();	      	compilable	  [FE]  RuntimeException  	8	4	replace
59	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  curCfg.getNext();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  curCfg.getNext();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	      	compilable	  [FE]  RuntimeException  	8	10	replace
61	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [FE]  RuntimeException  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	      	compilable	  [FE]  RuntimeException  	8	10	replace
62	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  first  =  n.getNext();	      	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	8	None	replace
63	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	      	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
64	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode;  [CE]  unreachable  statement  [FE]                                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode;	      	non-compiled	[CE]  unreachable  statement	8	None	replace
65	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext().getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getNext().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext().getValue();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
66	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  fallThrough.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext().getValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
67	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	1	None	replace
68	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getNext().getValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
69	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
71	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
72	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.getValue();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination(),  fallThrough.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	9	None	replace
73	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
74	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  n.getEntry().getEntry().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  n.getEntry().getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
75	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry().getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getEntry().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
76	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getFirstChild()).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	6	None	replace
77	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getFirstChild().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getFirstChild().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getFirstChild().getValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
78	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getDeadExprStatements().getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getDeadExprStatements().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getDeadExprStatements().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	7	None	replace
79	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
81	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
82	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue();  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getValue();	      	non-compiled	[CE]  incompatible  types	8	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
84	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }	      	compilable	  [FE]  AssertionFailedError  	8	9	replace
85	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n,  n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
86	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0),  n.getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
87	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getParent().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	3	None	replace
88	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue());	  	non-compiled	[CE]  ';'  expected	4	None	add
89	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  1;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
90	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue()  *  fallThrough;	  Node    nextCfgNode    =    outEdges.get(n.getNext()).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
91	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
92	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(3).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
93	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    n  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	4	None	add
94	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  1;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
95	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getEntry().getValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
96	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  1;  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  1;  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(n).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
97	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	11	None	replace
98	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  n.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination())-  n.getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination())-  n.getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
99	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough).getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(n.getDestination()).getValue();    	non-compiled	[CE]  ';'  expected	11	None	replace
100	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatements().getValue();    	non-compiled	[CE]  ';'  expected	7	None	replace
101	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough,  outEdges.get(1).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
102	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).getValue();  [BUGGY]    if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement(),  fallThrough).getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDeadExprStatement().getValue();    	non-compiled	[CE]  ';'  expected	2	None	replace
