bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeChild(curCfg,  n,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n,  parent);	  n.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	74	None	replace
2	[BUG]  [BUGGY]  n.removeChild(parent,  curCfg,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent,  curCfg,  n);	  n.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	74	None	replace
3	[BUG]  [BUGGY]  n.removeChild(cfg,  curCfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfg,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfg,  curCfg,  n);	  n.removeChild(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  cfg	74	None	replace
4	[BUG]  [BUGGY]  n.removeChild(curCfg,  n,  removeNoOpStatements);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  n,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n,  removeNoOpStatements);	  n.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	74	None	replace
5	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
6	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
7	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
8	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(parent);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(parent);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
9	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
10	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
11	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);	  NodeUtil.removeChild(parent,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	174	None	replace
12	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
13	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
14	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
15	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
16	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent));  tryRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  Context  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent));  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent));  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n));    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  Context	239	None	replace
17	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(parent);  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(parent);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n));    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  Context	239	None	replace
18	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode));  tryRemoveUnconditionalBranching(n);  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode));  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode));  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n));    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)	239	None	replace
19	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n));    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  Context	239	None	replace
20	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
21	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  ';'  expected	263	None	replace
22	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  ';'  expected	263	None	replace
23	[BUG]  [BUGGY]  ||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
24	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  ';'  expected	263	None	replace
25	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);  return;  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  tryRemoveUnconditionalBranching(n);  return;	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
26	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  removeDeadExprStatementSafely(gNode  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  removeDeadExprStatementSafely(gNode  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent)))  {  removeDeadExprStatementSafely(gNode	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
27	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  Traversal  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Traversal.traverse(compiler,  n,  parent);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traversal	20	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  t);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)	20	None	replace
29	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TraverseTraversal.traverse(compiler,  n,  parent);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	20	None	replace
30	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  Traverse  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Traverse.traverse(compiler,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Traverse.traverse(compiler,  n,  parent);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  Traverse	20	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)	20	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	20	None	replace
33	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
34	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
35	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
36	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditional  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditional  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditional	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
37	[BUG]  [BUGGY]  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);	  n.removeChild(parent);    Node    parent    =    curCfg.getDirectedGraphNode(n);    n.removeChild(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	87	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  parent  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  parent  =  curCfg.getDirectedGraphNode(n);	  n.removeChild(parent);    Node    parent    =    curCfg.getDirectedGraphNode(n);    n.removeChild(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	87	None	replace
39	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  n.removeChild(curCfg);  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  n.removeChild(curCfg);	  n.removeChild(parent);    Node    parent    =    curCfg.getDirectedGraphNode(n);    n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
40	[BUG]  [BUGGY]  n.removeChild(curCfg);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  n.removeChild(curCfg);	  n.removeChild(parent);    Node    parent    =    curCfg.getDirectedGraphNode(n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
41	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
42	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
43	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
44	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
45	[BUG]  [BUGGY]  NodeUtil.removeUnconditionalBranching(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeUnconditionalBranching(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeUnconditionalBranching(curCfg,  n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
46	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(parent,  gNode))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
47	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	236	None	replace
48	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	236	None	replace
49	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	236	None	replace
50	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	236	None	replace
51	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  gNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  gNode);	  tryRemoveDeadExprStatement(gNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
52	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  gNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  gNode);	  tryRemoveDeadExprStatement(gNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
53	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(curCfg,  gNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(curCfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(curCfg,  gNode);	  tryRemoveDeadExprStatement(gNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
54	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(tNode,  gNode);  [CE]  cannot  find  symbol  tNode  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(tNode,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(tNode,  gNode);	  tryRemoveDeadExprStatement(gNode);    	non-compiled	[CE]  cannot  find  symbol  tNode	101	None	replace
55	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(tNode);  [CE]  cannot  find  symbol  tNode  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(tNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(tNode);	  tryRemoveDeadExprStatement(gNode);    	non-compiled	[CE]  cannot  find  symbol  tNode	101	None	replace
56	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n,  t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(n,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(n,  t);	  tryRemoveUnconditionalBranching(cfg,    t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	212	None	replace
57	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements);  [CE]  cannot  find  symbol  Context  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol  Context	148	None	replace
58	[BUG]  [BUGGY]  MutableNodeUtil.removeChild(curCfg,  n);  [CE]  cannot  find  symbol  MutableNodeUtil  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  MutableNodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	MutableNodeUtil.removeChild(curCfg,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol  MutableNodeUtil	148	None	replace
59	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeExprStatementSafely(n);  return;  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeExprStatementSafely(n);    return;    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)	3	None	replace
60	[BUG]  [BUGGY]  removeExprStatementSafely(n);  return;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeExprStatementSafely(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeExprStatementSafely(n);  return;	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeExprStatementSafely(n);    return;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeExprStatementSafely(n);  return;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeExprStatementSafely(n);    return;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeExprStatementSafely(n);  return;  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(ControlFlowGraph<Node>)  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeExprStatementSafely(n);    return;    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(ControlFlowGraph<Node>)	3	None	replace
63	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  removeExprStatementSafely(n);  return;  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  removeExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeExprStatementSafely(n);    return;    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	3	None	replace
64	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    removeDeadExprStatementOnly(n);    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	274	None	replace
65	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  removeDeadExprStatementOnly(n);  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  removeDeadExprStatementOnly(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  removeDeadExprStatementOnly(n);  return;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    removeDeadExprStatementOnly(n);    return;    }    	non-compiled	[CE]  ';'  expected	274	None	replace
66	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeExprStatementOnly(n);  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeExprStatementOnly(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeExprStatementOnly(n);  return;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    removeDeadExprStatementOnly(n);    return;    }    	non-compiled	[CE]  ';'  expected	274	None	replace
67	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    removeDeadExprStatementOnly(n);    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	274	None	replace
68	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    removeDeadExprStatementOnly(n);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
69	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.removeChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	111	14	replace
70	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	111	14	replace
71	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  removeNoOpStatements);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  n,  removeNoOpStatements);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	111	None	replace
72	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  curCfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  n,  curCfg);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	111	None	replace
73	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	111	None	replace
74	[BUG]  [BUGGY]  Node  curCfg  =  n.getDirectedGraphNode(curCfg);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  n.getDirectedGraphNode(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  n.getDirectedGraphNode(curCfg);	  removeDeadExprStatementSafely(n);    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
75	[BUG]  [BUGGY]  Node  curCfg  =  t.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  t.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  t.getDirectedGraphNode(n);	  removeDeadExprStatementSafely(n);    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
76	[BUG]  [BUGGY]  node  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node  =  curCfg.getDirectedGraphNode(n);	  removeDeadExprStatementSafely(n);    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
77	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    ||    removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
78	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    ||    removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
79	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  Context.checkState(removeNoOpStatements    ||    removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
80	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    ||    removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
81	[BUG]  [BUGGY]  n.removeChild(curCfg,  node);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  node);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  node);	  n.removeChild(curCfg,    jpNode);    	non-compiled	[CE]  cannot  find  symbol  node	211	None	replace
82	[BUG]  [BUGGY]  n.removeChild(curCfg,  curNode);  [CE]  cannot  find  symbol  curNode  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  curNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  curNode);	  n.removeChild(curCfg,    jpNode);    	non-compiled	[CE]  cannot  find  symbol  curNode	211	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);  return;	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	compilable	  [FE]  AssertionFailedError  	90	14	replace
84	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  return;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);  return;	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	compilable	  [FE]  AssertionFailedError  	90	14	replace
85	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(parent,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	298	None	replace
86	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>,Node)  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(parent,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>,Node)	298	None	replace
87	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(parent,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)	298	None	replace
88	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent,  n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent,  n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent,  n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	298	None	replace
89	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n,  parent);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	298	None	replace
90	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  parent.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(parent,  n);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  parent.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(parent,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  parent.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(parent,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent,    n);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	298	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
92	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
94	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
95	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	299	None	add
96	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(parent);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	299	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  return;  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
98	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(parent);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  return;  }	  	compilable	  [FE]  AssertionFailedError  	299	2	add
99	[BUG]  [BUGGY]  removeDeadExprStatementSafely(t,  n,  parent);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(t,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(t,  n,  parent);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
100	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode,  parent);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(gNode,  parent);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
101	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent,  t);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  parent,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent,  t);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
102	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent,  cfgStack);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  parent,  cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent,  cfgStack);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
103	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent,  gNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent,  gNode);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
104	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  gNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  gNode);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
105	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  curCfg,  parent);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  curCfg,  parent);	  removeDeadExprStatementSafely(n,    parent);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	108	None	replace
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	147	14	add
107	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	147	14	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	147	14	add
109	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	147	14	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	147	14	add
111	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	147	14	add
112	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  	non-compiled	[CE]  ')'  expected	147	None	add
113	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	147	None	add
114	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.cloneTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.cloneTree());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.cloneTree());	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
115	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.cloneTree());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.cloneTree());	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	168	None	replace
116	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfgStack.cloneTree());  [CE]  cannot  find  symbol  curCfgStack  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfgStack.cloneTree());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  curCfgStack.cloneTree());	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	168	None	replace
117	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.cloneTree());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.cloneTree());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg.cloneTree());	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
118	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  cfgStack);	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	168	None	replace
119	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree(),  curCfg);	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	168	None	replace
120	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  n.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  n.cloneTree());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  parent,  n.cloneTree());	  tryRemoveUnconditionalBranching(t,    n,    parent.cloneTree());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	168	None	replace
121	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
122	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
123	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBra	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
124	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemov  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemov  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemov	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
125	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
126	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
127	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
128	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
129	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements)&&  tryRemoveUnconditionalBranching(n);	  NodeUtil.mayHaveSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
130	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removed))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removed))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removed))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
131	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	122	None	replace
132	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	122	None	replace
133	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
134	[BUG]  [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	122	None	replace
135	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(n,  gNode);	  tryRemoveUnconditionalBranching(r,    gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	172	None	replace
136	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }	  NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
137	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(t,  n);  }	  NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
138	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }	  NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
139	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }	  NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
140	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.isExpressionNode(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.isExpressionNode(n))  {  tryRemoveUnconditionalBranching(t,  n);  }	  NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
141	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
143	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
144	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	283	None	add
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
146	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
147	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	283	None	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
149	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
150	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	283	None	add
151	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  parent);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	283	None	add
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
153	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.removeChild(n,    parent);    t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	283	14	add
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  RuntimeException  	243	14	add
155	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  RuntimeException  	243	14	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	243	14	add
157	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	243	14	add
158	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  RuntimeException  	243	14	add
159	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  RuntimeException  	243	14	add
160	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	243	None	add
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	243	14	add
162	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	243	14	add
163	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(curCfg);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	243	None	add
164	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  node.removeChild(curCfg);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  node.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  node.removeChild(curCfg);	  	non-compiled	[CE]  cannot  find  symbol  node	243	None	add
165	[BUG]  [BUGGY]  Node  curCfg  =  gNode.getParent();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  gNode.getParent();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  gNode.getParent();	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
166	[BUG]  [BUGGY]  parent.replaceChild(n,  gNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  parent.replaceChild(n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	parent.replaceChild(n,  gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	266	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  n.getParent();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	Node  curCfg  =  n.getParent();	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	266	7	replace
168	[BUG]  [BUGGY]  Node  curCfg  =  n.getParent();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  n.getParent();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  n.getParent();	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	266	7	replace
169	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	245	None	replace
170	[BUG]  [BUGGY]  n.removeChild(curCfg,  n);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	245	None	replace
171	[BUG]  [BUGGY]  n.removeChild(curCfg,  parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	245	None	replace
172	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
173	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  parent,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  parent,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
174	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  n,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
175	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
176	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(compiler,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(compiler,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
177	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  n,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(compiler,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(compiler,  n,  gNode);	  NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	213	None	replace
178	[BUG]  [BUGGY]  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
179	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  	5	None	replace
180	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  	5	None	replace
181	[BUG]  [BUGGY]  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
182	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  	5	None	replace
183	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  	5	None	replace
184	[BUG]  [BUGGY]  For(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  For(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	For(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(    	non-compiled	[CE]  	5	None	replace
185	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getParent());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getParent());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
186	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  n.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  n.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  n.getParent());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
187	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg,  parent.getParent());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
188	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  cfgStack.peek());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  cfgStack.peek());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
189	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  gNode.getParent());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  gNode.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  gNode.getParent());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
190	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getNext());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getNext());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent,  curCfg.getNext());	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
191	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.getParent(),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.getParent(),  cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent.getParent(),  cfgStack);	  tryRemoveUnconditionalBranching(t,    n,    parent.getParent());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	70	None	replace
192	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  ';'  expected	57	None	replace
193	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  ';'  expected	57	None	replace
194	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  ';'  expected	57	None	replace
195	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(g    	non-compiled	[CE]  ';'  expected	229	None	replace
196	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(g);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(g);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(g);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(g    	non-compiled	[CE]  ';'  expected	229	None	replace
197	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(g    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
199	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
200	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  If(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  If(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    If(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	7	None	add
201	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	7	None	add
202	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&.NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException(   "   ");  }  if(removeNoOpStatements  &&.NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    if(removeNoOpStatements  &&.NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
203	[BUG]  [BUGGY]  n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n);	  n.removeChild(parent);    Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	209	None	replace
204	[BUG]  [BUGGY]  node.removeChild(parent);  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(parent);  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(parent);  Node  n  =  curCfg.getDirectedGraphNode(n);	  n.removeChild(parent);    Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  node	209	None	replace
205	[BUG]  [BUGGY]  n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  Node  n  =  curCfg.getDirectedGraphNode(n,  parent);	  n.removeChild(parent);    Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	209	None	replace
206	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	294	None	replace
207	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	294	None	replace
208	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	294	None	replace
209	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	294	None	replace
210	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	294	None	replace
211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	110	14	add
212	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	110	14	add
213	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	add
214	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  Deque  <  Node,  Branch>  n  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  Deque  <  Node,  Branch>  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    Deque  <  Node,  Branch>  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	110	None	add
215	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	110	None	add
216	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  removeNoOpStatements);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  removeNoOpStatements);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	add
217	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  return;  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  return;	  	non-compiled	[CE]  unreachable  statement	110	None	add
218	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  curCfg);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  curCfg);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	add
219	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	203	None	replace
220	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  gNode));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	203	None	replace
221	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	203	None	replace
222	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	203	None	replace
223	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NODE_INIT_ERROR,  gNode));  [CE]  cannot  find  symbol  NODE_INIT_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NODE_INIT_ERROR,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NODE_INIT_ERROR,  gNode));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  NODE_INIT_ERROR	203	None	replace
224	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR	203	None	replace
225	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  gNode));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  gNode));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    gNode));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	203	None	replace
226	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg);	  n.removeChild(cfg);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	30	None	replace
227	[BUG]  [BUGGY]  n.removeChild(curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfgNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfgNode);	  n.removeChild(cfg);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	30	None	replace
228	[BUG]  [BUGGY]  n.removeChild(cfgStack);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfgStack);	  n.removeChild(cfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
229	[BUG]  [BUGGY]  n.removeChild(parent);  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);  n.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);  n.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeTraversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();    	compilable	  [FE]  RuntimeException  	17	9	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();    	compilable	  [FE]  RuntimeException  	17	9	replace
232	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);  n.removeChild(curCfg);	  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
233	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  curCfg);	  tryRemoveUnconditionalBranching(cfg,    curCfg);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	301	None	replace
234	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(n,  curCfg);	  tryRemoveUnconditionalBranching(cfg,    curCfg);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	301	None	replace
235	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	201	None	replace
236	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  removeNoOpStatements));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  removeNoOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	201	None	replace
237	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_OP_Statements));  [CE]  cannot  find  symbol  NO_OP_Statements  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_OP_Statements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_OP_Statements));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  cannot  find  symbol  NO_OP_Statements	201	None	replace
238	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_OPTIONAL_Statements));  [CE]  cannot  find  symbol  DEFAULT_NON_OPTIONAL_Statements  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_OPTIONAL_Statements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_OPTIONAL_Statements));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_OPTIONAL_Statements	201	None	replace
239	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	201	None	replace
240	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNCHRONIZED));  [CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZED  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNCHRONIZED));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNCHRONIZED));	  t.getCompiler().report(JSError.make(t,    n,    NO_OPEN_Statements));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZED	201	None	replace
241	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  n,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(curCfg,    gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
242	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n)&&  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n)&&  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  n)&&  tryRemoveUnconditionalBranching(n);	  NodeUtil.removeSideEffects(curCfg,    gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	161	None	replace
243	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(parent);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveUnconditionalBranching(parent);  }	  NodeUtil.removeSideEffects(curCfg,    gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
244	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  n))  {  tryRemoveDeadExprStatementSafely(n);  }	  NodeUtil.removeSideEffects(curCfg,    gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
245	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  nNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  nNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  nNode))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(curCfg,    gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
247	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
249	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
251	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
253	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
255	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	7	add
256	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }  [CE]  continue  outside  of  loop  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }	  	non-compiled	[CE]  continue  outside  of  loop	89	None	add
257	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  curCfg,  t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(gNode,  curCfg,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  curCfg,  t);	  tryRemoveUnconditionalBranching(curCfg,    t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	66	None	replace
258	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n,  t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  n,  t);	  tryRemoveUnconditionalBranching(curCfg,    t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	66	None	replace
259	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_STATEMENT));  [CE]  cannot  find  symbol  NO_GLOBAL_EXPECTED_STATEMENT  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_STATEMENT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_STATEMENT));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_EXPECTED_STATEMENT	254	None	replace
260	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT	254	None	replace
261	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_EXPECTED_STATEMENT));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_EXPECTED_STATEMENT  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_EXPECTED_STATEMENT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_EXPECTED_STATEMENT));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_EXPECTED_STATEMENT	254	None	replace
262	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  removeNoOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT,  removeNoOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT	254	None	replace
263	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_EXPECTED_STATEMENT));  [CE]  cannot  find  symbol  UNKNOWN_EXPECTED_STATEMENT  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_EXPECTED_STATEMENT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_EXPECTED_STATEMENT));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_EXPECTED_STATEMENT	254	None	replace
264	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }	  NodeUtil.mayHaveSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
265	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements  &&  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements  &&  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(removeNoOpStatements  &&  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
266	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
267	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
268	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.mayHaveSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
269	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode,  parent);	  tryRemoveUnconditionalBranching(gNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
270	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  gNode);	  tryRemoveUnconditionalBranching(gNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	73	None	replace
271	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode,  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  gNode,  n);	  tryRemoveUnconditionalBranching(gNode,    n);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
272	[BUG]  [BUGGY]  attemptRemoveUnconditionalBranching(t,  gNode,  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  attemptRemoveUnconditionalBranching(t,  gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	attemptRemoveUnconditionalBranching(t,  gNode,  n);	  tryRemoveUnconditionalBranching(gNode,    n);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
273	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  not  a  statement	93	None	replace
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  RuntimeException  	93	2	replace
275	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  RuntimeException  	93	2	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	93	7	replace
277	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	93	7	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	93	2	replace
279	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	93	2	replace
280	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(tNode,  n);  [CE]  cannot  find  symbol  tNode  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(tNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(tNode,  n);	  tryRemoveUnconditionalBranching(tNode,    gNode);    	non-compiled	[CE]  cannot  find  symbol  tNode	11	None	replace
281	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nNode,  gNode);  [CE]  cannot  find  symbol  nNode  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(nNode,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(nNode,  gNode);	  tryRemoveUnconditionalBranching(tNode,    gNode);    	non-compiled	[CE]  cannot  find  symbol  nNode	11	None	replace
282	[BUG]  [BUGGY]  n.removeChild(curCfg,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  null);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  null);	  n.removeChild(curCfg,    mNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	210	None	replace
283	[BUG]  [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  n.getModule()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  n.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  n.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  cannot  find  symbol	257	None	replace
284	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [CE]  no  suitable  constructor  found  for  Node(int,JSModule)  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  t.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,JSModule)	257	None	replace
285	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getModule()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  cannot  find  symbol	257	None	replace
286	[BUG]  [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [CE]  no  suitable  constructor  found  for  Node(int,JSModule)  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  t.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,JSModule)	257	None	replace
287	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  t.getModule()));  [CE]  no  suitable  constructor  found  for  Node(int,ControlFlowGraph<Node>,JSModule)  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  t.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  t.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,ControlFlowGraph<Node>,JSModule)	257	None	replace
288	[BUG]  [BUGGY]  n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [CE]  no  suitable  constructor  found  for  Node(int,JSModule)  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  t.getModule()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,JSModule)	257	None	replace
289	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule(),  curCfg));  [CE]  no  suitable  constructor  found  for  Node(int,JSModule,ControlFlowGraph<Node>)  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule(),  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule(),  curCfg));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    t.getModule()));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,JSModule,ControlFlowGraph<Node>)	257	None	replace
290	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
291	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
292	[BUG]  [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)	223	None	replace
293	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)	223	None	replace
294	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  parent));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>,Node)  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  parent));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>,Node)	223	None	replace
295	[BUG]  [BUGGY]  n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(compiler,  new  Node(Token.EXPR_RESULT,  gNode));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)	223	None	replace
296	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  curCfg));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>,ControlFlowGraph<Node>)  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode,  curCfg));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>,ControlFlowGraph<Node>)	223	None	replace
297	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,ControlFlowGraph<Node>,DiGraphNode<Node,Branch>)  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  curCfg,  gNode));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,ControlFlowGraph<Node>,DiGraphNode<Node,Branch>)	223	None	replace
298	[BUG]  [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)	223	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
300	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	143	14	add
302	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	143	14	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
304	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	143	14	add
306	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	143	14	add
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
308	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	143	14	add
309	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	143	None	add
310	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
311	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  not  a  statement	170	None	replace
312	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg)&&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  not  a  statement	170	None	replace
313	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
314	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
315	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
316	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg)))  {  tryRemoveUnconditionalBranching(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg)))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg)))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
317	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  not  a  statement	238	None	replace
318	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  not  a  statement	238	None	replace
319	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  parent);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  not  a  statement	238	None	replace
320	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  not  a  statement	238	None	replace
321	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(cfgStack.peek());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);  n.removeChild(cfgStack.peek());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);  n.removeChild(cfgStack.peek());	  removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	34	None	replace
322	[BUG]  [BUGGY]  n.removeChild(gNode);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(gNode);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(gNode);  n.removeChild(parent);	  removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	34	None	replace
323	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ';'  expected	260	None	replace
324	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  else  {  removeDeadExprStatementSafely(  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  	260	None	replace
325	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  removeDeadExprStatementSafely(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ';'  expected	260	None	replace
326	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ';'  expected	260	None	replace
327	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n,    parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ';'  expected	260	None	replace
328	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
329	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
330	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
331	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
332	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  return;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  return;	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
333	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
334	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(gNode);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  not  a  statement	216	None	replace
335	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n,  curCfg);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(n,  curCfg);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  not  a  statement	216	None	replace
336	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n,  parent);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  not  a  statement	216	None	replace
337	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  n,  parent);	  tryRemoveUnconditionalBranching(curCfg,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	116	None	replace
338	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  n,  parent);	  tryRemoveDeadExprStatement(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
339	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  curCfg,  parent);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n,  curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  curCfg,  parent);	  tryRemoveDeadExprStatement(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
340	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  parent,  t);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n,  parent,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  parent,  t);	  tryRemoveDeadExprStatement(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
341	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode,  parent);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode,  parent);	  tryRemoveDeadExprStatement(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	12	replace
343	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	12	replace
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.redeclareVarsInsideBranch(n);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	8	replace
345	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	8	replace
346	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  t.getCompiler().reportCodeChange();  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	286	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.redeclareVarsInsideBranch(parent);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	12	replace
348	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(parent);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	286	12	replace
349	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(gNode);  t.getCompiler().reportCodeChange();  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(gNode);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(gNode);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	286	None	replace
350	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportChange();	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
351	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  node	82	None	replace
352	[BUG]  [BUGGY]  n.removeChild(curCfg,  parent);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  parent);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  parent);  NodeUtil.removeChild(curCfg,  n);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
353	[BUG]  [BUGGY]  node.removeChild(curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(curCfg,  n);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  node	82	None	replace
354	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
355	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	26	None	replace
356	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
357	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
358	[BUG]  [BUGGY]  n.removeChild(curCfg,  gNode,  cfgStack);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  gNode,  cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  gNode,  cfgStack);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
359	[BUG]  [BUGGY]  n.removeChild(curCfg,  n,  cfgStack);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  n,  cfgStack);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n,  cfgStack);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
360	[BUG]  [BUGGY]  n.removeChild(cfgStack,  curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfgStack,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfgStack,  curCfg);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
361	[BUG]  [BUGGY]  n.removeChild(curCfg,  cfgStack,  removeNoOpStatements);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  cfgStack,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  cfgStack,  removeNoOpStatements);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
362	[BUG]  [BUGGY]  n.removeChild(curCfg,  cfgStack,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  cfgStack,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  cfgStack,  parent);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
363	[BUG]  [BUGGY]  n.removeChild(curCfg,  cfgStack,  t);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  cfgStack,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  cfgStack,  t);	  n.removeChild(curCfg,    cfgStack);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
364	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	MutableNodeTraversal.traverse(compiler,  n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	184	None	replace
365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  gNode.getAnnotation();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n  =  gNode.getAnnotation();	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeUnconditionalBranching(n);    }    else    {    return;    }    	compilable	  [FE]  RuntimeException  	184	14	replace
366	[BUG]  [BUGGY]  n  =  gNode.getAnnotation();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  gNode.getAnnotation();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  gNode.getAnnotation();	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeUnconditionalBranching(n);    }    else    {    return;    }    	compilable	  [FE]  RuntimeException  	184	14	replace
367	[BUG]  [BUGGY]  n.removeChild(parent,  gNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent,  gNode);	  n.removeChild(gNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
368	[BUG]  [BUGGY]  n.removeChild(cfg,  gNode);  [CE]  cannot  find  symbol  cfg  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfg,  gNode);	  n.removeChild(gNode);    	non-compiled	[CE]  cannot  find  symbol  cfg	31	None	replace
369	[BUG]  [BUGGY]  n.removeChild(t,  gNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(t,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(t,  gNode);	  n.removeChild(gNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
370	[BUG]  [BUGGY]  n.removeChild(child,  gNode);  [CE]  cannot  find  symbol  child  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(child,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(child,  gNode);	  n.removeChild(gNode);    	non-compiled	[CE]  cannot  find  symbol  child	31	None	replace
371	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  removeDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
372	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
373	[BUG]  [BUGGY]  removeNoOpStatements(gNode))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements(gNode))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements(gNode))  {  removeDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
374	[BUG]  [BUGGY]  removeNoOpStatements(gNode.getAnnotation()))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements(gNode.getAnnotation()))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements(gNode.getAnnotation()))  {  removeDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
375	[BUG]  [BUGGY]  removeNoOpStatements(gNode.getAnnotation(),  n))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements(gNode.getAnnotation(),  n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements(gNode.getAnnotation(),  n))  {  removeDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
376	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	270	None	replace
377	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  n.getAnnotation());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t,  n.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  n.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
378	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t.getAnnotation(),  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t.getAnnotation(),  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t.getAnnotation(),  n);	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
379	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n.getAnnotation());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
380	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  t.getAnnotation());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n,  t.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  t.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
381	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode.getAnnotation());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(gNode.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
382	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(curCfg,  t.getAnnotation());  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(curCfg,  t.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(curCfg,  t.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
383	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t  n,  t.getAnnotation());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t  n,  t.getAnnotation());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t  n,  t.getAnnotation());	  tryRemoveDeadExprStatement(t.getAnnotation());    	non-compiled	[CE]  ')'  expected	104	None	replace
384	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  tNode);  [CE]  cannot  find  symbol  tNode  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(n,  tNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  tNode);	  tryRemoveDeadExprStatement(tNode,    n);    	non-compiled	[CE]  cannot  find  symbol  tNode	103	None	replace
385	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode,  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode,  n);	  tryRemoveDeadExprStatement(tNode,    n);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
386	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(tNode,  n,  parent);  [CE]  cannot  find  symbol  tNode  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(tNode,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(tNode,  n,  parent);	  tryRemoveDeadExprStatement(tNode,    n);    	non-compiled	[CE]  cannot  find  symbol  tNode	103	None	replace
387	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(tNode,  parent);  [CE]  cannot  find  symbol  tNode  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(tNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(tNode,  parent);	  tryRemoveDeadExprStatement(tNode,    n);    	non-compiled	[CE]  cannot  find  symbol  tNode	103	None	replace
388	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(parent);	  removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
389	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(gNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(gNode);	  removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
390	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatementSafely(gNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatementSafely(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatementSafely(gNode);	  removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
391	[BUG]  [BUGGY]  noOpStatements.remove(n);  NodeUtil.removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  noOpStatements  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  noOpStatements.remove(n);  NodeUtil.removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	noOpStatements.remove(n);  NodeUtil.removeDeadExprStatementSafely(n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	248	None	replace
392	[BUG]  [BUGGY]  removeNoOpStatementSafely(n,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatementSafely(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatementSafely(n,  parent);	  removeNoOpStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
393	[BUG]  [BUGGY]  removeNoOpStatementSafely(t,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatementSafely(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatementSafely(t,  n);	  removeNoOpStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	16	10	add
395	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	16	10	add
396	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
397	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    gNode.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
398	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	16	None	add
399	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	16	None	add
400	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    gNode.getCompiler().reportCodeChange();  gNode.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
401	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	16	None	add
402	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg);  n.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg);  n.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg);  n.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	16	None	add
403	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ");  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
404	[BUG]  [BUGGY]  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
405	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
406	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
407	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
408	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  throw  new  IllegalArgumentException( " ".);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
409	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  ';'  expected	293	None	replace
410	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  ';'  expected	293	None	replace
411	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  ';'  expected	293	None	replace
412	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  ';'  expected	293	None	replace
413	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  ';'  expected	293	None	replace
414	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  removeDeadExprStatementSafely(	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  	293	None	replace
415	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  	293	None	replace
416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
417	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
418	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	221	None	add
419	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	221	None	add
420	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	221	None	add
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
422	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
423	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
424	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  new  Node(Token.EXPR_RESULT));  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	compilable	  [FE]  RuntimeException  	221	14	add
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	221	14	add
426	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	221	14	add
427	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EXPR_RESULT));    NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	221	None	add
428	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
429	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(curCfg,  n);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
430	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	241	None	replace
431	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  n.removeChild(parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
432	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  n.removeChild(parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
433	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    n.removeChild(parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
434	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    n.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	205	14	add
435	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    n.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	205	14	add
436	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	205	None	add
437	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	205	None	add
438	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg);  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	205	None	add
439	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    Node  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	205	None	add
440	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	205	None	add
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	205	14	add
442	[BUG]  [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	205	14	add
443	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	85	None	replace
444	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  n);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
445	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent,  n);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
446	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	242	None	replace
447	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	242	None	replace
448	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  null);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  null);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	242	None	replace
449	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  removeNoOpStatements);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	242	None	replace
450	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	242	None	replace
451	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	242	None	replace
452	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(curCfg,  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(curCfg,  n);	  NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
453	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(curCfg);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(curCfg);	  NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
454	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(n,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(n,  parent);	  NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
455	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(cfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(cfg,  n);	  NodeUtil.removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	113	None	replace
456	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  parent));  [CE]  cannot  find  symbol  EXPR_RESULT_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT_ERROR	140	None	replace
457	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR));  [CE]  cannot  find  symbol  EXPR_RESULT_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT_ERROR	140	None	replace
458	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR,  parent));  [CE]  cannot  find  symbol  IOContext  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  IOContext	140	None	replace
459	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CFG_EXPR_RESULT_ERROR));  [CE]  cannot  find  symbol  CFG_EXPR_RESULT_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CFG_EXPR_RESULT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  CFG_EXPR_RESULT_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  CFG_EXPR_RESULT_ERROR	140	None	replace
460	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  removeNoOpStatements));  [CE]  cannot  find  symbol  EXPR_RESULT_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  removeNoOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT_ERROR	140	None	replace
461	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  curCfg));  [CE]  cannot  find  symbol  EXPR_RESULT_ERROR  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  EXPR_RESULT_ERROR,  curCfg));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT_ERROR	140	None	replace
462	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    IOContext.EXPR_RESULT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	140	None	replace
463	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	280	None	replace
464	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	235	None	replace
465	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching;	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	235	None	replace
466	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	235	None	replace
467	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	235	None	replace
468	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching    	non-compiled	[CE]  not  a  statement	235	None	replace
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  RuntimeException  	217	14	add
470	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  RuntimeException  	217	14	add
471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	217	14	add
472	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	217	14	add
473	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	217	14	add
474	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	217	14	add
475	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	217	None	add
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	217	14	add
477	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	217	14	add
478	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EMPTY));    n.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
479	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    n.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
480	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	255	None	add
481	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	255	None	add
482	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(curCfg,  parent);  n.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	255	None	add
483	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
484	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  n.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
486	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	255	14	add
487	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(curCfg,  n);  n.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	255	None	add
488	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	255	14	add
489	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	255	14	add
490	[BUG]  [BUGGY]  n.removeChild(cfgStack.peek());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfgStack.peek());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfgStack.peek());	  n.removeChild(currentNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	224	None	replace
491	[BUG]  [BUGGY]  n.removeChild(cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfgNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfgNode);	  n.removeChild(currentNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	224	None	replace
492	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	88	None	replace
493	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  curCfg);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  curCfg);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  curCfg);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	88	None	replace
494	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg,    parent);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
495	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traversal  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Traversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Traversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	24	None	replace
496	[BUG]  [BUGGY]  Context.reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	24	None	replace
497	[BUG]  [BUGGY]  n.removeChild(compiler);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(compiler);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(compiler);  NodeTraversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
498	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TraverseTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TraverseTraversal.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	24	None	replace
499	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  Traverse  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Traverse.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Traverse.traverse(compiler,  n,  this);	  t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	24	None	replace
500	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
501	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
502	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  removeNoOpStatements)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	157	None	replace
503	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(n,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
504	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  	228	None	replace
505	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  	228	None	replace
506	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    attemptRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	126	None	replace
507	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    attemptRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	126	None	replace
508	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  attemptRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  attemptRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(removeNoOpStatements))  {  attemptRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    attemptRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	126	None	replace
509	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  parent,  gNode);	  tryRemoveUnconditionalBranching(parent,    gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	278	None	replace
510	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  gNode);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  node,  gNode);	  tryRemoveUnconditionalBranching(parent,    gNode);    	non-compiled	[CE]  cannot  find  symbol  node	278	None	replace
511	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements    &&!NodeUtil.shouldHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	132	None	replace
512	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(n,  parent);  [CE]  no  suitable  method  found  for  getDirectedGraphNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(n,  parent);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  no  suitable  method  found  for  getDirectedGraphNode(Node,Node)	106	None	replace
513	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(t,  n);  [CE]  no  suitable  method  found  for  getDirectedGraphNode(NodeTraversal,Node)  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(t,  n);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  no  suitable  method  found  for  getDirectedGraphNode(NodeTraversal,Node)	106	None	replace
514	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(parent);  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(parent);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  incompatible  types	106	None	replace
515	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(cfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(cfg,  n);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	106	None	replace
516	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(t);  [CE]  no  suitable  method  found  for  getDirectedGraphNode(NodeTraversal)  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(t);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  no  suitable  method  found  for  getDirectedGraphNode(NodeTraversal)	106	None	replace
517	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(parent,  n);  [CE]  no  suitable  method  found  for  getDirectedGraphNode(Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n  =  curCfg.getDirectedGraphNode(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(parent,  n);	  n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  no  suitable  method  found  for  getDirectedGraphNode(Node,Node)	106	None	replace
518	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  this);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	142	None	replace
519	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	282	None	replace
520	[BUG]  [BUGGY]  n.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	282	None	replace
521	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  curCfg);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n,  curCfg);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(n,  curCfg);  t.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	282	None	replace
522	[BUG]  [BUGGY]  n.removeChild(curCfg,  t.getCompiler().reportCodeChange());  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  t.getCompiler().reportCodeChange());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  t.getCompiler().reportCodeChange());	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  'void'  type  not  allowed  here	282	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
524	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
526	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
528	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	185	7	add
529	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  	non-compiled	[CE]  ';'  expected	185	None	add
530	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    removeDeadExprStatementSafely(n);    return;    }    Node  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	185	None	add
531	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(parent);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
532	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(t,  n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(t,  n);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
533	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(n,  parent);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
534	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(t);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
535	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(cfg,  n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(cfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(cfg,  n);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
536	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(cfg);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(cfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(cfg);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
537	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedNode(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  n  =  curCfg.getDirectedNode(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedNode(parent);	  Node    n    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	105	None	replace
538	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  parent,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode,  parent,  n);	  tryRemoveUnconditionalBranching(t,    gNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	69	None	replace
539	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  parent,  gNode,  n);	  tryRemoveUnconditionalBranching(t,    gNode,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	69	None	replace
540	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  n);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  node,  n);	  tryRemoveUnconditionalBranching(t,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol  node	69	None	replace
541	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  n,  gNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  n,  gNode);	  tryRemoveUnconditionalBranching(t,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
542	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  gNode.getParent());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  gNode.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  gNode.getParent());	  tryRemoveUnconditionalBranching(t,    gNode,    n);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
543	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	288	None	replace
544	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
545	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  node	288	None	replace
546	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  curCfg);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n,  curCfg);	  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,    n);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	288	None	replace
547	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
548	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	198	None	replace
549	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExpr  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExpr  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExpr	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	198	None	replace
550	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  incompatible  types	198	None	replace
551	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg  ==  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg  ==  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg  ==  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
552	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	198	None	replace
553	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	198	None	replace
554	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
555	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    return;    }    	non-compiled	[CE]  incompatible  types	196	None	replace
556	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
557	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
558	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    return;    }    	non-compiled	[CE]  incompatible  types	196	None	replace
559	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  node	22	None	replace
560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	22	14	replace
561	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	22	14	replace
562	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	192	None	replace
563	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
564	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
565	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	192	None	replace
566	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	192	None	replace
567	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    return;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	192	None	replace
568	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)&&  tryRemoveUnconditionalBranching(n,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)&&  tryRemoveUnconditionalBranching(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent)&&  tryRemoveUnconditionalBranching(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
569	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n,  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
570	[BUG]  [BUGGY]  if(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
571	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(t,  n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(t,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
572	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveDeadExprStatementSafely(n,  parent);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveDeadExprStatementSafely(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveDeadExprStatementSafely(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
573	[BUG]  [BUGGY]  if(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n)&&    tryRemoveUnconditionalBranching(n,    parent);    	non-compiled	[CE]  ')'  expected	261	None	replace
574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	80	14	add
575	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	80	14	add
576	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	80	None	add
577	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(curCfg);  n.removeChild(parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(curCfg);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(curCfg);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	add
578	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(curCfg);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(curCfg);  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(curCfg);  n.removeChild(curCfg);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	add
579	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    Node  parent  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	80	None	add
580	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	80	None	add
581	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedParentNode(n);  n.removeChild(parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  Node  parent  =  curCfg.getDirectedParentNode(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);        n.removeChild(parent);    Node  parent  =  curCfg.getDirectedParentNode(n);  n.removeChild(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	80	None	add
582	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,   "   "));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,   "   "));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  parent,   "   "));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,   "   "));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node,String)	204	None	replace
583	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,   " "));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,   " "));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  parent,  NON_GLOBAL_DEFINE_INIT_ERROR,   " "));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,   "   "));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	204	None	replace
584	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,   " "));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,   " "));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,   " "));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,   "   "));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	204	None	replace
585	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_DEFINE_INIT_ERROR,   " "));  [CE]  cannot  find  symbol  INVALID_DEFINE_INIT_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  INVALID_DEFINE_INIT_ERROR,   " "));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  INVALID_DEFINE_INIT_ERROR,   " "));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,   "   "));    	non-compiled	[CE]  cannot  find  symbol  INVALID_DEFINE_INIT_ERROR	204	None	replace
586	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ';'  expected	178	None	replace
587	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ';'  expected	178	None	replace
588	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  return;  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ';'  expected	178	None	replace
589	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  return;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  return;  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ';'  expected	178	None	replace
590	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);  return;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(n);  return;	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ')'  expected	178	None	replace
591	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  return;  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    return;    }    	non-compiled	[CE]  ';'  expected	178	None	replace
592	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  curCfg,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  curCfg,  n);	  tryRemoveDeadExprStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
593	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(curCfg,  n,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(curCfg,  n,  parent);	  tryRemoveDeadExprStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
594	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode,  curCfg,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(gNode,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode,  curCfg,  n);	  tryRemoveDeadExprStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
595	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  n,  curCfg);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(t,  n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  n,  curCfg);	  tryRemoveDeadExprStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
596	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(curCfg,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(curCfg,  parent);	  tryRemoveDeadExprStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
597	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
598	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
600	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
602	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	127	2	add
603	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects	  	non-compiled	[CE]  ')'  expected	127	None	add
604	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.	  	non-compiled	[CE]  ')'  expected	127	None	add
605	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&	  	non-compiled	[CE]  ')'  expected	127	None	add
606	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	127	None	add
607	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  parent));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  parent));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	190	None	replace
608	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  parent));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	190	None	replace
609	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  removeNoOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  removeNoOpStatements));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	190	None	replace
610	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_ERROR));  [CE]  cannot  find  symbol  NO_GLOBAL_EXPECTED_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NO_GLOBAL_EXPECTED_ERROR));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_EXPECTED_ERROR	190	None	replace
611	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_EXPECTED_ERROR));  [CE]  cannot  find  symbol  CFG_NON_GLOBAL_EXPECTED_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_EXPECTED_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_EXPECTED_ERROR));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  CFG_NON_GLOBAL_EXPECTED_ERROR	190	None	replace
612	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  curCfg));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  curCfg));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	190	None	replace
613	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR));	  t.report(JSError.make(t,    n,    NON_GLOBAL_EXPECTED_ERROR));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	190	None	replace
614	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  n));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  n));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    n));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	253	None	replace
615	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  parent));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    n));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	253	None	replace
616	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  n));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  UNKNOWN_SYNTHETIC_ERROR,  n));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    n));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	253	None	replace
617	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  n));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  n));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    n));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR	253	None	replace
618	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR,    n));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEFINE_INIT_ERROR	253	None	replace
619	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(tNode,  gNode,  parent);  [CE]  cannot  find  symbol  tNode  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(tNode,  gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(tNode,  gNode,  parent);	  tryRemoveUnconditionalBranching(gNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  tNode	15	None	replace
620	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t.getCompiler(),  gNode,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t.getCompiler(),  gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t.getCompiler(),  gNode,  parent);	  tryRemoveUnconditionalBranching(gNode,    parent);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
621	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  n,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(gNode,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  n,  parent);	  tryRemoveUnconditionalBranching(gNode,    parent);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
622	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  gNode,  parent);	  tryRemoveUnconditionalBranching(gNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
623	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode,  curCfg);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveDeadExprStatement(gNode,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode,  curCfg);	  tryRemoveDeadExprStatement(n,    curCfg);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
624	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    ||!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	240	None	replace
625	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    ||!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	240	None	replace
626	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    ||!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	240	None	replace
627	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(gNode);  }	  NodeUtil.removeSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	158	None	replace
628	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(cfg,  gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  NodeUtil.removeSideEffects(gNode,    removeNoOpStatements))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	158	None	replace
629	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n,  parent);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	112	None	replace
630	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parent,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  curCfg,  n);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	112	None	replace
631	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(curCfg,  parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  parent,  n);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	112	None	replace
632	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  curCfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(n,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(n,  curCfg);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	112	None	replace
633	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(compiler,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(compiler,  curCfg,  n);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	112	None	replace
634	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(cfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(cfg,  n);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  cfg	112	None	replace
635	[BUG]  [BUGGY]  NodeUtil.removeChild(parenn,  curCfg,  n);  [CE]  cannot  find  symbol  parenn  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(parenn,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parenn,  curCfg,  n);	  NodeUtil.removeChild(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  parenn	112	None	replace
636	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
637	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
639	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
640	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects	  	non-compiled	[CE]  ')'  expected	279	None	add
641	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	279	None	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	14	add
643	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	14	add
644	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects	  	non-compiled	[CE]  ')'  expected	279	None	add
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
646	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	279	2	add
647	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  parent));	  t.report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	189	None	replace
648	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));	  t.report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	189	None	replace
649	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));	  t.report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	189	None	replace
650	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  CFG_NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  CFG_NON_GLOBAL_DEFINE_INIT_ERROR));	  t.report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  CFG_NON_GLOBAL_DEFINE_INIT_ERROR	189	None	replace
651	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));	  t.report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	189	None	replace
652	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
653	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  removeUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
654	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
655	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
656	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
657	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
658	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    removeUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	285	12	add
660	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	285	12	add
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	285	12	add
662	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	285	12	add
663	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	285	None	add
664	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange	  	non-compiled	[CE]  not  a  statement	285	None	add
665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  AssertionFailedError  	285	12	add
666	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  AssertionFailedError  	285	12	add
667	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  AssertionFailedError  	285	12	add
668	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);	  	compilable	  [FE]  AssertionFailedError  	285	12	add
669	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange	  	non-compiled	[CE]  not  a  statement	285	None	add
670	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.removeVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  NodeUtil.removeVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();        NodeUtil.redeclareVarsInsideBranch(n);    t.getCompiler().reportCodeChange();    NodeUtil.removeVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	285	None	add
671	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	265	14	add
672	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	265	14	add
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	265	14	add
674	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	265	14	add
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	265	14	add
676	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	265	14	add
677	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  	non-compiled	[CE]  ')'  expected	265	None	add
678	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	265	None	add
679	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	265	None	add
680	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr	  	non-compiled	[CE]  ';'  expected	265	None	add
681	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(parent,  gNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(parent,  gNode);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	167	None	replace
682	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	244	14	replace
683	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	244	14	replace
684	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  NodeUtil.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);  NodeUtil.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	244	None	replace
685	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  parent.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.redeclareVarsInsideBranch(n);  parent.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	244	14	replace
686	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  parent.removeChild(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.redeclareVarsInsideBranch(n);  parent.removeChild(parent);	  n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);    n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	244	14	replace
687	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	290	None	replace
688	[BUG]  [BUGGY]  NodeUtil.copyCurrentStatement(curCfg,  n);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.copyCurrentStatement(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.copyCurrentStatement(curCfg,  n);	  n.removeChild(parent);    NodeUtil.copyCurrentStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
689	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.copyCurrentStatement(curCfg,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.copyCurrentStatement(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.copyCurrentStatement(curCfg,  n);	  n.removeChild(parent);    NodeUtil.copyCurrentStatement(curCfg,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	208	None	replace
690	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.copyCurrentStatement(curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(parent);  NodeUtil.copyCurrentStatement(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(parent);  NodeUtil.copyCurrentStatement(curCfg,  n);	  n.removeChild(parent);    NodeUtil.copyCurrentStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  node	208	None	replace
691	[BUG]  [BUGGY]  parent.removeChild(n);  NodeUtil.copyCurrentStatement(curCfg,  n);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  parent.removeChild(n);  NodeUtil.copyCurrentStatement(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	parent.removeChild(n);  NodeUtil.copyCurrentStatement(curCfg,  n);	  n.removeChild(parent);    NodeUtil.copyCurrentStatement(curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
692	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	Preconditions.checkState(removeNoOpStatements);  NodeUtil.removeChild(parent,  n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
693	[BUG]  [BUGGY]  Preconditions.checkState(removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Preconditions.checkState(removeNoOpStatements);  NodeUtil.removeChild(parent,  n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
694	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(!removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	Preconditions.checkState(!removeNoOpStatements);  NodeUtil.removeChild(parent,  n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	40	14	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(!removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(!removeNoOpStatements);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Preconditions.checkState(!removeNoOpStatements);  NodeUtil.removeChild(parent,  n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	40	14	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(!removeNoOpStatement);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  removeNoOpStatement  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(!removeNoOpStatement);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Preconditions.checkState(!removeNoOpStatement);  NodeUtil.removeChild(parent,  n);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  removeNoOpStatement	40	None	replace
697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	Preconditions.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	40	14	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Preconditions.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Preconditions.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	40	14	replace
699	[BUG]  [BUGGY]  Node  curCfg  =  n.removeChild(parent,  curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  n.removeChild(parent,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  n.removeChild(parent,  curCfg);	  n.removeChild(parent,    curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	76	None	replace
700	[BUG]  [BUGGY]  n.removeChild(cfg,  parent);  [CE]  cannot  find  symbol  cfg  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(cfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfg,  parent);	  n.removeChild(parent,    curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	76	None	replace
701	[BUG]  [BUGGY]  n.removeChild(parent,  curCfg,  removeNoOpStatements);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(parent,  curCfg,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent,  curCfg,  removeNoOpStatements);	  n.removeChild(parent,    curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	76	None	replace
702	[BUG]  [BUGGY]  gNode.removeChild(parent,  curCfg);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  gNode.removeChild(parent,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.removeChild(parent,  curCfg);	  n.removeChild(parent,    curCfg);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
703	[BUG]  [BUGGY]  n.removeChild(curcfg,  parent);  [CE]  cannot  find  symbol  curcfg  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curcfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curcfg,  parent);	  n.removeChild(parent,    curCfg);    	non-compiled	[CE]  cannot  find  symbol  curcfg	76	None	replace
704	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
705	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  gNode);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
706	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
707	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n,  gNode);	  t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,    gNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
708	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  ';'  expected	219	None	replace
709	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  not  a  statement	219	None	replace
710	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  ';'  expected	219	None	replace
711	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  not  a  statement	219	None	replace
712	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  ';'  expected	219	None	replace
713	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  	219	None	replace
714	[BUG]  [BUGGY]  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
715	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(    	non-compiled	[CE]  	289	None	replace
716	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  removeNoOpStatements);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    doRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	150	None	replace
717	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(curCfg);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent);  NodeUtil.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(curCfg);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	37	None	replace
718	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode,  n);  NodeUtil.removeChild(curCfg);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(gNode,  n);  NodeUtil.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(gNode,  n);  NodeUtil.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(curCfg);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	37	None	replace
719	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode);  NodeUtil.removeChild(curCfg);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(gNode);  NodeUtil.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(gNode);  NodeUtil.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(curCfg);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	37	None	replace
720	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	297	None	replace
721	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	297	None	replace
722	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)	297	None	replace
723	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>,Node)  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode,  n))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(t,    n);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>,Node)	297	None	replace
724	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(n,  parent);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.removeChild(parent);  NodeUtil.removeChild(n,  parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  node	206	None	replace
725	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.removeChild(parent,  n);	  n.removeChild(parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	206	None	replace
726	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(parent,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
727	[BUG]  [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(curCfg,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
728	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getLastChild()));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getLastChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getLastChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
729	[BUG]  [BUGGY]  n.replaceChild(gNode,  new  Node(Token.EXPR_RESULT,  n.getFirstChild()));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(gNode,  new  Node(Token.EXPR_RESULT,  n.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(gNode,  new  Node(Token.EXPR_RESULT,  n.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	259	None	replace
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  parent.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  parent.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	compilable	  [FE]  RuntimeException  	259	14	replace
731	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  parent.getFirstChild()));  [FE]  RuntimeException  [FE]                      RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  parent.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  parent.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	compilable	  [FE]  RuntimeException  	259	14	replace
732	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getFirstChild()));  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
733	[BUG]  [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(t,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));	  n.replaceChild(n,    new    Node(Token.EXPR_RESULT,    gNode.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	259	None	replace
734	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
735	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
736	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  parent);  [CE]  cannot  find  symbol  cfg  [FE]          RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(cfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(cfg,  parent);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  cfg	28	None	replace
737	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.removeChild(compiler,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(compiler,  parent);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	28	None	replace
738	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  Context.checkState(removeNoOpStatements    ||!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    	non-compiled	[CE]  ';'  expected	55	None	replace
739	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	39	14	add
740	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	39	14	add
741	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	39	None	add
742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	39	14	add
743	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	39	14	add
744	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	39	None	add
745	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	39	None	add
746	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  n  =  curCfg.getDirectedGraphNode(n);  [CE]  incompatible  types  [FE]              RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  incompatible  types	39	None	add
747	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(curCfg,  n);  parent.replaceChild(n,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	39	None	add
748	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(curCfg,  n);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	39	None	add
749	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
750	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
751	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
752	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
753	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
754	[BUG]  [BUGGY]  Context.checkState(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(!removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }	  Context.checkState(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
755	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  break;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  break;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  break;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    break;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	220	None	replace
756	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    break;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	220	None	replace
757	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    break;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	220	None	replace
758	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  break;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  break;  }	          if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	220	None	replace
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	2	add
760	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	2	add
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	2	add
762	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	2	add
763	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	117	None	add
764	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects	  	non-compiled	[CE]  ')'  expected	117	None	add
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	14	add
766	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	117	14	add
767	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(parent))        {        tryRemoveUnconditionalBranching(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.	  	non-compiled	[CE]  ')'  expected	117	None	add
768	[BUG]  [BUGGY]  n.removeChild(curCfg,  curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  curCfg);	  n.removeChild(cfg,    curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
769	[BUG]  [BUGGY]  gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  not  a  statement	295	None	replace
770	[BUG]  [BUGGY]  gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.getAnnotation()  ==  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching(	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  not  a  statement	295	None	replace
771	[BUG]  [BUGGY]  gNode.getAnnotation()!=  GraphReachability.REACHABLE  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  gNode.getAnnotation()!=  GraphReachability.REACHABLE  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.getAnnotation()!=  GraphReachability.REACHABLE  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  tryRemoveUnconditionalBranching	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n    	non-compiled	[CE]  not  a  statement	295	None	replace
772	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  parent));  [CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  parent));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  parent));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEPRECATED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT	252	None	replace
773	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEPRECATED_STATEMENT));  [CE]  cannot  find  symbol  NO_GLOBAL_DEPRECATED_STATEMENT  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEPRECATED_STATEMENT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEPRECATED_STATEMENT));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEPRECATED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEPRECATED_STATEMENT	252	None	replace
774	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  removeNoOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  removeNoOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEPRECATED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT	252	None	replace
775	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  curCfg));  [CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT,  curCfg));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEPRECATED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT	252	None	replace
776	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEPRECATED_STATEMENT));  [CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEPRECATED_STATEMENT  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEPRECATED_STATEMENT));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  DEFAULT_NON_GLOBAL_DEPRECATED_STATEMENT));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEPRECATED_STATEMENT));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NON_GLOBAL_DEPRECATED_STATEMENT	252	None	replace
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
778	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
780	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
782	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
784	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
785	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    Node  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	275	None	add
786	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
787	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
788	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
789	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&    NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	275	7	add
790	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n,  parent);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n,  parent);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
791	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprStatement(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprStatement(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprStatement(n);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
792	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExpressionNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExpressionNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExpressionNode(n);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
793	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(t,  n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(t,  n);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
794	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(parent);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(parent);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
795	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfgStack.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfgStack.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfgStack.getDirectedGraphNode(n);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
796	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedExprNode(n);	  Deque    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	195	None	replace
797	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode,  curCfg);	  tryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
798	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  nNode,  gNode);  [CE]  cannot  find  symbol  nNode  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  nNode,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  nNode,  gNode);	  tryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol  nNode	10	None	replace
799	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_GLOBAL_DEFINE_INIT_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NO_GLOBAL_DEFINE_INIT_ERROR	200	None	replace
800	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  removeNoOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	200	None	replace
801	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  curCfg));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	200	None	replace
802	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  noOpStatements));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  noOpStatements));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  noOpStatements));	  t.getCompiler().report(JSError.make(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	200	None	replace
803	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;	  Context.checkState(removeNoOpStatements    ||!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
804	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  incompatible  types	193	None	replace
805	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprS  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprS  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements)  {  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprS	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node>    curCfg    =    curCfg.getDirectedGraphNode(n);    if(curCfg!=    null)    {    removeDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  not  a  statement	193	None	replace
806	[BUG]  [BUGGY]  cfg  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  cfg  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  cfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	cfg  =  curCfg.getDirectedGraphNode(n);	  removeDeadExprStatementSafely(n);    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	165	None	replace
807	[BUG]  [BUGGY]  Node  curCfg  =  cfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  cfg  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  cfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  cfg.getDirectedGraphNode(n);	  removeDeadExprStatementSafely(n);    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	165	None	replace
808	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  continue;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  continue;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  continue;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    continue;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	197	None	replace
809	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  continue;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  continue;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg  ==  null)  {  continue;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    continue;    }    	non-compiled	[CE]  ';'  expected	197	None	replace
810	[BUG]  [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    continue;    }    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	197	None	replace
811	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }	  if(curCfg!=    null)    {    ControlFlowGraph    <    Node,    Branch>    cfg    =    curCfg.getDirectedGraphNode(n);    if(cfg!=    null)    {    continue;    }    	non-compiled	[CE]  ';'  expected	197	None	replace
812	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  not  a  statement	237	None	replace
813	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  ';'  expected	237	None	replace
814	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(gNode);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  not  a  statement	237	None	replace
815	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  not  a  statement	237	None	replace
816	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(gNode);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)||  tryRemoveUnconditionalBranching(gNode);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  not  a  statement	237	None	replace
817	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(gNode);    }    	non-compiled	[CE]  not  a  statement	237	None	replace
818	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  cfg);  [CE]  cannot  find  symbol  cfg  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(gNode,  cfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  cfg);	  tryRemoveUnconditionalBranching(cfg,    gNode);    	non-compiled	[CE]  cannot  find  symbol  cfg	13	None	replace
819	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  not  a  statement	271	None	replace
820	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	271	None	replace
821	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  ';'  expected	271	None	replace
822	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryDeadExprStatementSafely(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  not  a  statement	271	None	replace
823	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  not  a  statement	271	None	replace
824	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryDeadExprStatementSafely(n);  return;  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryDeadExprStatementSafely(n);    return;    }    	non-compiled	[CE]  not  a  statement	271	None	replace
825	[BUG]  [BUGGY]  removeUnconditionalBranching(gNode);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(gNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
826	[BUG]  [BUGGY]  removeUnconditionalBranching(t,  n);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(t,  n);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
827	[BUG]  [BUGGY]  removeUnconditionalBranching(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(cfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(cfg,  n);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	163	None	replace
828	[BUG]  [BUGGY]  removeUnconditionalBranching(curCfg,  n);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(curCfg,  n);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
829	[BUG]  [BUGGY]  removeUnconditionalBranching(curCfg);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(curCfg);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
830	[BUG]  [BUGGY]  removeUnconditionalBranching(parent);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeUnconditionalBranching(parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(parent);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
831	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	269	None	replace
832	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	269	None	replace
833	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	269	None	replace
834	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveDeadExprStatementSafely(n);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	269	None	replace
835	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveDeadExprStatementSafely(n);	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	269	None	replace
836	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(gNode);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(gNode);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(gNode);  }	  removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	269	None	replace
837	[BUG]  [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);  NodeUtil.removeChild(curCfg,  parent);	  n.removeChild(parent);    NodeUtil.removeChild(curCfg);    n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
838	[BUG]  [BUGGY]  Node  t  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  t  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  t  =  curCfg.getDirectedGraphNode(n);	  t.getCompiler().reportCodeChange();    Node    t    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	231	None	replace
839	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  n.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);	  t.getCompiler().reportCodeChange();    Node    t    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
840	[BUG]  [BUGGY]  node.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  node.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	node.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);	  t.getCompiler().reportCodeChange();    Node    t    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  cannot  find  symbol  node	231	None	replace
841	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n,  parent);  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  t.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n,  parent);	  t.getCompiler().reportCodeChange();    Node    t    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	231	None	replace
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	145	14	add
843	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	145	14	add
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	145	14	add
845	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	145	14	add
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	145	14	add
847	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	145	14	add
848	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(	  	non-compiled	[CE]  ')'  expected	145	None	add
849	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        removeDeadExprStatementSafely(n);        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	145	None	add
850	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(ControlFlowGraph<Node>)  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(curCfg))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node    parent    =    curCfg.getDirectedGraphNode(n);    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(ControlFlowGraph<Node>)	171	None	replace
851	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [CE]  [FE]        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  	48	None	replace
852	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [CE]  [FE]          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  	48	None	replace
853	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraph  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraph  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraph	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
854	[BUG]  [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	||(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirected	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
855	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [CE]  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curCfg)  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(curCfg)  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  	48	None	replace
856	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(cfg))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n	          if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    for(DiGraphNode    <    Node,    Branch>    cfg    :    curCfg.getDirectedGraphNode(n    	non-compiled	[CE]  	48	None	replace
857	[BUG]  [BUGGY]  gNode.removeChild(curCfg);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  gNode.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    gNode.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
858	[BUG]  [BUGGY]  Node  curCfg  =  n.removeChild(curCfg);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  n.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  n.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    gNode.removeChild(curCfg);    	non-compiled	[CE]  incompatible  types	38	None	replace
859	[BUG]  [BUGGY]  Node  curCfg  =  gNode.removeChild(curCfg);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  Node  curCfg  =  gNode.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  curCfg  =  gNode.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    gNode.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
860	[BUG]  [BUGGY]  removeDeadExprStatementSafely(parent);  gNode.removeChild(curCfg);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(parent);  gNode.removeChild(curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(parent);  gNode.removeChild(curCfg);	  removeDeadExprStatementSafely(n);    gNode.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
861	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  cfg,  curCfg);  [CE]  cannot  find  symbol  cfg  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  cfg,  curCfg);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  cfg,  curCfg);	  tryRemoveUnconditionalBranching(t,    curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	64	None	replace
862	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  curCfg,  parent);	  tryRemoveUnconditionalBranching(t,    curCfg);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
863	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  n);	  TryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
864	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(curCfg,  gNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(curCfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(curCfg,  gNode);	  TryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
865	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  curCfg,  gNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  curCfg,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  curCfg,  gNode);	  TryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
866	[BUG]  [BUGGY]  RemoveUnconditionalBranching(t,  n,  gNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  RemoveUnconditionalBranching(t,  n,  gNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	RemoveUnconditionalBranching(t,  n,  gNode);	  TryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
867	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  nNode);  [CE]  cannot  find  symbol  nNode  [FE]                            AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  TryRemoveUnconditionalBranching(t,  nNode);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  nNode);	  TryRemoveUnconditionalBranching(t,    gNode);    	non-compiled	[CE]  cannot  find  symbol  nNode	14	None	replace
868	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode,  n);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(gNode,  n);	  removeDeadExprStatementSafely(t,    n);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	109	None	replace
869	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  t);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(n,  t);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  t);	  removeDeadExprStatementSafely(t,    n);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	109	None	replace
870	[BUG]  [BUGGY]  removeDeadExprStatementSafely(t,  gNode,  n);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(t,  gNode,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(t,  gNode,  n);	  removeDeadExprStatementSafely(t,    n);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	109	None	replace
871	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  RemoveDeadExprStatementSafely(t,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	RemoveDeadExprStatementSafely(t,  n,  parent);	  removeDeadExprStatementSafely(t,    n);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
872	[BUG]  [BUGGY]  removeDeadExprStatementSafely(t,  n,  parent.getParent());  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  removeDeadExprStatementSafely(t,  n,  parent.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(t,  n,  parent.getParent());	  removeDeadExprStatementSafely(t,    n);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	109	None	replace
873	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  curCfg,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode,  curCfg,  n);	  tryRemoveUnconditionalBranching(t,    curCfg,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	169	None	replace
874	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  n,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  n,  parent);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  curCfg,  n,  parent);	  tryRemoveUnconditionalBranching(t,    curCfg,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	169	None	replace
875	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.getParent());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.getParent());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg.getParent());	  tryRemoveUnconditionalBranching(t,    curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
876	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  curCfg,  n);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  node,  curCfg,  n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  node,  curCfg,  n);	  tryRemoveUnconditionalBranching(t,    curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol  node	169	None	replace
877	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.getType());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg.getType());  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg.getType());	  tryRemoveUnconditionalBranching(t,    curCfg,    n);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
878	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n);  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    	non-compiled	[CE]  not  a  statement	149	None	replace
879	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  ';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n));  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	';'  expected  =  NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n));	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    	non-compiled	[CE]  not  a  statement	149	None	replace
880	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	95	7	add
881	[BUG]  [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }      [BUGGY]  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements        &&!NodeUtil.mayHaveSideEffects(n))        {        tryRemoveUnconditionalBranching(n);        }        else        {        return;        }        if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	95	7	add
