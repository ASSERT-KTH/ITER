bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	      	compilable	  [FE]  AssertionFailedError  	13	7	replace
2	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	      	compilable	  [FE]  AssertionFailedError  	13	7	replace
3	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeExprStatementSafely(n);  return;  }	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
4	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(gNode);  return;  }  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(gNode);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(gNode);  return;  }	      	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
5	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(n  [CE]  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(n	      	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	13	7	replace
8	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  throw  new  IllegalArgumentException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	13	7	replace
9	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  curCfg  :  curCfg.getDirectedGraphNode(	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
11	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(tNode,  gNode);  [CE]  cannot  find  symbol  tNode  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(tNode,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(tNode,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  cannot  find  symbol  tNode	14	None	replace
12	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
13	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfg,  gNode);  [CE]  cannot  find  symbol  cfg  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(cfg,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(cfg,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  cannot  find  symbol  cfg	14	None	replace
14	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  TryRemoveUnconditionalBranching(t,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	TryRemoveUnconditionalBranching(t,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
15	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(gNode,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  parent);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	22	10	add
17	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	22	10	add
18	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
19	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
20	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	22	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  AssertionFailedError  	22	14	add
22	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  AssertionFailedError  	22	14	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	22	12	add
24	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	22	12	add
25	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(parent,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(parent,  gNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
26	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
27	[BUG]  [BUGGY]  n.removeChild(curCfg,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  parent);	  n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
28	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent);	  n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	20	None	replace
29	[BUG]  [BUGGY]  n.addChildToFront(curCfg);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.addChildToFront(curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.addChildToFront(curCfg);	  n.removeChild(parent);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
30	[BUG]  [BUGGY]  n.removeChild(cfg);  [CE]  cannot  find  symbol  cfg  [FE]          RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(cfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfg);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  cfg	20	None	replace
31	[BUG]  [BUGGY]  n.removeChild(gNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(gNode);	  n.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
32	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);	  	compilable	  [FE]  RuntimeException  	17	14	add
34	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);	  	compilable	  [FE]  RuntimeException  	17	14	add
35	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    n.removeChild(curCfg);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	17	None	add
36	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  n  =  curCfg.getDirectedGraphNode(n);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  incompatible  types	17	None	add
37	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(curCfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeChild(curCfg);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
38	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  gNode.removeChild(curCfg);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  gNode.removeChild(curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    gNode.removeChild(curCfg);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	17	14	add
40	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	17	14	add
41	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
42	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
43	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  removeNoOpStatements);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  removeNoOpStatements);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	MutableNodeTraversal.traverse(compiler,  n,  removeNoOpStatements);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	10	None	replace
44	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
45	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
46	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
47	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
48	[BUG]  [BUGGY]      if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]      if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	        if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  for(DiGraphNode  <  Node,  Branch>  cfg  :  curCfg.getDirectedGraphNode(n	  	non-compiled	[CE]  ')'  expected	12	None	add
49	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
50	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(gNode)  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(gNode)  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(gNode)  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
51	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
52	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
53	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
55	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
56	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
59	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
60	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
61	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  [CE]  cannot  find  symbol  Context  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  Context	9	None	replace
63	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(gNode,  t);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  t);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
64	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  curCfg);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
65	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  parent);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
66	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  t);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  t);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
67	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  cfgStack);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  cfgStack);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
68	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
69	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  gNode,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  gNode,  n);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
70	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.getParent());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.getParent());  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent.getParent());	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
71	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  curCfg);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
72	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  parent,  n);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
73	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(gNode,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  n);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
74	[BUG]  [BUGGY]  n.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  n);	  n.removeChild(curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
75	[BUG]  [BUGGY]  n.removeChild(curCfg,  gNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  gNode);	  n.removeChild(curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
76	[BUG]  [BUGGY]  n.removeChild(parent,  curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent,  curCfg);	  n.removeChild(curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
77	[BUG]  [BUGGY]  n.removeChild(curCfg,  t);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  t);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  t);	  n.removeChild(curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
78	[BUG]  [BUGGY]  n.removeChild(curCfg,  cfgStack);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  cfgStack);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  cfgStack);	  n.removeChild(curCfg);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
79	[BUG]  [BUGGY]  n.removeChild(cfg,  curCfg);  [CE]  cannot  find  symbol  cfg  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(cfg,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(cfg,  curCfg);	  n.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	24	None	replace
80	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);    n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	14	add
81	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	14	add
82	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(curCfg,  n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
83	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
84	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(parent);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
85	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(curCfg,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
86	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(curCfg);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
87	[BUG]  [BUGGY]  n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    Node  parent  =  curCfg.getDirectedGraphNode(n);  n.removeChild(parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	add
88	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(curCfg,  parent);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
90	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
92	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
93	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  	non-compiled	[CE]  ';'  expected	8	None	add
94	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }  [CE]  continue  outside  of  loop  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  continue;  }	  	non-compiled	[CE]  continue  outside  of  loop	8	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
96	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
97	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  break;  }  [CE]  break  outside  switch  or  loop  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  break;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  break;  }	  	non-compiled	[CE]  break  outside  switch  or  loop	8	None	add
98	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t,  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(t,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t,  n);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
99	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  parent);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
100	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(curCfg,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(curCfg,  n);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
101	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(gNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(gNode);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
102	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(cfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(cfg,  n);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol  cfg	16	None	replace
103	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(tNode,  n);  [CE]  cannot  find  symbol  tNode  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(tNode,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(tNode,  n);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol  tNode	16	None	replace
104	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t.getAnnotation());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(t.getAnnotation());  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t.getAnnotation());	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
105	[BUG]  [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Node  n  =  curCfg.getDirectedGraphNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	11	None	replace
106	[BUG]  [BUGGY]  n  =  curCfg.getDirectedGraphNode(n);  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n  =  curCfg.getDirectedGraphNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  incompatible  types	11	None	replace
107	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
108	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  parent);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
109	[BUG]  [BUGGY]  removeDeadExprStatementSafely(t,  n);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(t,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(t,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	NodeUtil.removeChild(parent,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	2	14	replace
111	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	2	14	replace
112	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfg,  n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(curCfg,  n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	2	None	replace
113	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeDeadExprStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeDeadExprStatementSafely(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
114	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(gNode,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode,  curCfg);	  tryRemoveUnconditionalBranching(curCfg);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	21	None	replace
115	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  cfg);  [CE]  cannot  find  symbol  cfg  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  cfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  cfg);	  tryRemoveUnconditionalBranching(curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	21	None	replace
116	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg,  n);	  tryRemoveUnconditionalBranching(curCfg);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	21	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	6	2	add
118	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	6	2	add
119	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
120	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
121	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
122	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	6	None	add
123	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedParentNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	6	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
125	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
126	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  attemptRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
128	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
129	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.canHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.canHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.canHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
131	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
132	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.shouldHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
133	[BUG]  [BUGGY]  removeNoOpStatementSafely(n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatementSafely(n);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
134	[BUG]  [BUGGY]  removeNoOpStatementSafely(gNode);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatementSafely(gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatementSafely(gNode);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
135	[BUG]  [BUGGY]  gNode.removeChild(parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  gNode.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode.removeChild(parent);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
136	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
137	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT));  [CE]  cannot  find  symbol  IOContext  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  IOContext	23	None	replace
138	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPR_RESULT));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPR_RESULT  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPR_RESULT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPR_RESULT));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPR_RESULT	23	None	replace
139	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CFG_STATEMENT));  [CE]  cannot  find  symbol  CFG_STATEMENT  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  CFG_STATEMENT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  CFG_STATEMENT));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  CFG_STATEMENT	23	None	replace
140	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR));  [CE]  cannot  find  symbol  IOContext  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  IOContext.EXPR_RESULT_ERROR));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  IOContext	23	None	replace
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	4	14	add
142	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	4	14	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
144	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
146	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
148	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
149	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {	  	non-compiled	[CE]  ';'  expected	4	None	add
150	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  doRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
151	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  	non-compiled	[CE]  ')'  expected	4	None	add
152	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
153	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
154	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
155	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
156	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  removeUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
157	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(n,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
158	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(gNode,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  gNode  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	gNode  =  curCfg.getDirectedGraphNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	10	7	replace
160	[BUG]  [BUGGY]  gNode  =  curCfg.getDirectedGraphNode(n);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  gNode  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	gNode  =  curCfg.getDirectedGraphNode(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	10	7	replace
161	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(curCfg,  gNode))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
162	[BUG]  [BUGGY]  NodeUtil.removeSideEffects(gNode,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeSideEffects(gNode,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeSideEffects(gNode,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
163	[BUG]  [BUGGY]  removeUnconditionalBranching(n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
164	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n,  curCfg);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(n,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n,  curCfg);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
165	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	add
166	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    ControlFlowGraph  <  Node,  Branch>  curCfg  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	add
167	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeChild(parent,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeChild(parent,  gNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
168	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree());  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n,  parent.cloneTree());	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
169	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t,  curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  curCfg,  n);	  tryRemoveUnconditionalBranching(t,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
170	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(	  	non-compiled	[CE]  ')'  expected	6	None	add
171	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  Node  parent  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    Node  parent  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
172	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(r,  gNode);  [CE]  cannot  find  symbol  r  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(r,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(r,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  cannot  find  symbol  r	14	None	replace
173	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
174	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  removeNoOpStatements))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
175	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
176	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
177	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
178	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
179	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  removeNoOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  removeNoOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    Node  removeNoOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	1	None	add
180	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	1	None	add
181	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching	  	non-compiled	[CE]  ';'  expected	1	None	add
182	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    Node  noOpStatements  =  curCfg.getDirectedGraphNode(n);  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(	  	non-compiled	[CE]  ')'  expected	1	None	add
183	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    Node  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
184	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }  else  {  return;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeUnconditionalBranching(n);  }  else  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
186	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
187	[BUG]  [BUGGY]  removeDeadExprStatement(gNode);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatement(gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatement(gNode);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
188	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  JSError.make(t,  n,  parent)));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.report(JSError.make(t,  n,  JSError.make(t,  n,  parent)));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  JSError.make(t,  n,  parent)));	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,Node)	18	None	replace
189	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	18	None	replace
190	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	18	None	replace
191	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfg,  n);  [CE]  cannot  find  symbol  cfg  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(cfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(cfg,  n);	  tryRemoveUnconditionalBranching(curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	21	None	replace
192	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
193	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
194	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementSafely(n);  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
195	[BUG]  [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Deque  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);	      	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	13	None	replace
196	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
197	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  continue;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
198	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node>  curCfg  =  curCfg.getDirectedGraphNode(n);  if(curCfg!=  null)  {  removeDeadExprStatementSafely(n);  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
199	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	23	None	replace
200	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	23	None	replace
201	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_OPEN_Statements));  [CE]  cannot  find  symbol  NO_OPEN_Statements  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NO_OPEN_Statements));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NO_OPEN_Statements));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NO_OPEN_Statements	23	None	replace
202	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_ERROR));  [CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_ERROR  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_ERROR));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_ERROR));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_ERROR	23	None	replace
203	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  gNode));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	23	None	replace
204	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR, " "));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR, " "));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR, " "));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	23	None	replace
205	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	19	14	add
206	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	19	14	add
207	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(parent,  gNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
208	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.copyCurrentStatement(curCfg,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.copyCurrentStatement(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.copyCurrentStatement(curCfg,  n);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
209	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  Node  n  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    Node  n  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	add
210	[BUG]  [BUGGY]  n.removeChild(curCfg,  mNode);  [CE]  cannot  find  symbol  mNode  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  mNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  mNode);	  n.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol  mNode	24	None	replace
211	[BUG]  [BUGGY]  n.removeChild(curCfg,  jpNode);  [CE]  cannot  find  symbol  jpNode  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  jpNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  jpNode);	  n.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol  jpNode	24	None	replace
212	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfg,  t);  [CE]  cannot  find  symbol  cfg  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(cfg,  t);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(cfg,  t);	  tryRemoveUnconditionalBranching(t);    	non-compiled	[CE]  cannot  find  symbol  cfg	15	None	replace
213	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  gNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeUtil.removeChild(parent,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeUtil.removeChild(parent,  gNode);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	5	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	5	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,UnreachableCodeElimination)  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,UnreachableCodeElimination)	5	None	replace
216	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	4	None	add
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	4	14	add
218	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  return;  }	  	compilable	  [FE]  RuntimeException  	4	14	add
219	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n	  	non-compiled	[CE]  ')'  expected	4	None	add
220	[BUG]  [BUGGY]      if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]      if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	        if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  break;  }	  	non-compiled	[CE]  ';'  expected	12	None	add
221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	20	14	replace
222	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	20	14	replace
223	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode));  [CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode));	  n.removeChild(parent);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,DiGraphNode<Node,Branch>)	20	None	replace
224	[BUG]  [BUGGY]  n.removeChild(currentNode);  [CE]  cannot  find  symbol  currentNode  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(currentNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(currentNode);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  currentNode	20	None	replace
225	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
226	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
227	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	11	None	replace
228	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
229	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(g  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(g  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(g	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
230	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
231	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  Node  t  =  curCfg.getDirectedGraphNode(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    Node  t  =  curCfg.getDirectedGraphNode(n);	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
233	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
234	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
235	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
236	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
237	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
238	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
239	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  Context  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n));  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  Context	9	None	replace
240	[BUG]  [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	Context.checkState(removeNoOpStatements  ||!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
241	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  n.removeChild(parent);	  	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
242	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(curCfg,  n);	  	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	14	add
244	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.redeclareVarsInsideBranch(n);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	19	14	add
245	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);    NodeUtil.removeChild(curCfg,  n);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	17	14	add
247	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	17	14	add
248	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatementSafely(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
249	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatement(curCfg);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeDeadExprStatementSafely(n);  NodeUtil.removeDeadExprStatement(curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);    NodeUtil.removeDeadExprStatement(curCfg);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(t.getCompiler()!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(t.getCompiler()!=  null)  {  t.getCompiler().reportCodeChange();  }	  t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
251	[BUG]  [BUGGY]  if(t.getCompiler()!=  null)  {  t.getCompiler().reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(t.getCompiler()!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(t.getCompiler()!=  null)  {  t.getCompiler().reportCodeChange();  }	  t.getCompiler().reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	11	replace
252	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT));  [CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED_STATEMENT));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEPRECATED_STATEMENT	23	None	replace
253	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  n));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  n));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  n));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	23	None	replace
254	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT	23	None	replace
255	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.replaceChild(n,  new  Node(Token.EMPTY));	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	20	14	replace
256	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EMPTY));	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	20	14	replace
257	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [CE]  no  suitable  constructor  found  for  Node(int,JSModule)  [FE]      RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule()));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  t.getModule()));	  n.removeChild(parent);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,JSModule)	20	None	replace
258	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.cloneTree()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.cloneTree()));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.cloneTree()));	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
259	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  gNode.getFirstChild()));	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
260	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	11	None	replace
261	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n)&&  tryRemoveUnconditionalBranching(n,  parent);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
262	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n,  parent);  }  else  {  removeDeadExprStatementSafely(gNode);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	11	None	replace
263	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(gNode);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
264	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_STATEMENT));	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_STATEMENT	18	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
266	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
267	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  deleteDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
268	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(t.getSourceName(),  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveDeadExprStatement(t.getSourceName(),  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(t.getSourceName(),  n);	  tryRemoveDeadExprStatement(n);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
269	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
270	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  removeDeadExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
271	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryDeadExprStatementSafely(n);  return;  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
272	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement();  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement();  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement();  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
273	[BUG]  [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement(cfg);  return;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement(cfg);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatement(cfg);  return;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
274	[BUG]  [BUGGY]      if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]      if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	        if(curCfg!=  null)  {  ControlFlowGraph  <  Node,  Branch>  cfg  =  curCfg.getDirectedGraphNode(n);  if(cfg!=  null)  {  removeDeadExprStatementOnly(n);  return;  }	  	non-compiled	[CE]  ';'  expected	12	None	add
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
276	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    return;    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	8	7	add
277	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t.getSourceName(),  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(t.getSourceName(),  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t.getSourceName(),  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
278	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(parent,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(parent,  gNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(parent,  gNode);	  tryRemoveUnconditionalBranching(gNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	6	2	add
280	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	compilable	  [FE]  AssertionFailedError  	6	2	add
281	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  nodeUtil  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  if(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(parent))    {    tryRemoveUnconditionalBranching(n);    }    if(removeNoOpStatements  &&  nodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol  nodeUtil	6	None	add
282	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(curCfg,  n);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	14	add
284	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.removeChild(n,  parent);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	14	add
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	22	12	add
286	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(n);  t.getCompiler().reportCodeChange();	  	compilable	  [FE]  AssertionFailedError  	22	12	add
287	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  t.getCompiler().reportCodeChange();  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  t.getCompiler().reportCodeChange();  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  t.getCompiler().reportCodeChange();	  	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
288	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  t.getCompiler().reportCodeChange();  NodeUtil.redeclareVarsInsideBranch(curCfg,  n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();    NodeUtil.redeclareVarsInsideBranch(curCfg,  n);	  	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
289	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
290	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
291	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
292	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExpr	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
293	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
294	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
295	[BUG]  [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(n))    {    tryRemoveUnconditionalBranching(n);    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
296	[BUG]  [BUGGY]  n.removeChild(curCfg,  rNode);  [CE]  cannot  find  symbol  rNode  [FE]          AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  n.removeChild(curCfg,  rNode);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg,  rNode);	  n.removeChild(curCfg);    	non-compiled	[CE]  cannot  find  symbol  rNode	24	None	replace
297	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(t,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
298	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent,  n);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent,  n);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	10	7	replace
300	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(parent);  }	  if(removeNoOpStatements    &&!NodeUtil.mayHaveSideEffects(gNode))    {    tryRemoveUnconditionalBranching(n);    }    	compilable	  [FE]  AssertionFailedError  	10	7	replace
301	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfg,  curCfg);  [CE]  cannot  find  symbol  cfg  [FE]                  AssertionFailedError    [CONTEXT]    DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }    [BUGGY]  tryRemoveUnconditionalBranching(cfg,  curCfg);  [BUGGY]    }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(cfg,  curCfg);	  tryRemoveUnconditionalBranching(curCfg);    	non-compiled	[CE]  cannot  find  symbol  cfg	21	None	replace
