bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
2	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
3	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  tryRemoveUnconditionalBranching(t,  n);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t,  n);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	14	replace
5	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	14	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
7	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(parent))  {  tryRemoveUnconditionalBranching(n);  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
9	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  return;  }	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
10	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)  [FE]              AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(gNode))  {  tryRemoveUnconditionalBranching(n);  }	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(DiGraphNode<Node,Branch>)	31	None	replace
11	[BUG]  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	if(removeNoOpStatements  &&!NodeUtil.mayHaveSideEffects(n))  {  tryRemoveUnconditionalBranching(n);  }  else  {  removeDeadExprStatementSafely(gNode);  }	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	  	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
13	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]    [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	  	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	7	replace
14	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  tryRemoveUnconditionalBranching(gNode);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(gNode);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
15	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(t);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  tryRemoveUnconditionalBranching(t);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(t);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
16	[BUG]  [BUGGY]  tryRemoveDeadExprStatement(n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  tryRemoveDeadExprStatement(n);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveDeadExprStatement(n);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  cannot  find  symbol	31	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  removeDeadExprStatementSafely(n);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	removeDeadExprStatementSafely(n);	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	14	replace
18	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  removeDeadExprStatementSafely(n);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	removeDeadExprStatementSafely(n);	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	14	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  n.removeChild(parent);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	n.removeChild(parent);	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  RuntimeException  	31	14	replace
20	[BUG]  [BUGGY]  n.removeChild(parent);  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  n.removeChild(parent);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(parent);	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  RuntimeException  	31	14	replace
21	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  tryRemoveUnconditionalBranching(curCfg);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	tryRemoveUnconditionalBranching(curCfg);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	add	t.getCompiler().reportCodeChange();	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	11	replace
23	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	t.getCompiler().reportCodeChange();	tryRemoveUnconditionalBranching(n);  	compilable	  [FE]  AssertionFailedError  	31	11	replace
24	[BUG]  [BUGGY]  n.removeChild(curCfg);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  DiGraphNode<Node,  Branch>  gNode  =  curCfg.getDirectedGraphNode(n);  if  (gNode  ==  null)  {  //  Not  in  CFG.  return;  }  if  (gNode.getAnnotation()  !=  GraphReachability.REACHABLE  ||  (removeNoOpStatements  &&  !NodeUtil.mayHaveSideEffects(n)))  {  removeDeadExprStatementSafely(n);  return;  }  [BUGGY]  n.removeChild(curCfg);  [BUGGY]  }  [CLASS]  UnreachableCodeElimination  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  n  parent  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.3779644730092272	109	109	2	replace	n.removeChild(curCfg);	tryRemoveUnconditionalBranching(n);  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
