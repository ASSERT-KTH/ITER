bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [CE]  >  expected  [FE]      AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  >  expected	7	None	replace
3	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getOutEdges();  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol  curCfgNode	7	None	replace
4	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();  [CE]  ']'  expected  [FE]          AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  ']'  expected	7	None	replace
5	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol  node	7	None	replace
6	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol  first	7	None	replace
7	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]    [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	  	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	add	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	compilable	  [FE]  AssertionFailedError  	7	7	replace
10	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	compilable	  [FE]  AssertionFailedError  	7	7	replace
11	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
12	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getOutEdges();  [CE]  cannot  find  symbol  outEdges  [FE]    AssertionFailedError  [CONTEXT]  case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:      [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getOutEdges();  [BUGGY]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getOutEdges();	List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();  	non-compiled	[CE]  cannot  find  symbol  outEdges	7	None	replace
