bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getOutEdges();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
2	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.getOutEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  >  expected	13	None	replace
3	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatements();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getAllEdges();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
5	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getFirstChild();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
6	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.remove(0);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.remove(0);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.remove(0);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
7	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getChildCount();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getChildCount();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getChildCount();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
8	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outEdges);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
9	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.outEdges);  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol  outEdges	64	None	replace
10	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getFirstChild());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getFirstChild());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
11	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outCfgNode);  [CE]  cannot  find  symbol  outCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outCfgNode);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n,  outCfgNode);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol  outCfgNode	64	None	replace
12	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.cloneTree());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.cloneTree());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.cloneTree());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
13	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges(n,  outEdges);  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges(n,  outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges(n,  outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  >  expected	64	None	replace
14	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getInEdges();  [CE]  cannot  find  symbol  curCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    list.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	72	None	replace
15	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getInEdges();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    list.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
16	[BUG]  [BUGGY]  Node  n  =  firstCfgNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  firstCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  firstCfgNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
17	[BUG]  [BUGGY]  Node  n  =  nextCfgNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  nextCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  nextCfgNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
18	[BUG]  [BUGGY]  Node  n  =  outEdges.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
19	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
20	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  n.getLastChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
21	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getOutEdges();  [CE]  cannot  find  symbol  curCfgStack  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    cfgStack.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	16	None	replace
22	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  cfgStack.getOutEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  cfgStack.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  cfgStack.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    cfgStack.getOutEdges();    	non-compiled	[CE]  >  expected	16	None	replace
23	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  cfgStack.getOutEdges();  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  cfgStack.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  cfgStack.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    cfgStack.getOutEdges();    	non-compiled	[CE]  ']'  expected	16	None	replace
24	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  cfgStack.getOutEdges();  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  cfgStack.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  cfgStack.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    cfgStack.getOutEdges();    	non-compiled	[CE]  >  expected	16	None	replace
25	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  >  expected	49	None	replace
26	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  ']'  expected	49	None	replace
27	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  not  a  statement	49	None	replace
28	[BUG]  [BUGGY]  OutEdges  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
29	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  >  expected	49	None	replace
30	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
31	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfgNode.getFirstChild();  [CE]  cannot  find  symbol  curCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  curCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  curCfgNode.getFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	40	None	replace
32	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  nextCfgNode  =  n.getFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	40	None	replace
33	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfg.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  curCfg.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  curCfg.getFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
34	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	40	None	replace
35	[BUG]  [BUGGY]  Node  firstCfgNode  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  node.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  node.getFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
36	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConstEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConstEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConstEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  >  expected	31	None	replace
37	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConstEdges();  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConstEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConstEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  ']'  expected	31	None	replace
38	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstStatements();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
39	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstEdges(n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConstEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
40	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgEdges();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
41	[BUG]  [BUGGY]  Node  outEdges  =  first.getChildren();  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  first.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  first.getChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
42	[BUG]  [BUGGY]  Node  outEdges  =  n.getOwner().getChildren();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.getOwner().getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.getOwner().getChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
43	[BUG]  [BUGGY]  Node  outEdges  =  n.removeChildren();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.removeChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.removeChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
44	[BUG]  [BUGGY]  Node  outEdges  =  n.getOpStatements();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.getOpStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.getOpStatements();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
45	[BUG]  [BUGGY]  Node  outEdges  =  nodes.getChildren();  [CE]  cannot  find  symbol  nodes  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  nodes.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  nodes.getChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  nodes	54	None	replace
46	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getAllEdges();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
47	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getAllEdges();  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  >  expected	61	None	replace
48	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getAllEdges();  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  >  expected	61	None	replace
49	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getAllEdges();  [CE]  cannot  find  symbol  nNode  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  cannot  find  symbol  nNode	61	None	replace
50	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getAllEdges();  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  ']'  expected	61	None	replace
51	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getAllEdges();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  cannot  find  symbol  node	61	None	replace
52	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getInEdges();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    first.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
53	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getInEdges();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    first.getInEdges();    	non-compiled	[CE]  ';'  expected	11	None	replace
54	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatements();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatements();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
55	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInCfgNode();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
56	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
57	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNodes();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNodes();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNodes();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
58	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	18	None	replace
59	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getInEdges();  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  ']'  expected	18	None	replace
60	[BUG]  [BUGGY]  Node  outEdges  =  first.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  first.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  first.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	36	None	replace
61	[BUG]  [BUGGY]  Node  outEdges  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.getLastChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
62	[BUG]  [BUGGY]  Node  outEdges  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.removeFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.removeFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
63	[BUG]  [BUGGY]  Node  outEdges  =  first,  n.getFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  first,  n.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  first,  n.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
64	[BUG]  [BUGGY]  Node  outEdges  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  node.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  node.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
65	[BUG]  [BUGGY]  Node  outEdges  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  nodes.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  nodes.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	36	None	replace
66	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.add(n.getOutEdges());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.add(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.add(n.getOutEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
67	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.getOutEdges();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.getOutEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
68	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getOutEdges());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getOutEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.size();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.size();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.size();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
70	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.clear();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.clear();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.clear();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
71	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.removeAll(n.getOutEdges());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.removeAll(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.removeAll(n.getOutEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
72	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getOutEdges();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    firstCfgNode.getOutEdges();    	non-compiled	[CE]  >  expected	15	None	replace
73	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getOutEdges();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    firstCfgNode.getOutEdges();    	non-compiled	[CE]  ']'  expected	15	None	replace
74	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  curCfgNode.getOutEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  curCfgNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  curCfgNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    firstCfgNode.getOutEdges();    	non-compiled	[CE]  >  expected	15	None	replace
75	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
76	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	24	None	replace
77	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
78	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	24	None	replace
79	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	24	None	replace
80	[BUG]  [BUGGY]  OutEdges  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
81	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getEdges());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getEdges());	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
82	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  this.outEdges.getEdges();  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  this.outEdges.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  this.outEdges.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	57	None	replace
83	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  first.getEdges();  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  first.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  first.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  first	57	None	replace
84	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  noOpStatements.getEdges();  [CE]  cannot  find  symbol  noOpStatements  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  noOpStatements.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  noOpStatements.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	57	None	replace
85	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  list.getEdges();  [CE]  cannot  find  symbol  list  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  list.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  list.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  list	57	None	replace
86	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  nodes.getEdges();  [CE]  cannot  find  symbol  nodes  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  nodes.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  nodes.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  nodes	57	None	replace
87	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getContainingFunction();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  >  expected	67	None	replace
88	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  not  a  statement	67	None	replace
89	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getContainingFunction();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  ']'  expected	67	None	replace
90	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getContainingFunction();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  >  expected	67	None	replace
91	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getContainingFunction();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol  first	67	None	replace
92	[BUG]  [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  not  a  statement	67	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.outEdges.size()  ==  1);  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(n.outEdges.size()  ==  1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(n.outEdges.size()  ==  1);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(n.size()  ==  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(n.size()  ==  1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(n.size()  ==  1);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  outEdges.size()  ==  1);  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  outEdges.size()  ==  1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  outEdges.size()  ==  1);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(inEdges.size()  ==  1);  [CE]  cannot  find  symbol  inEdges  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(inEdges.size()  ==  1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(inEdges.size()  ==  1);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  inEdges	53	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.size()  ==  1);  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.size()  ==  1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.size()  ==  1);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.hasChildren());  [CE]  cannot  find  symbol  outEdges  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.hasChildren());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.hasChildren());	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
99	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgStack();  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgStack();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgStack();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  >  expected	29	None	replace
100	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getCfgStack();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getCfgStack();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  getCfgStack();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  not  a  statement	29	None	replace
101	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.size();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.size();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.size();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  incompatible  types	29	None	replace
102	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack().size();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack().size();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack().size();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
103	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getCfgStack();  [CE]  ']'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getCfgStack();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getCfgStack();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  ']'  expected	29	None	replace
104	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getFirstChild();	  List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    n.getInEdges();    	non-compiled	[CE]  incompatible  types	10	None	replace
105	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getReturnStatements();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getReturnStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getReturnStatements();	  List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    n.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
106	[BUG]  [BUGGY]  Node  n  =  firstCfgNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  firstCfgNode.getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  firstCfgNode.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
107	[BUG]  [BUGGY]  Node  n  =  nextCfgNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  nextCfgNode.getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  nextCfgNode.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
108	[BUG]  [BUGGY]  Node  n  =  first.getNext()  +  1;  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getNext()  +  1;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getNext()  +  1;	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
109	[BUG]  [BUGGY]  Node  n  =  first.getNext()  ||  first.getNext().getType()  ==  Token.FUNCTION;  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getNext()  ||  first.getNext().getType()  ==  Token.FUNCTION;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getNext()  ||  first.getNext().getType()  ==  Token.FUNCTION;	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
110	[BUG]  [BUGGY]  Node  n  =  first.getNext()  ||  first.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getNext()  ||  first.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getNext()  ||  first.getFirstChild().getType()  ==  Token.FUNCTION;	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
111	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  compiler.getOutEdges();  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  >  expected	1	None	replace
112	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  compiler.getOutEdges();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  ']'  expected	1	None	replace
113	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.compiler.getOutEdges();  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  compiler	1	None	replace
114	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  not  a  statement	1	None	replace
115	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	5	None	replace
116	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgNode();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  >  expected	5	None	replace
117	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgNode();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
118	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgNode();  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  >  expected	5	None	replace
119	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  not  a  statement	5	None	replace
120	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getCfgNode();  [CE]  ']'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfgNode.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  ']'  expected	5	None	replace
121	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDestination();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  >  expected	48	None	replace
122	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDestination();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  not  a  statement	48	None	replace
123	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDestination();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  ']'  expected	48	None	replace
124	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDestination();  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
125	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.add(n.getDestination());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.add(n.getDestination());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.add(n.getDestination());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  ';'  expected	48	None	replace
126	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDestination();  [CE]  cannot  find  symbol  list  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  cannot  find  symbol  list	48	None	replace
127	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  n.getOutEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  n.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  ';'  expected	62	None	replace
128	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgNode().getOutEdges();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgNode().getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getCfgNode().getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  >  expected	62	None	replace
129	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getCfgNode().getOutEdges();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getCfgNode().getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  getCfgNode().getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  not  a  statement	62	None	replace
130	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode().getInEdges();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode().getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode().getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
131	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
132	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatement();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	35	None	replace
133	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getCfgEdges();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	35	None	replace
134	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDeadExprStatement();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
135	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getNext();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
136	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getFirstChild();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
137	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getCfgNode();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getCfgNode();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
138	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDetination();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDetination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDetination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
139	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatements();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDeadExprStatements();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
140	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outEdges.getOutEdges();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	33	None	replace
141	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.outEdges.getOutEdges();  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.outEdges.getOutEdges();    	non-compiled	[CE]  >  expected	33	None	replace
142	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  n.outEdges.getOutEdges();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  n.outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  n.outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	33	None	replace
143	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.outEdges.getOutEdges();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.outEdges.getOutEdges();    	non-compiled	[CE]  ']'  expected	33	None	replace
144	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfgNode.getLastChild();  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  curCfgNode.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  curCfgNode.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	39	None	replace
145	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  nextCfgNode  =  n.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  nextCfgNode  =  n.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	39	None	replace
146	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	39	None	replace
147	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfg.getLastChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  curCfg.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  curCfg.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
148	[BUG]  [BUGGY]  Node  firstCfgNode  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  node.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  node.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
149	[BUG]  [BUGGY]  OutEdges  outEdges  =  first.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  first.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  first.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
150	[BUG]  [BUGGY]  OutEdges  outEdges  =  new  ArrayList  <  OutEdges>(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  new  ArrayList  <  OutEdges>(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  new  ArrayList  <  OutEdges>(n.getOutEdges());	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
151	[BUG]  [BUGGY]  OutEdges  outEdges  =  outEdges.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  outEdges.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
152	[BUG]  [BUGGY]  OutEdges  outEdges  =  this.outEdges.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  this.outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  this.outEdges.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
153	[BUG]  [BUGGY]  OutEdges  outEdges  =  noOpStatements.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  noOpStatements.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  noOpStatements.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
154	[BUG]  [BUGGY]  OutEdges  outEdges  =  node.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  node.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  node.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
155	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConditionExpressions();  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConditionExpressions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getConditionExpressions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  >  expected	52	None	replace
156	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConditionExpressions();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConditionExpressions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getConditionExpressions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  ']'  expected	52	None	replace
157	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressions();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
158	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
159	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnExpressions();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnExpressions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnExpressions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
160	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
161	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranch();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
162	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
163	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  mergeOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  >  expected	65	None	replace
164	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchs();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchs();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchs();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
165	[BUG]  [BUGGY]  Node  n  =  first.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getLastChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
166	[BUG]  [BUGGY]  Node  n  =  this.first.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  this.first.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  this.first.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
167	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatements();  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  >  expected	2	None	replace
168	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatements();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  not  a  statement	2	None	replace
169	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatements();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  ']'  expected	2	None	replace
170	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatements();  [CE]  cannot  find  symbol  noOpStatements  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	2	None	replace
171	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatements();  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  first	2	None	replace
172	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getOutEdges();  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	non-compiled	[CE]  >  expected	44	None	replace
173	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getInEdges();  [CE]  no  suitable  method  found  for  getInEdges()  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	non-compiled	[CE]  no  suitable  method  found  for  getInEdges()	44	None	replace
174	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getOutEdges();  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	non-compiled	[CE]  ']'  expected	44	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	add	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	compilable	  [FE]  AssertionFailedError  	44	2	replace
176	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(n);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	compilable	  [FE]  AssertionFailedError  	44	2	replace
177	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getInEdges();  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  >  expected	26	None	replace
178	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
179	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnStatements();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getReturnStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
180	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNodes.getOutEdges();  [CE]  cannot  find  symbol  gNodes  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNodes.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNodes.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    nodes.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  gNodes	45	None	replace
181	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges.getOutEdges());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
182	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.clear();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.clear();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.clear();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
183	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.remove(0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.remove(0);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.remove(0);	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
184	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges.addAll(this.outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
185	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getDeadExprStatements();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
186	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getConditionalBranch();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  >  expected	43	None	replace
187	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  not  a  statement	43	None	replace
188	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getConditionalBranch();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  ']'  expected	43	None	replace
189	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getConditionalBranch();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  >  expected	43	None	replace
190	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getConditionalBranch();  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol  first	43	None	replace
191	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConconditionalBranch();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConconditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConconditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
192	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getDeadExprStatements();  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getDeadExprStatements();    	non-compiled	[CE]  >  expected	50	None	replace
193	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getDeadExprStatements();  [CE]  cannot  find  symbol  nNode  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  nNode	50	None	replace
194	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatements();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  node	50	None	replace
195	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
196	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
197	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
198	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
199	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  >  expected	21	None	replace
200	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
201	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
202	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  outEdges  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	46	None	replace
203	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getInEdges();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
204	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  gNode.getInEdges();  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	46	None	replace
205	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getOutEdges();  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	46	None	replace
206	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  n.getInEdges();  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  n.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  OutEdges  =  n.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  >  expected	46	None	replace
207	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  OutEdges  =  gNode.getInEdges();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  OutEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  OutEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  ']'  expected	46	None	replace
208	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  nNode.getInEdges();  [CE]  cannot  find  symbol  nNode  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  nNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  nNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  nNode	46	None	replace
209	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatement();  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  >  expected	3	None	replace
210	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatement();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  not  a  statement	3	None	replace
211	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatement();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  ']'  expected	3	None	replace
212	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatement();  [CE]  cannot  find  symbol  noOpStatements  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	3	None	replace
213	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatement();  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
214	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getDeadExprStatement();  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch!=  outEdges  =  n.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  >  expected	3	None	replace
215	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeepestStatements();  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  >  expected	68	None	replace
216	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeepestStatements();  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  n.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  ']'  expected	68	None	replace
217	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeepestStatements();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  not  a  statement	68	None	replace
218	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeepestStatements();  [CE]  cannot  find  symbol  noOpStatements  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  noOpStatements.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	68	None	replace
219	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
220	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeepestStatements();  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  first.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  first	68	None	replace
221	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDeadExprStatements();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  >  expected	28	None	replace
222	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDeadExprStatements();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  ']'  expected	28	None	replace
223	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatements(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatements(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatements(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
224	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getDeadExprStatements();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  not  a  statement	28	None	replace
225	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getRemoveDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getRemoveDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getRemoveDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
226	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressionStatements();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressionStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressionStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
227	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  >  expected	47	None	replace
228	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.getLastChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
229	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
230	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  nextCfgNode.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	42	None	replace
231	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  node.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
232	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  outEdges  [FE]                                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
233	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.getFirstChild()  +  1;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
234	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges.getInEdges();  [CE]  cannot  find  symbol  outEdges  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    this.outEdges.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	70	None	replace
235	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getInEdges();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    this.outEdges.getInEdges();    	non-compiled	[CE]  ';'  expected	70	None	replace
236	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  this.outEdges.getInEdges();  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  this.outEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  this.outEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    this.outEdges.getInEdges();    	non-compiled	[CE]  >  expected	70	None	replace
237	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(1);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(1);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
238	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getChildCount();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getChildCount();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getChildCount();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
239	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getInitializingChildren();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getInitializingChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getInitializingChildren();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
240	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.add(n.getInEdges());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.add(n.getInEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.add(n.getInEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
241	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.getInEdges();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.getInEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
242	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getInEdges());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getInEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.addAll(n.getInEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
243	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  first.getInEdges();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  first.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  first.getInEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
244	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.remove(n.getInEdges());  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges.remove(n.getInEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges.remove(n.getInEdges());	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
245	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDestination();  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  >  expected	51	None	replace
246	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeestination();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
247	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDestination();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  ']'  expected	51	None	replace
248	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatementSafely(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExprStatementSafely(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
249	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getDestination();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  not  a  statement	51	None	replace
250	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  cfgStack);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  cfgStack);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  cfgStack);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
251	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getFirstChild());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getFirstChild());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
252	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outEdges);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
253	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.cloneTree());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.cloneTree());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.cloneTree());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
254	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildCount());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildCount());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildCount());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
255	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outCfgNode);  [CE]  cannot  find  symbol  outCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outCfgNode);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n,  outCfgNode);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol  outCfgNode	30	None	replace
256	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfg();  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	69	None	replace
257	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
258	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfg();  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  >  expected	69	None	replace
259	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfg();  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  >  expected	69	None	replace
260	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfg();  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  >  expected	69	None	replace
261	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfg();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  not  a  statement	69	None	replace
262	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgEdges();  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	4	None	replace
263	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgEdges();  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfgNode.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  >  expected	4	None	replace
264	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgEdges();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
265	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  n.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  >  expected	4	None	replace
266	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgEdges();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
267	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfgEdges();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  n.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  not  a  statement	4	None	replace
268	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatements();  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
269	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfgEdges();  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
270	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getAllEdges();  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
271	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	34	None	replace
272	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getChildren());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getChildren());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  new  ArrayList  <  Node>(n.getChildren());	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
273	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  this.outEdges.getChildren();  [CE]  cannot  find  symbol  outEdges  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  this.outEdges.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  this.outEdges.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  outEdges	58	None	replace
274	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.removeChildren();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.removeChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.removeChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  incompatible  types	58	None	replace
275	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  first.getChildren();  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  first.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  first.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
276	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  nodes.getChildren();  [CE]  cannot  find  symbol  nodes  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  nodes.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  nodes.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  nodes	58	None	replace
277	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  list.getChildren();  [CE]  cannot  find  symbol  list  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  list.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  list.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  list	58	None	replace
278	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
279	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  >  expected	25	None	replace
280	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatements();  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	2	None	replace
281	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
282	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatement();  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	3	None	replace
283	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
284	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.getOutEdges();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.getOutEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
285	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  node.getEdges();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  node.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  node.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  node	57	None	replace
286	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
287	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.outEdges();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.outEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.outEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
288	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getContainingFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
289	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getContainingFunction();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol  node	67	None	replace
290	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getContainingFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
291	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getContainingFunction();  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	67	None	replace
292	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgEdges();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  >  expected	4	None	replace
293	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getCfgEdges();  [CE]  cannot  find  symbol  curCfgStack  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgStack.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	4	None	replace
294	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.outEdges();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.outEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.outEdges();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
295	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.getOpStatements();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.getOpStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.getOpStatements();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
296	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  node.getChildren();  [CE]  cannot  find  symbol  node  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  node.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  node.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  node	58	None	replace
297	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranches();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranches();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranches();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
298	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchings();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchings();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranchings();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
299	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranching();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranching();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeUnconditionalBranching();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
300	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThrough();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThrough();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThrough();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
301	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
302	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(outEdges.getOutEdges());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(outEdges.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(outEdges.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
303	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getLeastSupertype(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
304	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getConditionalBranch();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
305	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalBranch();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
306	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
307	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.removeFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  firstCfgNode  =  n.removeFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  firstCfgNode  =  n.removeFirstChild();	  Node    firstCfgNode    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	40	None	replace
308	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination().getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination().getValue();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination().getValue();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
311	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getInEdges();  [CE]  cannot  find  symbol  nodes  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    first.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  nodes	11	None	replace
312	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInStatements();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
313	[BUG]  [BUGGY]  Node  n  =  first.getParent();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getParent();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getParent();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
314	[BUG]  [BUGGY]  Node  n  =  outEdges.getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
315	[BUG]  [BUGGY]  Node  n  =  first.getNext()  ||  n.hasChildren();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getNext()  ||  n.hasChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getNext()  ||  n.hasChildren();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
316	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getChildren());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getChildren());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getChildren());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
317	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getDestination());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getDestination());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeOutEdges(n.getDestination());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
318	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  null.getOutEdges();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  null.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  null.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
319	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  curCfg.getOutEdges();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  curCfg.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  curCfg.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  ';'  expected	62	None	replace
320	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  null;  [CE]  cannot  find  symbol  outEdges  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  null;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  null;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
321	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  nextCfgNode;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  nextCfgNode;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	42	None	replace
322	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n;  [CE]  cannot  find  symbol  outEdges  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
323	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  Token.CONTINUE;  [CE]  incompatible  types  [FE]                                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  Token.CONTINUE;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  Token.CONTINUE;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	42	None	replace
324	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
325	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.clear();  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	21	None	replace
326	[BUG]  [BUGGY]  Node  n  =  first.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.removeFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.removeFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
327	[BUG]  [BUGGY]  Node  n  =  first.getFirstChild().getNext();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.getFirstChild().getNext();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.getFirstChild().getNext();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	41	None	replace
328	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  cannot  find  symbol  OutEdges  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  OutEdges	56	None	replace
329	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.addAll(gNode.getInEdges());  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.addAll(gNode.getInEdges());  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.addAll(gNode.getInEdges());  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
330	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getInEdges();  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  >  expected	25	None	replace
331	[BUG]  [BUGGY]  Node  outEdges  =  n.outEdges.getFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.outEdges.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.outEdges.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	36	None	replace
332	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
333	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgNode();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  curCfg.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  >  expected	5	None	replace
334	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDestination();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	13	None	replace
335	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getInEdges();  [CE]  cannot  find  symbol  OutEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  OutEdges	71	None	replace
336	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
337	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getCfg();  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  curCfg.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  ']'  expected	69	None	replace
338	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.cfgStack.getOutEdges();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.cfgStack.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.cfgStack.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    cfgStack.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
339	[BUG]  [BUGGY]  Node  lastCfgNode  =  n.getLastChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  lastCfgNode  =  n.getLastChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  lastCfgNode  =  n.getLastChild();	  Node    firstCfgNode    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	39	None	replace
340	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getAllEdges();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
341	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildren());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildren());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getChildren());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
342	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getLastChild());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getOutEdges(n.getLastChild());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getOutEdges(n);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
343	[BUG]  [BUGGY]  OutEdges  outEdges  =  new  ArrayList  <  Node>(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  new  ArrayList  <  Node>(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  new  ArrayList  <  Node>(n.getOutEdges());	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
344	[BUG]  [BUGGY]  OutEdges  outEdges  =  n,  compiler.getOutEdges();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  n,  compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  n,  compiler.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  ';'  expected	60	None	replace
345	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressions();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadExpressions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
346	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatement();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
347	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStructure();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStructure();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStructure();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
348	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getAllEdges();  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	61	None	replace
349	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeadExprStatements();  [CE]  cannot  find  symbol  nodes  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  nodes	50	None	replace
350	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
351	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadCfgNode();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeadCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
352	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getAllEdges();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
353	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgEdges();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
354	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCurrentEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCurrentEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCurrentEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
355	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgNode();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  this.outEdges.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
356	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  first.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  first.getOutEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
357	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeestination();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDeestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDeestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
358	[BUG]  [BUGGY]  Node  n  =  outEdges.get(1).getDestination();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(1).getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(1).getDestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
359	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getNode();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getNode();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
360	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeepestStatements();  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfgNode.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	68	None	replace
361	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeepestStatements();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
362	[BUG]  [BUGGY]  Node  outEdges  =  node.getChildren();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  node.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  node.getChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
363	[BUG]  [BUGGY]  Node  outEdges  =  n.getAllChildren();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.getAllChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.getAllChildren();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
364	[BUG]  [BUGGY]  Node  outEdges  =  n.outEdges();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.outEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.outEdges();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
365	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getExpression();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getExpression();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getExpression();	  List    <    DiGraphEdge    <    Node,Branch!=    outEdges    =    n.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
366	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDestination();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
367	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  nodes.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
368	[BUG]  [BUGGY]  Node  n  =  last.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  last.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  last.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
369	[BUG]  [BUGGY]  Node  n  =  outEdges.get(first);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(first);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(first);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
370	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDeserialization();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDeserialization();	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
371	[BUG]  [BUGGY]  Node  n  =  outEdges.get(i);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(i);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(i);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
372	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getCfgEdges();  [CE]  cannot  find  symbol  list  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgEdges();    	non-compiled	[CE]  cannot  find  symbol  list	4	None	replace
373	[BUG]  [BUGGY]  OutEdges  outEdges  =  n,  outEdges.getOutEdges();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  n,  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  n,  outEdges.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  ';'  expected	60	None	replace
374	[BUG]  [BUGGY]  OutEdges  outEdges  =  new  LinkedList  <  OutEdges>(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  new  LinkedList  <  OutEdges>(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  new  LinkedList  <  OutEdges>(n.getOutEdges());	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
375	[BUG]  [BUGGY]  OutEdges  outEdges  =  allEdges.getOutEdges();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  outEdges  =  allEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  outEdges  =  allEdges.getOutEdges();	  OutEdges    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
376	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatements();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
377	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatements();  [CE]  cannot  find  symbol  list  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  list	2	None	replace
378	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDeadExprStatements();  [CE]  cannot  find  symbol  allEdges  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol  allEdges	2	None	replace
379	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  >  expected	25	None	replace
380	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
381	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
382	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
383	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
384	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getReturnStatements();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getReturnStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  gNode.getReturnStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >=    gNode.getInEdges();    	non-compiled	[CE]  ';'  expected	25	None	replace
385	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n,  outEdges.getEdges();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n,  outEdges.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n,  outEdges.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  ';'  expected	57	None	replace
386	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  allEdges.getEdges();  [CE]  cannot  find  symbol  allEdges  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  allEdges.getEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  allEdges.getEdges();	  List    <    Node>    outEdges    =    n.getEdges();    	non-compiled	[CE]  cannot  find  symbol  allEdges	57	None	replace
387	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
388	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getOutEdges();    	non-compiled	[CE]  ']'  expected	47	None	replace
389	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
390	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeepestEdges();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeepestEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDeepestEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConstEdges();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
391	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getInEdges();  [CE]  cannot  find  symbol  allEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  allEdges	71	None	replace
392	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getInEdges();  [CE]  cannot  find  symbol  outputEdges  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getInEdges();    	non-compiled	[CE]  cannot  find  symbol  outputEdges	71	None	replace
393	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getAssignedEdges();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getAssignedEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getAssignedEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
394	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalEdges();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getConditionalEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
395	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.compiler.getOutEdges();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.compiler.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.compiler.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
396	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  compiler.getOutEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    compiler.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
397	[BUG]  [BUGGY]  Node  n  =  this.nextCfgNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  this.nextCfgNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  this.nextCfgNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
398	[BUG]  [BUGGY]  Node  n  =  lastNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  lastNode.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  lastNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
399	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  node.getInEdges();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  node.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  node.getInEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getInEdges();    	non-compiled	[CE]  not  a  statement	9	None	replace
400	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges;  [CE]  cannot  find  symbol  outEdges  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.outEdges;	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	33	None	replace
401	[BUG]  [BUGGY]  Node  outEdges  =  n,  first.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n,  first.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n,  first.getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
402	[BUG]  [BUGGY]  Node  outEdges  =  n.getFirstChild().getFirstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.getFirstChild().getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.getFirstChild().getFirstChild();	  Node    outEdges    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
403	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  outEdges.getOutEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgNode(),  outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  ';'  expected	62	None	replace
404	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getCfgNode().getOutEdges();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getCfgNode().getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getCfgNode().getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgNode().getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
405	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getInEdges();  Collection  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    Collection    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
406	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.peek();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.peek();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.peek();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  incompatible  types	29	None	replace
407	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStack();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
408	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgStack();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgStack();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgStack();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getCfgStack();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
409	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(),  outEdges;  [CE]  no  suitable  method  found  for  getOutEdges()  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(),  outEdges;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  curCfg.getOutEdges(),  outEdges;	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    curCfg.getOutEdges();    	non-compiled	[CE]  no  suitable  method  found  for  getOutEdges()	44	None	replace
410	[BUG]  [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  ArrayList  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	ArrayList  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  gNode.getInEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
411	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getOutEdges();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  OutEdges  =  n.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getInEdges();    List    <    DiGraphEdge    <    Node,Branch    >>    OutEdges    =    gNode.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
412	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfg();  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol  outEdges	69	None	replace
413	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfg();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
414	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getCfg();  [CE]  cannot  find  symbol  allEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getCfg();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getCfg();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfg();    	non-compiled	[CE]  cannot  find  symbol  allEdges	69	None	replace
415	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgNode();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  cfgStack.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
416	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getCfgNode();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getCfgNode();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getCfgNode();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
417	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalEdges();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalEdges();	  List    <    DiGraphEdge    <    Node,Branch    [Delete]    outEdges    =    n.getInEdges();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
418	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctions();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctions();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctions();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
419	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getContainingFunction();  [CE]  cannot  find  symbol  outEdges  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getContainingFunction();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getContainingFunction();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol  outEdges	67	None	replace
420	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctionStatement();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctionStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getContainingFunctionStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getContainingFunction();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
421	[BUG]  [BUGGY]  Node  outEdges  =  n.removeFirst();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  outEdges  =  n.removeFirst();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  outEdges  =  n.removeFirst();	  Node    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
422	[BUG]  [BUGGY]  Node  n  =  first.removeFirst();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  first.removeFirst();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  first.removeFirst();	  Node    n    =    first.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
423	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getAllEdges();  [CE]  cannot  find  symbol  allEdges  [FE]        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getAllEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getAllEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    gNode.getAllEdges();    	non-compiled	[CE]  cannot  find  symbol  allEdges	61	None	replace
424	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n.getFirstChild();  [CE]  cannot  find  symbol  outEdges  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n.getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  n.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  outEdges	42	None	replace
425	[BUG]  [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  getFirstChild();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  first  =  n.hasChildren()?  n.getFirstChild()  :  getFirstChild();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  first  =  n.hasChildren()?  n.getFirstChild()  :  getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
426	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getConditionalBranch();  [CE]  cannot  find  symbol  outEdges  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol  outEdges	43	None	replace
427	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
428	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getConditionalBranch();  [CE]  cannot  find  symbol  list  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getConditionalBranch();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getConditionalBranch();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getConditionalBranch();    	non-compiled	[CE]  cannot  find  symbol  list	43	None	replace
429	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDestination();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
430	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination(),  outEdges);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination(),  outEdges);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getDestination(),  outEdges);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDestination();    	non-compiled	[CE]  ';'  expected	51	None	replace
431	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatement();  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  outEdges	3	None	replace
432	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatement();  [CE]  cannot  find  symbol  list  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  list	3	None	replace
433	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
434	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatement();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatement();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeadExprStatement();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeadExprStatement();    	non-compiled	[CE]  cannot  find  symbol  node	3	None	replace
435	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDestination();  [CE]  cannot  find  symbol  outEdges  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outEdges	34	None	replace
436	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
437	[BUG]  [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  n.getLeastSupertype(n.getOutEdges());	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getLeastSupertype(n.getOutEdges());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  2);  [CE]  cannot  find  symbol  outEdges  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Preconditions.checkState(outEdges.size()  ==  2);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Preconditions.checkState(outEdges.size()  ==  2);	  Preconditions.checkState(outEdges.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  outEdges	53	None	replace
439	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  Lists.newArrayList();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  Lists.newArrayList();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  Lists	27	None	replace
440	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStackOutEdges();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStackOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getCfgStackOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >=    outEdges    =    getOutEdges();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
441	[BUG]  [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	OutEdges  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  OutEdges    <    Node,Branch    >>    outEdges    =    n.getOutEdges();    	non-compiled	[CE]  not  a  statement	6	None	replace
442	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getOutEdges();  [CE]  cannot  find  symbol  outputEdges  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outputEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    outEdges.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  outputEdges	56	None	replace
443	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgEdges();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeCfgEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
444	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThroughs();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThroughs();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeFallThroughs();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    mergeOutEdges();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
445	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDestination();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
446	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDestination();  [CE]  cannot  find  symbol  allEdges  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  allEdges.getDestination();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDestination();    	non-compiled	[CE]  cannot  find  symbol  allEdges	48	None	replace
447	[BUG]  [BUGGY]  Node  n  =  outEdges.get(n);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(n);	  Node    n    =    outEdges.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	55	None	replace
448	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDeepestination();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDeepestination();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDeepestination();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
449	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDesertion();  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  Node  n  =  outEdges.get(0).getDesertion();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	Node  n  =  outEdges.get(0).getDesertion();	  Node    n    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	59	None	replace
450	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeepestStatements();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
451	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeepestStatements();  [CE]  cannot  find  symbol  outEdges  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  this.outEdges.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  outEdges	68	None	replace
452	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeepestStatements();  [CE]  cannot  find  symbol  list  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  list.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  list	68	None	replace
453	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeepestStatements();  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  node.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  node	68	None	replace
454	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeepestStatements();  [CE]  cannot  find  symbol  nodes  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeepestStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  nodes.getDeepestStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    n.getDeepestStatements();    	non-compiled	[CE]  cannot  find  symbol  nodes	68	None	replace
455	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  findDeadExprStatements();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  findDeadExprStatements();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  findDeadExprStatements();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
456	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements(n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeDeadExprStatements(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getDeadExprStatements();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
457	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().size();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().size();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().size();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
458	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().values();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().values();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getConditionExpressions().values();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getConditionExpressions();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
459	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.outEdges  =  outEdges.getOutEdges();  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >=  n.outEdges  =  outEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >=  n.outEdges  =  outEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  >  expected	32	None	replace
460	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outputEdges.getOutEdges();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outputEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  outputEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
461	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  allEdges.getOutEdges();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  allEdges.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  n.outEdges  =  allEdges.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    n.outEdges    =    this.outEdges.getOutEdges();    	non-compiled	[CE]  ';'  expected	32	None	replace
462	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  mergeInEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
463	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInEdges(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInEdges(n);  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getInEdges(n);	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
464	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressionEdges();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressionEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  getExpressionEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    getInEdges();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
465	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.outEdges.getChildren();  [CE]  cannot  find  symbol  outEdges  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.outEdges.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.outEdges.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  outEdges	58	None	replace
466	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n,  outEdges.getChildren();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n,  outEdges.getChildren();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n,  outEdges.getChildren();	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
467	[BUG]  [BUGGY]  List  <  Node>  outEdges  =  n.outEdges;  [CE]  cannot  find  symbol  outEdges  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  Node>  outEdges  =  n.outEdges;  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  Node>  outEdges  =  n.outEdges;	  List    <    Node>    outEdges    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  outEdges	58	None	replace
468	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  lastNode.getOutEdges();  [CE]  cannot  find  symbol  lastNode  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:          [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  lastNode.getOutEdges();  [BUGGY]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	177	177	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  lastNode.getOutEdges();	  List    <    DiGraphEdge    <    Node,Branch    >>    outEdges    =    nextCfgNode.getOutEdges();    	non-compiled	[CE]  cannot  find  symbol  lastNode	14	None	replace
