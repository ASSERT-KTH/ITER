bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
2	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
3	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
4	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
5	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
6	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >>  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >>  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >>  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
8	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	6	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
10	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	9	replace
12	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	6	9	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
14	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
16	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  RuntimeException  	9	10	replace
18	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  RuntimeException  	9	10	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
20	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  RuntimeException  	9	10	replace
22	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  RuntimeException  	9	10	replace
23	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
24	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
25	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  If  (nextCfgNode!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  If  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    If  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
26	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  >=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    if  (nextCfgNode  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
27	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  if  (nextCfgNode  >>  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    if  (nextCfgNode  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
29	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	2	7	replace
31	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	2	7	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
33	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
35	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
36	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	13	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
38	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	8	replace
40	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	8	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
42	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
43	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
44	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
45	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
46	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    If  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
47	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >>  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >>  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  >>  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
48	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  [BUGGY]  fallThrough)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  [BUGGY]  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  [BUGGY]  fallThrough)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
49	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
50	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
51	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  If  (nextCfgNode  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  If  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    If  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
52	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  if  (nextCfgNode  >=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    if  (nextCfgNode  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
53	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
55	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
56	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
57	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  RuntimeException  	11	10	replace
60	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  RuntimeException  	11	10	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
62	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
63	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  Node  first  =  nextCfgNode.getNext();  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  fallThrough);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  fallThrough);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  nextCfgNode);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
71	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
72	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
73	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
74	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
75	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
76	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
77	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
78	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
79	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
80	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
81	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode  ==  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null)    {    Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
83	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
84	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  RuntimeException  	11	10	replace
85	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  RuntimeException  	11	10	replace
86	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
87	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
88	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
89	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
90	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
91	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    fallThrough)    {    Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
92	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
93	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeUtil.removeChild(nextCfgNode);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeUtil.removeChild(nextCfgNode,  nextCfgNode);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  nextCfgNode);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    Node  nextCfgNode  =  nextCfgNode.getNext();  if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
99	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
100	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    Node  nextCfgNode  =  nextCfgNode.getLastChild();  if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
101	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    Node  nextCfgNode  =  nextCfgNode.getParent();  if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
102	[BUG]  [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  null)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null)    {    Node  nextCfgNode  =  nextCfgNode.cloneTree();  if  (nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
103	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  first	13	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	4	8	replace
105	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	4	8	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
107	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
109	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
111	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
112	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  n.removeChild(nextCfgNode);  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(nextCfgNode);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
114	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
116	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
117	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  secondCfgNode)  {  [CE]  cannot  find  symbol  secondCfgNode  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();    [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  secondCfgNode)  {  [BUGGY]    removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  secondCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	13	None	replace
