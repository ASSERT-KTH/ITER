bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    If    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
2	[BUG]  [BUGGY]  If  (nextCfgNode  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    If    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
3	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    If    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
4	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
5	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
6	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
7	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
8	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >>  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode  >>  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode  >>  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
9	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    If  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
10	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
11	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	86	None	replace
12	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	86	None	replace
13	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
14	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	86	None	replace
15	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
16	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
17	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
18	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    If  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
19	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
20	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
21	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	113	None	add
22	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
23	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
24	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
25	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
26	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
27	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
28	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
29	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
30	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
31	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
32	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
33	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
34	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
35	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >>  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >>  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  >>  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
36	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
37	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	31	9	replace
39	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	31	9	replace
40	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
41	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
42	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
43	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
44	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
45	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
46	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	100	None	replace
47	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	100	None	replace
48	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	100	None	replace
49	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	100	None	replace
50	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
51	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	76	None	replace
52	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
53	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
54	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
56	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
57	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  noOpStatements)  {  [CE]  cannot  find  symbol  noOpStatements  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  noOpStatements)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  noOpStatements)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	36	None	replace
58	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  failThrough)  {  [CE]  cannot  find  symbol  failThrough  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  failThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  failThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  failThrough	36	None	replace
59	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapse)  {  [CE]  cannot  find  symbol  collapse  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapse)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapse)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  collapse	36	None	replace
60	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getExprStatements())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getExprStatements())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getExprStatements())  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
61	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	78	None	replace
62	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
63	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
64	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
65	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    If(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
66	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >>  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >>  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >>  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
67	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  >=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
68	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  firstCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
69	[BUG]  [BUGGY]  NodeUtil.removeChild(lastCfgNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(lastCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(lastCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
70	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(outEdges,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
71	[BUG]  [BUGGY]  NodeUtil.removeChild(firstCfgNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(firstCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(firstCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
72	[BUG]  [BUGGY]  NodeUtil.removeChild(lastCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(lastCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(lastCfgNode,  fallThrough);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
73	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(first,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
74	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	102	None	replace
75	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	102	None	replace
76	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
77	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  n.getNext();	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
78	[BUG]  [BUGGY]  Node  first  =  fallThrough.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  fallThrough.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  fallThrough.getNext();	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
79	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext(),  fallThrough;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.getNext(),  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getNext(),  fallThrough;	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
80	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext(),  fallThrough);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.getNext(),  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getNext(),  fallThrough);	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  ';'  expected	63	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	3	replace
82	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	3	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	6	replace
84	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	6	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	9	replace
86	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	9	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  RuntimeException  	60	10	replace
88	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  RuntimeException  	60	10	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	60	9	replace
90	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	60	9	replace
91	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
92	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
93	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  fallThrough.getNext();	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
94	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
95	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  n.getNext();	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
96	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough);	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  ';'  expected	64	None	replace
97	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
98	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
99	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    If  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
100	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
101	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
102	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	44	7	replace
104	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	44	7	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	44	9	replace
106	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	44	9	replace
107	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
108	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
109	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
110	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
111	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfg);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfg);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfg);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
112	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  compiler);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  compiler);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  compiler);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
113	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  lastCfgNode);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
114	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
115	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
116	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
117	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    If  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
118	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >>  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode  >>  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode  >>  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
119	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
120	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
121	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
122	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
123	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
124	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
125	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
126	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
127	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
128	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    If  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
129	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
130	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
131	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
132	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
133	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
134	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  If  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  If  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    If  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	104	None	add
135	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
136	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
137	[BUG]  [BUGGY]  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
138	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
139	[BUG]  [BUGGY]  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
140	[BUG]  [BUGGY]  NodeUtil.removeChild(last,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(last,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(last,  nextCfgNode);	  NodeUtil.removeChild(n,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
141	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  nextCfgNode,  fallThrough);	  NodeUtil.removeChild(n,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
142	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);	  NodeUtil.removeChild(n,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
143	[BUG]  [BUGGY]  NodeUtil.removeChild(last,  n,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(last,  n,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(last,  n,  nextCfgNode);	  NodeUtil.removeChild(n,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
144	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
145	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
146	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
147	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  	non-compiled	[CE]  ';'  expected	84	None	add
148	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
149	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
150	[BUG]  [BUGGY]  n.removeChild(nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(nextCfgNode,  fallThrough);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
151	[BUG]  [BUGGY]  n.removeChild(firstCfgNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(firstCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(firstCfgNode);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
152	[BUG]  [BUGGY]  n.removeChild(nextCfgNode  +  fallThrough);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(nextCfgNode  +  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(nextCfgNode  +  fallThrough);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
153	[BUG]  [BUGGY]  n.removeChild(lastCfgNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(lastCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(lastCfgNode);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
154	[BUG]  [BUGGY]  n.removeChild(cfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(cfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(cfgNode);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
156	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
157	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {  [CE]  cannot  find  symbol  curCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  curCfgNode)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	42	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
159	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
161	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
162	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
163	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
164	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
165	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	9	replace
167	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	9	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	9	replace
169	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	9	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	7	replace
171	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	107	7	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
173	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	9	replace
175	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	9	replace
176	[BUG]  [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
177	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
178	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
179	[BUG]  [BUGGY]  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
180	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  nextCfgNode)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
181	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
182	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
183	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
184	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  If(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  If(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    If(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
185	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
186	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
187	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
188	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
189	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
190	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	106	None	add
191	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
192	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode)  {	  	non-compiled	[CE]  ')'  expected	106	None	add
193	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	111	10	replace
194	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	111	10	replace
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	111	10	replace
196	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	111	10	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	7	replace
198	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  fallThrough!=  nextCfgNode.getNext())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	7	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	9	replace
200	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	9	replace
201	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getType())  {  [CE]  incomparable  types:  Node  and  int  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getType())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getType())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	111	None	replace
202	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
203	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  first);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  first);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  first,  fallThrough);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
210	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  if  (nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(fallThrough!=  nextCfgNode)  {  if  (nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
211	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
212	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	92	None	replace
213	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
214	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
215	[BUG]  [BUGGY]  NodeUtil.removeChild(lastCfgNode,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(lastCfgNode,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(lastCfgNode,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
216	[BUG]  [BUGGY]  NodeUtil.removeChild(firstCfgNode,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(firstCfgNode,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(firstCfgNode,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
217	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getParent();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	89	None	replace
218	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  RuntimeException  	20	10	replace
219	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  RuntimeException  	20	10	replace
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  RuntimeException  	20	10	replace
221	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  RuntimeException  	20	10	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	20	9	replace
223	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	20	9	replace
224	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapseFallThrough)  {  [CE]  cannot  find  symbol  collapseFallThrough  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapseFallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  collapseFallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    secondCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  collapseFallThrough	117	None	replace
225	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
226	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  &&  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
228	[BUG]  [BUGGY]  if(nextCfgNode!=  null  &&  fallThrough.equals(nextCfgNode))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  &&  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  &&  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  null  &&  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	7	replace
230	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  &&  fallThrough.equals(nextCfgNode))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  &&  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  &&  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	7	replace
231	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	7	replace
232	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	7	replace
233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  null  ||  nextCfgNode.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(fallThrough  ==  null  ||  nextCfgNode.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	9	replace
234	[BUG]  [BUGGY]  if(fallThrough  ==  null  ||  nextCfgNode.equals(nextCfgNode))  {  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  null  ||  nextCfgNode.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(fallThrough  ==  null  ||  nextCfgNode.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  RuntimeException  	109	9	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.equals(fallThrough))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  &&  nextCfgNode.equals(fallThrough))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
236	[BUG]  [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.equals(fallThrough))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.equals(fallThrough))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  &&  nextCfgNode.equals(fallThrough))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	6	replace
237	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
238	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
239	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
240	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
241	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
242	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
243	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
244	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
245	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	52	9	replace
247	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	52	9	replace
248	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	replace
249	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	replace
250	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
251	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	replace
252	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	replace
253	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  n.getLastChild();	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
254	[BUG]  [BUGGY]  Node  first  =  fallThrough.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  fallThrough.getLastChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  fallThrough.getLastChild();	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
255	[BUG]  [BUGGY]  Node  first  =  curCfgNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  curCfgNode.getLastChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  curCfgNode.getLastChild();	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
256	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getLastChild(),  fallThrough;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.getLastChild(),  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.getLastChild(),  fallThrough;	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	85	7	replace
258	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	85	7	replace
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	85	10	replace
260	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  fallThrough  ==  nextCfgNode.getNext())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	85	10	replace
261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getParent())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	85	10	replace
262	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getParent())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  RuntimeException  	85	10	replace
263	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
264	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
265	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
266	[BUG]  [BUGGY]  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
267	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
268	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  first)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
269	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	4	replace
271	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	4	replace
272	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  curCfgNode)  {  [CE]  cannot  find  symbol  curCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  curCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  curCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	35	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
274	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	7	replace
276	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	7	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
278	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
279	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
280	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
281	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    If  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
282	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode!=  null  ||  fallThrough  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
283	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  >=  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
284	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode!=  null  ||  fallThrough  >>  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
285	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
286	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
287	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode!=  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
288	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    If  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {	  	non-compiled	[CE]  ';'  expected	110	None	add
289	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough  >>  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
290	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode.getNext())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough  [Delete]  nextCfgNode.getNext())  {	  	non-compiled	[CE]  ')'  expected	110	None	add
291	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
292	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
293	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
294	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
295	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  >=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
296	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  >=  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
297	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
298	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
299	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
300	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
301	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
302	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
303	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  n.getFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
304	[BUG]  [BUGGY]  Node  first  =  fallThrough.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  fallThrough.getFirstChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  fallThrough.getFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
305	[BUG]  [BUGGY]  Node  first  =  curCfgNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  curCfgNode.getFirstChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  curCfgNode.getFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
306	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.removeFirstChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.removeFirstChild();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
307	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
308	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
309	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
310	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >>  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >>  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  >>  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
311	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    If  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	30	None	add
312	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
313	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode!=  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode!=    fallThrough)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
314	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
315	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
316	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  rootNode)  {  [CE]  cannot  find  symbol  rootNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  rootNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  rootNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    first)    {    	non-compiled	[CE]  cannot  find  symbol  rootNode	103	None	replace
317	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	replace
318	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	replace
319	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	replace
320	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
321	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    If  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
322	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
323	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode!=  null  &&  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
324	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
325	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  ==  fallThrough)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode    ==    fallThrough)    {    if  (nextCfgNode  >>  null  &&  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
326	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	replace
327	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
328	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	replace
329	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	114	10	replace
331	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	114	10	replace
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	114	10	replace
333	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {	  if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	114	10	replace
334	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  fallThrough);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(first,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(first,  fallThrough);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
335	[BUG]  [BUGGY]  NodeUtil.removeChild(firstCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(firstCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(firstCfgNode,  fallThrough);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
336	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  firstCfgNode);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(n,  firstCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  firstCfgNode);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
337	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
338	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
339	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
340	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    If(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
341	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  >=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  >=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode  >=  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
342	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  >=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  >=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  >=  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
343	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  fallThrough)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	replace
344	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
345	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
346	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
347	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
348	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
349	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
350	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    If  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
351	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
352	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
353	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
354	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    If  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
355	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
356	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode  >=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
357	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
358	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	38	2	replace
360	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    	compilable	  [FE]  AssertionFailedError  	38	2	replace
361	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  fallThrough)  {  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  cannot  find  symbol  first	38	None	replace
362	[BUG]  [BUGGY]  if(nextCfgNode  ==  curCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  curCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  curCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	38	None	replace
363	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
364	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	81	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	3	replace
366	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	3	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	9	replace
368	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	9	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  nextCfgNode  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(fallThrough  ==  nextCfgNode  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	8	replace
370	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode  ||  nextCfgNode  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(fallThrough  ==  nextCfgNode  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(fallThrough  ==  nextCfgNode  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	8	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  first);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  first);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  outEdges);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  outEdges);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfgNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfgNode);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  cfgStack);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  cfgStack);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  cfgStack);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  n);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfg);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfg);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  curCfg);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
377	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
378	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
379	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  n.getNext();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
380	[BUG]  [BUGGY]  Node  firstCfgNode  =  fallThrough.getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  fallThrough.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  fallThrough.getNext();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
381	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
382	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
383	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough);	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  ';'  expected	65	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  fallThrough  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
385	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
387	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
389	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
390	[BUG]  [BUGGY]  if(nextCfgNode  ==  curCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  curCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  curCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	116	None	replace
391	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode)  {  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  first	116	None	replace
392	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    >=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
393	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    >=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
394	[BUG]  [BUGGY]  If  (nextCfgNode!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    If    (nextCfgNode!=    null)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
395	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
396	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode!=  null  ||  fallThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
397	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  If(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  If(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    If(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  ';'  expected	108	None	add
398	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  >=  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  >=  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  >=  null  ||  fallThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
399	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallsThrough.equals(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallsThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  ==  null  ||  fallsThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
400	[BUG]  [BUGGY]  Node  first  =  curCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  curCfgNode.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  curCfgNode.getNext();	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
401	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  root)  {  [CE]  cannot  find  symbol  root  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  root)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  root)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    first)    {    	non-compiled	[CE]  cannot  find  symbol  root	103	None	replace
402	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfg)  {  [CE]  incomparable  types:  Node  and  ControlFlowGraph<Node>  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfg)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  curCfg)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    first)    {    	non-compiled	[CE]  incomparable  types:  Node  and  ControlFlowGraph<Node>	103	None	replace
403	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  end)  {  [CE]  cannot  find  symbol  end  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  end)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  end)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    first)    {    	non-compiled	[CE]  cannot  find  symbol  end	103	None	replace
404	[BUG]  [BUGGY]  if(lastCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(lastCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(lastCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	109	None	replace
405	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getNext())  {  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getParent())  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
406	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  firstCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
407	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
408	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  outEdges.get(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  outEdges.get(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  outEdges.get(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
409	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
410	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
411	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
412	[BUG]  [BUGGY]  if(nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  firstCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
413	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    >=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
414	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    >=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
415	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    >=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
416	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
417	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  fallThrough;	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
418	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  curCfgNode.getNext();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
419	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.cloneTree();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
420	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  fallThrough;	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
421	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  If  (nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    If    (nextCfgNode!=    null)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
422	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
423	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
424	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough)  {  if(nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
425	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
426	[BUG]  [BUGGY]  if(lastCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(lastCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(lastCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
427	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
428	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
429	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode!=    fallThrough)    {    Node    nextCfgNode    =    nextCfgNode.getDestination().getValue();    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	replace
430	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
432	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode  ||  nextCfgNode!=  fallThrough)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
433	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough  >=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	107	None	replace
434	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
435	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
436	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
437	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
438	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
439	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
440	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode!=  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getParent())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	85	9	replace
442	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getParent())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.getParent())  {	  if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	85	9	replace
443	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  first);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  first);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
444	[BUG]  [BUGGY]  NodeUtil.replaceChild(nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.replaceChild(nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.replaceChild(nextCfgNode,  fallThrough);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
445	[BUG]  [BUGGY]  NodeUtil.replaceChild(nextCfgNode,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.replaceChild(nextCfgNode,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.replaceChild(nextCfgNode,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
446	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  lastCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  lastCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  lastCfgNode);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
447	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  Node  nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  Node  nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    Node  nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  ';'  expected	108	None	add
448	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);	  	non-compiled	[CE]  ')'  expected	108	None	add
449	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
450	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
451	[BUG]  [BUGGY]  if(first  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(first  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(first  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
452	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
453	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
454	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
455	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
456	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
457	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	116	None	replace
458	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
459	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
460	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
461	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
462	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
463	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
464	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
465	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
466	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EMPTY)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EMPTY)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EMPTY)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
467	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.replaceChild(n,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.replaceChild(n,  nextCfgNode);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
468	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
469	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null)  {  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null)  {  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null)  {  If  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
470	[BUG]  [BUGGY]  if  (nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
471	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  noOpStatements)  {  [CE]  cannot  find  symbol  noOpStatements  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  noOpStatements)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  noOpStatements)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	33	None	replace
472	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  first)  {  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  first)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  &&  nextCfgNode  ==  first)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  first	33	None	replace
473	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode!=    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
474	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode!=    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
475	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if(nextCfgNode!=  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode!=    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
476	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
477	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
478	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
479	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
480	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    >=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
481	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
482	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
483	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  if  (nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
484	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
485	[BUG]  [BUGGY]  if  (lastCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (lastCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (lastCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	105	None	replace
486	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
487	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  If  (nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
488	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if  (nextCfgNode!=  fallThrough)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    >>    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
489	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode)  {  if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode)    {    if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
490	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null)  {  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getNext();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  compiler);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  compiler);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  compiler);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  noOpStatements);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  noOpStatements);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  noOpStatements);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
493	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  outEdges.get(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  outEdges.get(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  outEdges.get(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
494	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  lastCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
495	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.cloneTree();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.cloneTree();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.cloneTree();	  Node    first    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
496	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
497	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
498	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
499	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode)  {  if  (nextCfgNode  >=  null  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode)    {    if  (nextCfgNode  >=  null  ||  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
500	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
501	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);	  NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
502	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getDeadExprStatementSafely(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getDeadExprStatementSafely(n))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  getDeadExprStatementSafely(n))  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
503	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.BLOCK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Branch.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
504	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLACK)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLOCK)  {  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLACK)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.BLOCK)    {    if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.BLACK)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
507	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  noOpStatements);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  noOpStatements);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  noOpStatements);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
508	[BUG]  [BUGGY]  n.replaceChild(nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.replaceChild(nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.replaceChild(nextCfgNode,  fallThrough);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
509	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(first);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
510	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.nextChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.nextChild();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.nextChild();	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
511	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  Node  nextCfgNode  =  nextCfgNode.getLastChild();  if(nextCfgNode!=  null)  {	  if    (nextCfgNode!=    null)    {    Node    nextCfgNode    =    nextCfgNode.getLastChild();    if    (nextCfgNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
512	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfgNode,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(curCfgNode,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(curCfgNode,  nextCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
513	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
514	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  null;  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode.getNext()  :  null;	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
515	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.removeFirst();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.removeFirst();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.removeFirst();	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
516	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  noOpStatements)  {  [CE]  cannot  find  symbol  noOpStatements  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  noOpStatements)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  noOpStatements)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	35	None	replace
517	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
518	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
519	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
520	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
521	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
522	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode    ==    fallThrough)    {    if    (nextCfgNode    ==    null    ||    nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
523	[BUG]  [BUGGY]  if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null)  {  if  (nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
524	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  if(nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	78	None	replace
525	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  this.nextCfgNode)  {  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  this.nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  this.nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    curCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	36	None	replace
526	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  pruneFallThrough)  {  [CE]  cannot  find  symbol  pruneFallThrough  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  pruneFallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  pruneFallThrough)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    first)    {    	non-compiled	[CE]  cannot  find  symbol  pruneFallThrough	103	None	replace
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
528	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode)  {	  if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	42	9	replace
529	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  firstCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  nextCfgNode  ==  fallThrough)  {  if(nextCfgNode  ==  firstCfgNode  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    nextCfgNode    ==    fallThrough)    {    if(nextCfgNode  ==  firstCfgNode  ||  nextCfgNode  ==  fallThrough)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
530	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
531	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.redeclareVarsInsideBranching(nextCfgNode);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
532	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode,  fallThrough);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.redeclareVarsInsideBranching(nextCfgNode,  fallThrough);	  NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
533	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  <  fallThrough)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode  <  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode!=  null  &&  nextCfgNode  <  fallThrough)  {	  if    (nextCfgNode    ==    null    &&    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	10	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	62	9	replace
535	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough.getType()  ==  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	62	9	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	62	9	replace
537	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()!=  Token.FUNCTION)  {	  if    (nextCfgNode    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	62	9	replace
538	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >>  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  >>  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  >>  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
539	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
540	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  If(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    If(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
541	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode)  {  if(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode)    {    if(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
542	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    &&    nextCfgNode.getType()    ==    Token.EXPR_RESULT)    {    if  (nextCfgNode  >>  null  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	52	9	replace
544	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	52	9	replace
545	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION)  {  if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode    ==    null    &&    nextCfgNode.getType()    ==    Token.FUNCTION)    {    if  (nextCfgNode  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
546	[BUG]  [BUGGY]  n.removeChild(nextCfgNode).removeChild(fallThrough);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  n.removeChild(nextCfgNode).removeChild(fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	n.removeChild(nextCfgNode).removeChild(fallThrough);	  n.removeChild(nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
547	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);	  NodeUtil.removeChild(n,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.cloneTree())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.cloneTree())  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	9	replace
549	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.cloneTree())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.cloneTree())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough  ==  nextCfgNode.cloneTree())  {	  if    (nextCfgNode    ==    null    ||    fallThrough    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	105	9	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);	  NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
551	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallingThrough.equals(nextCfgNode))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallingThrough.equals(nextCfgNode))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  ==  null  ||  fallingThrough.equals(nextCfgNode))  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
552	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode))  {  if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    if(nextCfgNode  ==  null  ||  fallThrough.equals(nextCfgNode);)  {	  	non-compiled	[CE]  ')'  expected	108	None	add
553	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
554	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
555	[BUG]  [BUGGY]  if(nextCfgNode  ==  curCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  curCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  curCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  firstCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    firstCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
556	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();  if(nextCfgNode  ==  null  ||  nextCfgNode!=  null)  {	  if    (nextCfgNode    ==    null)    {    Node    nextCfgNode    =    nextCfgNode.cloneTree();    if    (nextCfgNode    ==    null)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	81	None	replace
557	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.removeFirst();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.removeFirst();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  firstCfgNode  =  nextCfgNode.removeFirst();	  Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
558	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  >=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
559	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    >=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
560	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    >=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
561	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  >=  fallThrough  ||  nextCfgNode  ==  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    >=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
562	[BUG]  [BUGGY]  If  (nextCfgNode  ==  nextCfgNode)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  If  (nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	If  (nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    If    (nextCfgNode!=    fallThrough)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
563	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  curCfgNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  curCfgNode);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(nextCfgNode,  curCfgNode);	  NodeUtil.removeChild(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
564	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  null)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
565	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode!=    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]    fallThrough)  {  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    	compilable	  [FE]  AssertionFailedError  	48	7	replace
567	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]    fallThrough)  {  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    	compilable	  [FE]  AssertionFailedError  	48	7	replace
568	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    fallThrough)  {  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    	compilable	  [FE]  AssertionFailedError  	48	9	replace
569	[BUG]  [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]    fallThrough)  {  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  ||  nextCfgNode  ==  nextCfgNode)  {	  if    (nextCfgNode!=    fallThrough)    {    if    (nextCfgNode    	compilable	  [FE]  AssertionFailedError  	48	9	replace
570	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.next();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.next();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.next();	  Node    first    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
571	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
572	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    lastCfgNode)    {    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	92	None	replace
573	[BUG]  [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode!=  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode.getNext())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if    (nextCfgNode!=    null    ||    fallThrough    ==    nextCfgNode.getNext())    {    if  (nextCfgNode  >>  null  ||  fallThrough  ==  nextCfgNode.getNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
574	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  If  (nextCfgNode!=  null  ||  nextCfgNode  ==  fallThrough)  {	  if    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    If    (nextCfgNode!=    null    ||    nextCfgNode    ==    fallThrough)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
575	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.removeFirst();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  first  =  nextCfgNode.removeFirst();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  first  =  nextCfgNode.removeFirst();	  Node    first    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
576	[BUG]  [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  first  ||  nextCfgNode  ==  nextCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
577	[BUG]  [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  lastCfgNode)  {  if(nextCfgNode!=  fallThrough  ||  nextCfgNode  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    if(nextCfgNode!=    fallThrough    ||    nextCfgNode    ==    nextCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getFirstChild())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getFirstChild())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	9	replace
579	[BUG]  [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getFirstChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getFirstChild())  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if  (nextCfgNode  ==  null  ||  fallThrough!=  nextCfgNode.getFirstChild())  {	  if    (nextCfgNode    ==    null    ||    fallThrough!=    nextCfgNode.getNext())    {    	compilable	  [FE]  AssertionFailedError  	111	9	replace
580	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  toRemoveUnconditionalBranching);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  toRemoveUnconditionalBranching);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough,  toRemoveUnconditionalBranching);	  NodeTraversal.traverse(compiler,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getString()))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getString()))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	7	replace
582	[BUG]  [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getString()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getString()))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getString()))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	7	replace
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getFirstChild()))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getFirstChild()))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	7	replace
584	[BUG]  [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getFirstChild()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getFirstChild()))  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.FUNCTION  &&  fallThrough.equals(nextCfgNode.getFirstChild()))  {	  if(nextCfgNode    ==    null    ||    fallThrough.equals(nextCfgNode))    {    	compilable	  [FE]  AssertionFailedError  	109	7	replace
585	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  first);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(n,  first);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(n,  first);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
586	[BUG]  [BUGGY]  NodeUtil.removeChild(last,  fallThrough);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  NodeUtil.removeChild(last,  fallThrough);  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	NodeUtil.removeChild(last,  fallThrough);	  NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.NAME)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.NAME)  {	  if    (nextCfgNode!=    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	26	7	replace
588	[BUG]  [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.NAME)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  null  &&  nextCfgNode.getType()  ==  Token.NAME)  {	  if    (nextCfgNode!=    null)    {    if    (nextCfgNode    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	26	7	replace
589	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
590	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode  &&  fallThrough  ==  nextCfgNode)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
592	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough)  {	  if(nextCfgNode    ==    fallThrough    &&    nextCfgNode    ==    nextCfgNode)    {    	compilable	  [FE]  AssertionFailedError  	33	7	replace
593	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode  :  nextCfgNode.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode  :  nextCfgNode.getNext();  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	Node  nextCfgNode  =  nextCfgNode  ==  null?  nextCfgNode  :  nextCfgNode.getNext();	  Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	add	if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	49	9	replace
595	[BUG]  [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();      [BUGGY]  if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {  [BUGGY]      removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	185	185	2	replace	if(nextCfgNode  ==  null  ||  nextCfgNode!=  nextCfgNode)  {	  if    (nextCfgNode    ==    null)    {    if    (nextCfgNode    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	49	9	replace
