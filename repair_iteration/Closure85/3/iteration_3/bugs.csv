bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
2	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
3	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
4	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
5	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
6	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
7	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	132	2	replace
9	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	132	2	replace
10	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	132	None	replace
11	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	132	None	replace
12	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	132	None	replace
13	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	185	None	replace
14	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	185	None	replace
15	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	185	None	replace
16	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
17	[BUG]  [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
18	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
19	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
20	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext().getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  n.getNext().getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  n.getNext().getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
21	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	66	None	replace
22	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	66	None	replace
23	[BUG]  [BUGGY]  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	66	None	replace
24	[BUG]  [BUGGY]  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	66	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
26	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
27	[BUG]  [BUGGY]  return  nextCfgNode.nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.nextCfgNode;	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	129	None	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough.cloneTree();	  return    fallThrough.nextCfgNode;    	compilable	  [FE]  RuntimeException  	129	6	replace
29	[BUG]  [BUGGY]  return  fallThrough.cloneTree();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.cloneTree();	  return    fallThrough.nextCfgNode;    	compilable	  [FE]  RuntimeException  	129	6	replace
30	[BUG]  [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	129	None	replace
31	[BUG]  [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION;	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	129	None	replace
32	[BUG]  [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.nextCfgNode  &&  nextCfgNode.getType()  ==  Token.EXPR_RESULT;	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	129	None	replace
33	[BUG]  [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.nextCfgNode  &&  nextCfgNode.getFirstChild().getType()  ==  Token.BLOCK);	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  ';'  expected	129	None	replace
34	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	replace
35	[BUG]  [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  not  a  statement	85	None	replace
36	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
37	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	158	None	replace
38	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
39	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	12	None	add
40	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
41	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	12	None	add
42	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	12	None	add
43	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
44	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
45	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.nextCfgNode;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  ';'  expected	103	None	replace
46	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.getNext();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.getNext();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
47	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	86	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  null  :  fallThrough;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
49	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  fallThrough;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  null  :  fallThrough;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
50	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  first;  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  first;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	86	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  fallThrough  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
52	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  fallThrough  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
54	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
56	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
57	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
58	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
59	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
60	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
61	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
62	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
63	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
64	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	1	None	add
65	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	replace
66	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	replace
67	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	79	None	replace
68	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough.getNext();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough.getNext();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
69	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getParent();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getParent();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
70	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
71	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
72	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getNext());  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getNext());	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
73	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	173	None	replace
74	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	173	None	replace
75	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	173	None	replace
76	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ';'  expected	173	None	replace
77	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	173	None	replace
78	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	173	None	replace
79	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	166	None	replace
80	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	166	None	replace
81	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	166	None	replace
82	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
83	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.getNext()  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.getNext()  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
84	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.next()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.next()  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.next()  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
85	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
86	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  nextCfgNode,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
87	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  fallThrough,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
88	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(first,  n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(first,  n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(first,  n,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	127	None	replace
89	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(lastCfgNode,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	127	None	replace
90	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough,  cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough,  cfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  fallThrough,  cfgNode);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	127	None	replace
91	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(cfgNode,  fallThrough);  [CE]  cannot  find  symbol  cfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(cfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(cfgNode,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	127	None	replace
92	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	156	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  null?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	156	2	replace
94	[BUG]  [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  null?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	156	2	replace
95	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	156	None	replace
96	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
97	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	8	None	add
98	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
99	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	8	None	add
100	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	8	None	add
101	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  unreachable  statement	21	None	add
102	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  first  =  nextCfgNode.getNext();	  	non-compiled	[CE]  unreachable  statement	21	None	add
103	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  unreachable  statement	21	None	add
104	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	21	None	add
105	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	21	None	add
106	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  unreachable  statement	21	None	add
107	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getLastChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getLastChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  nextCfgNode.getLastChild();  return  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  unreachable  statement	21	None	add
108	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	21	None	add
109	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
110	[BUG]  [BUGGY]  removeUnconditionalBranching(fallThrough);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(fallThrough);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
111	[BUG]  [BUGGY]  removeUnconditionalBranching(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(lastCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(lastCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	126	None	replace
112	[BUG]  [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(null,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
113	[BUG]  [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(outEdges,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
114	[BUG]  [BUGGY]  removeUnconditionalBranching(nullCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(nullCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(nullCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	126	None	replace
115	[BUG]  [BUGGY]  n!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	137	None	replace
116	[BUG]  [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	137	None	replace
117	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.next;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.next;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode.next;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.next;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	190	None	replace
118	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.next;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.next;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode.next;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.next;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	190	None	replace
119	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.next;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.next;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode.next;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.next;    	non-compiled	[CE]  ';'  expected	190	None	replace
120	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
121	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
122	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
123	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
124	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
125	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
126	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
127	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
128	[BUG]  [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
129	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	replace
130	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode;	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	replace
131	[BUG]  [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  fallThrough.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  fallThrough.getNext();	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	replace
132	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	replace
133	[BUG]  [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  not  a  statement	45	None	replace
134	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	63	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
136	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
137	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	63	None	replace
138	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
139	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
140	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
141	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
142	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
143	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getLastChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
144	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
145	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
146	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeTraversal.traverse(compiler,    fallThrough,    this);    NodeTraversal.traverse(compiler,  fallThrough,  this);	  	compilable	  [FE]  RuntimeException  	27	6	add
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    NodeTraversal.traverse(compiler,  fallThrough,  this);	  	compilable	  [FE]  RuntimeException  	27	6	add
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  ';'  expected	27	None	add
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  ';'  expected	27	None	add
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [CE]  ';'  expected  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	27	None	add
155	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
156	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
157	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
158	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
159	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
160	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	48	6	replace
162	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	48	6	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
164	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
166	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  ||  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
168	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
169	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	160	None	replace
170	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	163	None	replace
171	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
172	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
173	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
174	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
175	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  return  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  return  nextCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
176	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  return  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  return  nextCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
177	[BUG]  [BUGGY]  NodeUtil.removeChild(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(lastCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(lastCfgNode,  fallThrough);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	170	None	replace
178	[BUG]  [BUGGY]  NodeUtil.removeChild(firstCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(firstCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(firstCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	170	None	replace
179	[BUG]  [BUGGY]  NodeUtil.removeChild(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(lastCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(lastCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	170	None	replace
180	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(first,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	170	None	replace
181	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(outEdges,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(outEdges,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	170	None	replace
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeUtil.removeChild(n,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	170	7	replace
183	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(n,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	170	7	replace
184	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.getNext();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  ';'  expected	59	None	replace
185	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getParent();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getParent();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	replace
186	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.getNext();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.getNext();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	59	None	replace
187	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
188	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
189	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
190	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
191	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
192	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
193	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
194	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
195	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getParent();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	155	None	replace
196	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getParent();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	155	None	replace
197	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getParent();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	155	None	replace
198	[BUG]  [BUGGY]  return  firstCfgNode!=  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  firstCfgNode!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  firstCfgNode!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    firstCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	157	None	replace
199	[BUG]  [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    firstCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	157	None	replace
200	[BUG]  [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  firstCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    firstCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	157	None	replace
201	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.clone();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough.clone();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	153	None	replace
202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.cloneTree();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    	compilable	  [FE]  RuntimeException  	153	6	replace
203	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.cloneTree();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.cloneTree();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    	compilable	  [FE]  RuntimeException  	153	6	replace
204	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(first,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	128	None	replace
205	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(last,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(last,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	128	None	replace
206	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(lastCfgNode,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	128	None	replace
207	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(last,  n,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(last,  n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(last,  n,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	128	None	replace
208	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(curCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(curCfgNode,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	128	None	replace
209	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	67	None	replace
210	[BUG]  [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	67	None	replace
211	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clone();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clone();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	150	None	replace
212	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clonePosition();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clonePosition();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.clonePosition();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
213	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
214	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
215	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
216	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
217	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
218	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
219	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  unreachable  statement  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  unreachable  statement	183	None	add
220	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  unreachable  statement  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  unreachable  statement	183	None	add
221	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
222	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
223	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
224	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
225	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
226	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgNode);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	25	None	replace
227	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  lastCfgNode);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	25	None	replace
228	[BUG]  [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
229	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	146	None	replace
230	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	146	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  new  ControlFlowGraph());  [CE]  cannot  find  symbol  curCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	116	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  n,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  compiler,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  compiler,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  compiler,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph  <  N>());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph  <  N>());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph  <  N>());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  outEdges,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  outEdges,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  outEdges,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
238	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  this  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	122	None	replace
239	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	122	None	replace
240	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1  +  1;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	122	None	replace
241	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	101	None	replace
242	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1  +  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
243	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  2;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  2;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  2;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
244	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	compilable	  [FE]  RuntimeException  	184	6	replace
246	[BUG]  [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  null;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	compilable	  [FE]  RuntimeException  	184	6	replace
247	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  noOpStatements;  [CE]  cannot  find  symbol  noOpStatements  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  noOpStatements;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  noOpStatements;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	184	None	replace
248	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  this;  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  this;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  this;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  incompatible  types	184	None	replace
249	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextThrough)?  fallThrough  :  null;  [CE]  cannot  find  symbol  nextThrough  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextThrough)?  fallThrough  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextThrough)?  fallThrough  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  nextThrough	184	None	replace
250	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	47	None	replace
251	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.getNext();	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
252	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.cloneTree();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.cloneTree();	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
253	[BUG]  [BUGGY]  return  nextCfgNode,  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode,  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode,  fallThrough;	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
254	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode,  removeNoOpStatements;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode,  removeNoOpStatements;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode,  removeNoOpStatements;	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
255	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.getFirstChild();	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
256	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode,  curCfgNode;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode,  curCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode,  curCfgNode;	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
257	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.cloneTree();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	57	None	replace
258	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	57	None	replace
259	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().cloneTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
260	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clone();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clone();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clone();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
261	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  compiler.compiler.cloneTree();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  compiler.compiler.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  compiler.compiler.cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	57	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,UnreachableCodeElimination,Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  this,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,UnreachableCodeElimination,Node)	28	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  removeNoOpStatements);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  removeNoOpStatements);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  removeNoOpStatements);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	28	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  outEdges);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,UnreachableCodeElimination,List<DiGraphEdge<Node,Branch>>)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  this,  outEdges);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,UnreachableCodeElimination,List<DiGraphEdge<Node,Branch>>)	28	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this,  curCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  this,  curCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	28	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	28	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  fallThrough);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	28	None	replace
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  null);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeTraversal.traverse(compiler,  fallThrough,  null);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	compilable	  [FE]  RuntimeException  	28	7	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  null);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  null);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  null);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	compilable	  [FE]  RuntimeException  	28	7	replace
270	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
271	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
272	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
273	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
274	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
275	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
276	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
277	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
278	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
279	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
280	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
281	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
282	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  RemoveDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	RemoveDeadExprStatementSafely(n);	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	6	7	add
284	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	6	7	add
285	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	add
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	6	7	add
287	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  RuntimeException  	6	7	add
288	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
289	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  ';'  expected	6	None	add
290	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
291	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
292	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.cloneTree();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
293	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext().cloneTree();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext().cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
294	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getParent().cloneTree();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getParent().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getParent().cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
295	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext().cloneTree();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext().cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
296	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  &&  fallThrough!=  nextCfgNode.cloneTree();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  &&  fallThrough!=  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneTree()  &&  fallThrough!=  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
297	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()?  null  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode.cloneTree()?  null  :  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	compilable	  [FE]  RuntimeException  	51	6	replace
298	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()?  null  :  nextCfgNode.cloneTree();  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()?  null  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneTree()?  null  :  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	compilable	  [FE]  RuntimeException  	51	6	replace
299	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
300	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
301	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	114	7	add
303	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	114	7	add
304	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
305	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  n.getFirstChild();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  n.getFirstChild();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  n.getFirstChild();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
306	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
307	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
308	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  NodeUtil.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  NodeUtil.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    NodeUtil.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	114	None	add
309	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  node.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  node.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  node.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
310	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.replaceChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.replaceChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.replaceChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
311	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getLastChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
312	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getFirstChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
313	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getLastChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
314	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.getFirstChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	53	None	replace
315	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	53	None	replace
316	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough.getFirstChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough.getFirstChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
317	[BUG]  [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
318	[BUG]  [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
319	[BUG]  [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
320	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  n.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
321	[BUG]  [BUGGY]  node  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
322	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
323	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	32	6	replace
324	[BUG]  [BUGGY]  n  =  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	32	6	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  null  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
326	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode.getNext();	  return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
328	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode.getNext();	  return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
329	[BUG]  [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  not  a  statement	78	None	replace
330	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
331	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.next();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.next();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.next();	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
332	[BUG]  [BUGGY]  return  fallThrough  ==  n.nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  n.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  n.nextCfgNode;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	54	None	replace
333	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.nextStatement;  [CE]  cannot  find  symbol  nextStatement  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.nextStatement;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.nextStatement;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextStatement	54	None	replace
334	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.next;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.next;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.next;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	54	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	23	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  first,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  curCfgNode,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	23	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,DiGraphNode<Node,Branch>,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  gNode,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,DiGraphNode<Node,Branch>,Node,Node)	23	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  n,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	23	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  rootNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  rootNode,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  rootNode	23	None	replace
341	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  curCfgNode);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	172	None	replace
342	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  removeNoOpStatements);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  removeNoOpStatements);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  removeNoOpStatements);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	172	None	replace
343	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  first);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	172	None	replace
344	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	172	None	replace
345	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(first,  nextCfgNode,  fallThrough);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	172	None	replace
346	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  removeNoOpStatements);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  removeNoOpStatements);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  removeNoOpStatements);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	172	None	replace
347	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	84	None	replace
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	117	7	add
349	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	117	7	add
350	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);	  	non-compiled	[CE]  cannot  find  symbol  first	117	None	add
351	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely	  	non-compiled	[CE]  not  a  statement	117	None	add
352	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(n,  fallThrough);	  	non-compiled	[CE]  cannot  find  symbol  first	117	None	add
353	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	117	None	add
354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	117	7	add
355	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	117	7	add
356	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr	  	non-compiled	[CE]  not  a  statement	117	None	add
357	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  removeDeadExprStatementSafely	  	non-compiled	[CE]  not  a  statement	117	None	add
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(fallThrough)?  null  :  nextCfgNode;	  return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    	compilable	  [FE]  RuntimeException  	182	6	replace
359	[BUG]  [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  nextCfgNode;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(fallThrough)?  null  :  nextCfgNode;	  return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    	compilable	  [FE]  RuntimeException  	182	6	replace
360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(nextCfgNode)?  null  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    	compilable	  [FE]  RuntimeException  	182	6	replace
361	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  null  :  fallThrough;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextCfgNode)?  null  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    	compilable	  [FE]  RuntimeException  	182	6	replace
362	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode  +  1;	  return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	182	None	replace
363	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
364	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	108	7	replace
366	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	108	7	replace
367	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(firstCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
368	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  null  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode,  fallThrough?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
369	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode,  fallThrough?  this  :  fallThrough;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode,  fallThrough?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode,  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
370	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
371	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough,  fallThrough?  this  :  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough,  fallThrough?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough,  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
372	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
373	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
374	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
375	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
376	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough.getNext();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough.getNext();	  return    fallThrough    ==    nextCfgNode.getParent();    	non-compiled	[CE]  incompatible  types	135	None	replace
377	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough.getParent();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough.getParent();	  return    fallThrough    ==    nextCfgNode.getParent();    	non-compiled	[CE]  incompatible  types	135	None	replace
378	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
379	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
380	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
381	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
382	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
383	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
384	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
385	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	177	None	add
386	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	177	None	add
387	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	62	None	replace
388	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	93	None	replace
389	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  null  :  nextCfgNode;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  firstCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	104	None	replace
390	[BUG]  [BUGGY]  return  first  <  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  first  <  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  first  <  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	104	None	replace
391	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  null  :  first;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  firstCfgNode?  null  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  null  :  first;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	104	None	replace
392	[BUG]  [BUGGY]  return  first  <  fallThrough?  null  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  first  <  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  first  <  fallThrough?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	104	None	replace
393	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  null  :  first;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	104	None	replace
394	[BUG]  [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  not  a  statement	99	None	replace
395	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	189	None	replace
396	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	189	None	replace
397	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	189	None	replace
398	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	189	None	replace
399	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    nextCfgNode;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
400	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    nextCfgNode;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
401	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    nextCfgNode;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
402	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    nextCfgNode;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
403	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  secondCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  secondCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  secondCfgNode;  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    nextCfgNode;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	replace
404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  null?  null  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	94	6	replace
405	[BUG]  [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  null?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  null?  null  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	94	6	replace
406	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	94	None	replace
407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	94	6	replace
408	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	94	6	replace
409	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	142	None	replace
410	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  null  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	142	None	replace
411	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1  +  1;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	142	None	replace
412	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  nextCfgNode  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
413	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
414	[BUG]  [BUGGY]  return  fallThrough  <  lastCfgNode?  nextCfgNode  :  nextCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  lastCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  lastCfgNode?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	111	None	replace
415	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  lastCfgNode  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  lastCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  lastCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
416	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  lastCfgNode  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  lastCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  lastCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough,  n);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  first,  fallThrough,  n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  first,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  cannot  find  symbol  first	26	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  n);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	26	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  n);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	26	None	replace
420	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	134	None	replace
421	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	134	None	replace
422	[BUG]  [BUGGY]  n!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	134	None	replace
423	[BUG]  [BUGGY]  n.removeChild(n.getCfgNode());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getCfgNode());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getCfgNode());	          n.removeChild(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
424	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getFirstChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.removeChild(n.getFirstChild());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
425	[BUG]  [BUGGY]  n.removeChild(n.getFirstChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getFirstChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getFirstChild());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
426	[BUG]  [BUGGY]  n.removeChild(n.getNext()  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getNext()  +  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getNext()  +  fallThrough);	          n.removeChild(n.getNext());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	30	None	replace
427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getLastChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.removeChild(n.getLastChild());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
428	[BUG]  [BUGGY]  n.removeChild(n.getLastChild());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getLastChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getLastChild());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
429	[BUG]  [BUGGY]  n.removeChild(n.getNext()  -  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getNext()  -  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getNext()  -  fallThrough);	          n.removeChild(n.getNext());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	30	None	replace
430	[BUG]  [BUGGY]  n.removeChild(n.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getString());	          n.removeChild(n.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
431	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	119	None	replace
432	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	119	None	replace
433	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
434	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
435	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  curCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  curCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  curCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	169	None	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
437	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  n  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  n  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
439	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  n  :  fallThrough;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  n  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  n  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
441	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    first    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	169	2	replace
442	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(n,  fallThrough,  nextCfgNode);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	118	None	replace
443	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(n,  fallThrough,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(n,  fallThrough,  first);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	118	None	replace
444	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(n,  firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(n,  firstCfgNode);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	118	None	replace
445	[BUG]  [BUGGY]  NodeUtil.removeChild(first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(first,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(first,  fallThrough);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	118	None	replace
446	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode  ||  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode  ||  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode  ||  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode    &&    nextCfgNode.getType()    ==    Token.FUNCTION?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	176	None	replace
447	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode    &&    nextCfgNode.getType()    ==    Token.FUNCTION?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	176	None	replace
448	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode    &&    nextCfgNode.getType()    ==    Token.FUNCTION?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	176	None	replace
449	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode.getType()  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode.getType()  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode.getType()  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode    &&    nextCfgNode.getType()    ==    Token.FUNCTION?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	176	None	replace
450	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	178	6	replace
451	[BUG]  [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  fallThrough;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(fallThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	178	6	replace
452	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  nextCfgNode;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	178	6	replace
453	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  nextCfgNode;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  nextCfgNode;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	178	6	replace
454	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  nextThrough  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  nextThrough	178	None	replace
455	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextThrough)?  fallThrough  :  nextCfgNode;  [CE]  cannot  find  symbol  nextThrough  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextThrough)?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextThrough)?  fallThrough  :  nextCfgNode;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  nextThrough	178	None	replace
456	[BUG]  [BUGGY]  return  nextCfgNode.equals(skipThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  skipThrough  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(skipThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(skipThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  skipThrough	178	None	replace
457	[BUG]  [BUGGY]  removeUnconditionalBranching(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(n);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
458	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeCfgNode(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeCfgNode(nextCfgNode);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
459	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadCfgNode(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadCfgNode(nextCfgNode);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
460	[BUG]  [BUGGY]  removeDeadCfgNode(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadCfgNode(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadCfgNode(n);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(n);    	compilable	  [FE]  RuntimeException  	20	6	replace
462	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(n);    	compilable	  [FE]  RuntimeException  	20	6	replace
463	[BUG]  [BUGGY]  removeCfgNode(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeCfgNode(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeCfgNode(n);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
464	[BUG]  [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  not  a  statement	92	None	replace
465	[BUG]  [BUGGY]  n!=  nextCfgNode?  null  :  nextCfgNode.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  null  :  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  not  a  statement	92	None	replace
466	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  this  :  nextCfgNode;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  firstCfgNode?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  this  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	100	None	replace
467	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  this  :  first;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	100	None	replace
468	[BUG]  [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  not  a  statement	43	None	replace
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
470	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  nextCfgNode.getLastChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
472	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
473	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  n.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	37	2	replace
474	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  n.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  n.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	37	2	replace
475	[BUG]  [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  unreachable  statement	37	None	replace
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
477	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	6	replace
478	[BUG]  [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  not  a  statement	64	None	replace
479	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
480	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
481	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	105	None	replace
482	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1  +  1;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
483	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
484	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
485	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
486	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
487	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
488	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
489	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	165	None	replace
490	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
491	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeCfgNode(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeCfgNode(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeCfgNode(n));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
492	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
493	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFallThrough(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFallThrough(n));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
494	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(fallThrough));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  tryRemoveUnconditionalBranching(computeFollowing(fallThrough));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	22	6	replace
495	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(fallThrough));  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(fallThrough));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(fallThrough));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	22	6	replace
496	[BUG]  [BUGGY]  Node  first  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  first  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  first  might  not  have  been  initialized	188	None	replace
497	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  null?  null  :  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
499	[BUG]  [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode.getNext();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  null?  null  :  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
500	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  nextCfgNode  :  first;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    first;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	110	None	replace
501	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  nextCfgNode  :  nextCfgNode;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  firstCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    first;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	110	None	replace
502	[BUG]  [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  unreachable  statement	109	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  AssertionFailedError  	109	2	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  AssertionFailedError  	109	2	replace
505	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  nextCfgNode.getFirstChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
506	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getFirstChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  nextCfgNode.getFirstChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
507	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
508	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
509	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  nextCfgNode.getLastChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
510	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getLastChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  nextCfgNode.getLastChild();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  RuntimeException  	109	6	replace
511	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION));  [CE]  cannot  find  symbol  second  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  nextCfgNode.getNext();  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  second.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol  second	109	None	replace
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  AssertionFailedError  	109	2	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	compilable	  [FE]  AssertionFailedError  	109	2	replace
514	[BUG]  [BUGGY]  return  nextCfgNode  >=  fallThrough?  this  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  >=  fallThrough?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  >=  fallThrough?  this  :  fallThrough;	  return    nextCfgNode    <    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	74	None	replace
515	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
516	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(fallThrough)?  null  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	180	6	replace
517	[BUG]  [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  fallThrough;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(fallThrough)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(fallThrough)?  null  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	180	6	replace
518	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextThrough)?  null  :  fallThrough;  [CE]  cannot  find  symbol  nextThrough  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextThrough)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextThrough)?  null  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  nextThrough	180	None	replace
519	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough  +  1;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	180	None	replace
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
521	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
522	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    If(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  ';'  expected	4	None	add
523	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  deleteDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
525	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
526	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  replaceDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
527	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeRemoveUnconditionalBranching(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.removeChild(fallThrough);	          n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	115	7	replace
529	[BUG]  [BUGGY]  n.removeChild(fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(fallThrough);	          n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	115	7	replace
530	[BUG]  [BUGGY]  n.removeChild(nextCfgNode,  fallThrough);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(nextCfgNode,  fallThrough);	          n.removeChild(nextCfgNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	115	None	replace
531	[BUG]  [BUGGY]  n.removeChild(nextCfgNode  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(nextCfgNode  +  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(nextCfgNode  +  fallThrough);	          n.removeChild(nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	115	None	replace
532	[BUG]  [BUGGY]  n.removeChild(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(lastCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(lastCfgNode);	          n.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	115	None	replace
533	[BUG]  [BUGGY]  n.removeChild(nullCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(nullCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(nullCfgNode);	          n.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	115	None	replace
534	[BUG]  [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	node  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	144	None	replace
535	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
536	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough.cloneTree();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough.cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  incompatible  types	167	None	replace
537	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  outEdges.cloneTree();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  outEdges.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  outEdges.cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	167	None	replace
538	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.compiler.cloneTree();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.compiler.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.compiler.cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	167	None	replace
539	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size()  -  1,  fallThrough);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
540	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  +  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  +  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size()  +  1);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
541	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1CfgNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1CfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size()  -  1CfgNode);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  ')'  expected	24	None	replace
542	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
543	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough  -  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size(),  fallThrough  -  1);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	24	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	71	2	replace
545	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	71	2	replace
546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  null;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	71	2	replace
547	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  null;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  null;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	71	2	replace
548	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  first;  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  first;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	71	None	replace
549	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
550	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
551	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getNext();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getNext();	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
552	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.getLastChild();	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
553	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
554	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
555	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
556	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
557	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
558	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
559	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
560	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
561	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
562	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	14	None	add
563	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
564	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	14	None	add
565	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	14	None	add
566	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
567	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	148	None	replace
568	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	174	None	replace
569	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeF	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	174	None	replace
570	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(compute	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	174	None	replace
571	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ';'  expected	174	None	replace
572	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	174	None	replace
573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);	  	compilable	  [FE]  RuntimeException  	19	7	add
574	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n);	  	compilable	  [FE]  RuntimeException  	19	7	add
575	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeRemoveUnconditionalBranching(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeRemoveUnconditionalBranching(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeRemoveUnconditionalBranching(n);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
576	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	19	7	add
577	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getNext());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	19	7	add
578	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeDeadExprStatementSafely(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeDeadExprStatementSafely(n,  fallThrough);	  	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	add
579	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeExprStatementSafely(n);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
580	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getFirstChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    n.removeChild(n.getFirstChild());	  	compilable	  [FE]  RuntimeException  	19	7	add
581	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getFirstChild());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(n.getFirstChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    n.removeChild(n.getFirstChild());	  	compilable	  [FE]  RuntimeException  	19	7	add
582	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeRemoveExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeRemoveExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeRemoveExprStatementSafely(n);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
583	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	124	None	replace
584	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	124	None	replace
585	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	124	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  null;	  return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
587	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  null;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  null;	  return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
588	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  +  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
589	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  -  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size()  -  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
590	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(0);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(0);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(0);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
591	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  null  :  fallThrough,  outEdges.size();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
592	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	133	None	replace
593	[BUG]  [BUGGY]  return  nextCfgNode  >  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  >  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  >  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
594	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
595	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode.getNext()?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode.getNext()?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode.getNext()?  nextCfgNode  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
596	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode,  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode,  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode,  nextCfgNode  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	42	None	replace
597	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	162	None	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  null?  null  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	186	2	replace
599	[BUG]  [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  null?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  null?  null  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	186	2	replace
600	[BUG]  [BUGGY]  return  lastCfgNode  ==  nextCfgNode?  null  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  lastCfgNode  ==  nextCfgNode?  null  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  lastCfgNode  ==  nextCfgNode?  null  :  lastCfgNode;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	186	None	replace
601	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  nextCfgNode;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  this  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    this    :    fellThrough;    	non-compiled	[CE]  incompatible  types	151	None	replace
602	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  this  :  fallThrough;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  this  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    this    :    fellThrough;    	non-compiled	[CE]  incompatible  types	151	None	replace
603	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  first;  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  this  :  first;	  return    fallThrough!=    nextCfgNode?    this    :    fellThrough;    	non-compiled	[CE]  cannot  find  symbol  first	151	None	replace
604	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode  +  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
605	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1  +  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
606	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  this  :  fallThrough  +  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
607	[BUG]  [BUGGY]  return  fallThrough  <  curCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  curCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  curCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    firstCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	41	None	replace
608	[BUG]  [BUGGY]  return  fallThrough  <  n?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  n?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  n?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    firstCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
609	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
610	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
611	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
612	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
613	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
614	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
615	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
616	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
617	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	102	None	replace
618	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  null  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  null  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	102	None	replace
619	[BUG]  [BUGGY]  return  fallThrough  <  lastCfgNode?  null  :  nextCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  lastCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  lastCfgNode?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	102	None	replace
620	[BUG]  [BUGGY]  return  lastCfgNode  <  fallThrough?  null  :  nextCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  lastCfgNode  <  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  lastCfgNode  <  fallThrough?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	102	None	replace
621	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	102	None	replace
622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  n.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	2	replace
623	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  n.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	2	replace
624	[BUG]  [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  unreachable  statement	33	None	replace
625	[BUG]  [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  firstCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  firstCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	33	None	replace
626	[BUG]  [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
627	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
630	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
631	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
632	[BUG]  [BUGGY]  return  nextCfgNode  >=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  >=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  >=  fallThrough?  nextCfgNode  :  fallThrough;	  return    nextCfgNode    <    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	39	None	replace
633	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	39	None	replace
634	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
635	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
636	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
637	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
638	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
639	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
640	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
641	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	72	None	add
642	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
643	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  >=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	10	None	add
644	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
645	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	10	None	add
646	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  >>  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	10	None	add
647	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	10	None	add
648	[BUG]  [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  not  a  statement	61	None	replace
649	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
650	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
651	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
652	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  ||  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
654	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
656	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
657	[BUG]  [BUGGY]  return  fallThrough  ==  firstCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  firstCfgNode  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  firstCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  firstCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	89	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode?  null  :  nextCfgNode;	  return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
659	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  nextCfgNode;	  return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
660	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  first);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	113	None	replace
661	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  first,  n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  first,  n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  first,  n,  fallThrough);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	113	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<DiGraphEdge<Node,Branch>>)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  outEdges);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<DiGraphEdge<Node,Branch>>)	113	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  lastCfgNode);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	113	None	replace
664	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  firstCfgNode);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	113	None	replace
665	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode.getNext()  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  nextCfgNode.getNext()  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
666	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
667	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode.getNext()  :  nextCfgNode.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode.getNext()  :  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode.getNext()  :  nextCfgNode.getNext();	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  ';'  expected	40	None	replace
668	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
669	[BUG]  [BUGGY]  n  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  ==  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	121	None	replace
670	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
671	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getFirst();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getFirst();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
672	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeLast();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeLast();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeLast();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
673	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree().removeFirst();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree().removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree().removeFirst();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
674	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().removeFirst();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext().removeFirst();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
675	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
677	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
678	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
679	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
680	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
681	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
682	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
683	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
684	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
685	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.first;  [CE]  first  has  private  access  in  Node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.first;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
686	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough!=  nextCfgNode.first;  [CE]  first  has  private  access  in  Node  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough!=  nextCfgNode.first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough!=  nextCfgNode.first;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
687	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.equals(nextCfgNode.first);  [CE]  first  has  private  access  in  Node  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.equals(nextCfgNode.first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.equals(nextCfgNode.first);	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
688	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.last;  [CE]  first  has  private  access  in  Node  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.last;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.last;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
689	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.second;  [CE]  first  has  private  access  in  Node  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.second;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.second;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
690	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.getType()  ==  Token.FUNCTION;  [CE]  first  has  private  access  in  Node  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough.getType()  ==  Token.FUNCTION;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
691	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
692	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
693	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
694	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
695	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
696	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
697	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
698	[BUG]  [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	164	None	replace
699	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(fallThrough);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(fallThrough);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
700	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(deadCfgNode);  [CE]  cannot  find  symbol  deadCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(deadCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(deadCfgNode);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  deadCfgNode	131	None	replace
701	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  tryRemoveUnconditionalBranching(n);	  return    collapseUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
702	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(n);	  return    collapseUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
703	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(lastCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(lastCfgNode);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	131	None	replace
704	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(destCfgNode);  [CE]  cannot  find  symbol  destCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(destCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(destCfgNode);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  destCfgNode	131	None	replace
705	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
706	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
707	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    Node  first  =  nextCfgNode.getNext();  n.removeChild(first);	  	compilable	  [FE]  RuntimeException  	29	7	add
708	[BUG]  [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    Node  first  =  nextCfgNode.getNext();  n.removeChild(first);	  	compilable	  [FE]  RuntimeException  	29	7	add
709	[BUG]  [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n.getNext());  n.removeChild(n.getNext());  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n.getNext());  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    NodeUtil.removeChild(n.getNext());  n.removeChild(n.getNext());	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	29	None	add
710	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    NodeUtil.removeChild(n,  fallThrough);  n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
711	[BUG]  [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  n.removeChild(n.getNext());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    NodeUtil.removeChild(n,  fallThrough);  n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
712	[BUG]  [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n.getNext());  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    NodeUtil.removeChild(n.getNext());	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	29	None	add
713	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	29	7	add
714	[BUG]  [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	29	7	add
715	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    Node  first  =  nextCfgNode.getNext();  n.removeChild(first.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
716	[BUG]  [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first.getNext());  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  Node  first  =  nextCfgNode.getNext();  n.removeChild(first.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    Node  first  =  nextCfgNode.getNext();  n.removeChild(first.getNext());	  	compilable	  [FE]  RuntimeException  	29	7	add
717	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	171	7	add
718	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	171	7	add
719	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe	  	non-compiled	[CE]  not  a  statement	171	None	add
720	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely	  	non-compiled	[CE]  not  a  statement	171	None	add
721	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely	  	non-compiled	[CE]  not  a  statement	171	None	add
722	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely	  	non-compiled	[CE]  not  a  statement	171	None	add
723	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  cannot  find  symbol  first  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  	non-compiled	[CE]  cannot  find  symbol  first	171	None	add
724	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  incomparable  types:  int  and  Branch  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	171	None	add
725	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND	  	non-compiled	[CE]  ')'  expected	171	None	add
726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	91	2	replace
727	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	91	2	replace
728	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	36	None	replace
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
730	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
731	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  secondCfgNode;  [CE]  cannot  find  symbol  secondCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  secondCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  secondCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	36	None	replace
732	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getString();  [CE]  incomparable  types:  Node  and  String  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
733	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getLastChild().getString();  [CE]  incomparable  types:  Node  and  String  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getLastChild().getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getLastChild().getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
734	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.getString();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	52	None	replace
735	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());  [CE]  incomparable  types:  Node  and  String  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
736	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(n.getString());  [CE]  incomparable  types:  Node  and  String  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(n.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough.equals(n.getString());	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
737	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());  [CE]  incomparable  types:  Node  and  String  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getString()  &&  fallThrough.equals(nextCfgNode.getString());	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
738	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(nextCfgNode.getString());	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
739	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.getType()  ==  Token.FUNCTION;	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
740	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(n.getNext());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough.equals(n.getNext());	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
741	[BUG]  [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	replace
742	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	replace
743	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	replace
744	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
745	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
746	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	16	None	add
747	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
748	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	16	None	add
749	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.getNext();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  first.getNext();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	replace
750	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.toString();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.toString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.toString();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	replace
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.replaceChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.replaceChild(nextCfgNode,  fallThrough);	          n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	115	7	replace
752	[BUG]  [BUGGY]  n.replaceChild(nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.replaceChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.replaceChild(nextCfgNode,  fallThrough);	          n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	115	7	replace
753	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(first);	          n.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	115	None	replace
754	[BUG]  [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	31	None	replace
756	[BUG]  [BUGGY]  return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  dependThrough  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  dependThrough	178	None	replace
757	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  first;  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  first;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	178	None	replace
758	[BUG]  [BUGGY]  return  nextCfgNode.equals(getCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  getCfgNode  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(getCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(getCfgNode)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  getCfgNode	178	None	replace
759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
760	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
762	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
763	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
764	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
765	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
766	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
767	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
768	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
769	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
770	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	19	7	add
771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK));	  	compilable	  [FE]  RuntimeException  	19	7	add
772	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK));  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.BLOCK));	  	compilable	  [FE]  RuntimeException  	19	7	add
773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
774	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  nextCfgNode;	  return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	73	2	replace
775	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
776	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
777	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
778	[BUG]  [BUGGY]  n  =  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  =  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
779	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getLastChild());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n.getLastChild());	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	replace
780	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n);	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	replace
781	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  NodeTraversal.traverse(compiler,  n,  fallThrough);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  NodeTraversal.traverse(compiler,  n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    NodeTraversal.traverse(compiler,  n,  fallThrough);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	21	None	add
782	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  unreachable  statement	21	None	add
783	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  unreachable  statement	21	None	add
784	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  unreachable  statement	21	None	add
785	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));  [CE]  incomparable  types:  int  and  Branch  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	21	None	add
786	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  unreachable  statement	21	None	add
787	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
788	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	45	None	replace
789	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	45	None	replace
790	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  this  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
791	[BUG]  [BUGGY]  return  lastCfgNode  <  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  lastCfgNode  <  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  lastCfgNode  <  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	102	None	replace
792	[BUG]  [BUGGY]  return  fallThrough  <  lastCfgNode?  null  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  lastCfgNode?  null  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  lastCfgNode?  null  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	102	None	replace
793	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  first;  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  first;	  return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	91	None	replace
794	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	109	None	replace
795	[BUG]  [BUGGY]  if(fallThrough!=  null)  {  return  nextCfgNode;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  }  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  null)  {  return  nextCfgNode;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  null)  {  return  nextCfgNode;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  }	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  unreachable  statement	109	None	replace
796	[BUG]  [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol  first	109	None	replace
797	[BUG]  [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  first.getNext().getType()  ==  Token.FUNCTION));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  first.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  first.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol  first	109	None	replace
798	[BUG]  [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  unreachable  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  unreachable  statement	109	None	replace
799	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(last,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(last,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(last,  fallThrough,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	128	None	replace
800	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(first,  n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(first,  n,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	128	None	replace
801	[BUG]  [BUGGY]  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	162	None	replace
802	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(nextCfgNode.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.removeChild(nextCfgNode.getNext());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
803	[BUG]  [BUGGY]  n.removeChild(nextCfgNode.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(nextCfgNode.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(nextCfgNode.getNext());	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
804	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.replaceChild(n.getNext(),  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n.replaceChild(n.getNext(),  fallThrough);	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
805	[BUG]  [BUGGY]  n.replaceChild(n.getNext(),  fallThrough);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.replaceChild(n.getNext(),  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.replaceChild(n.getNext(),  fallThrough);	          n.removeChild(n.getNext());    	compilable	  [FE]  RuntimeException  	30	7	replace
806	[BUG]  [BUGGY]  n.removeChild(n.getFirst());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n.removeChild(n.getFirst());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n.removeChild(n.getFirst());	          n.removeChild(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
807	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  first;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  first;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
808	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  null;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  null;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
809	[BUG]  [BUGGY]  return  fallThrough  ==  first,  fallThrough?  this  :  fallThrough;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  first,  fallThrough?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  first,  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
810	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	8	None	add
811	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
812	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	134	None	replace
813	[BUG]  [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	134	None	replace
814	[BUG]  [BUGGY]  return  fallThrough  <  first?  nextCfgNode  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  first?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  first?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	110	None	replace
815	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
816	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  lastCfgNode;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	71	None	replace
817	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  secondCfgNode;  [CE]  cannot  find  symbol  secondCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  secondCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  secondCfgNode;	  return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	71	None	replace
818	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
819	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()	  	non-compiled	[CE]  ';'  expected	149	None	add
820	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
821	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree()	  	non-compiled	[CE]  ';'  expected	149	None	add
822	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
823	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
824	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
825	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
826	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
827	[BUG]  [BUGGY]  NodeUtil.removeChild(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(curCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(curCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	170	None	replace
828	[BUG]  [BUGGY]  NodeUtil.removeChild(child,  nextCfgNode);  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(child,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(child,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  child	170	None	replace
829	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  first;  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  first;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	180	None	replace
830	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  lastCfgNode;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	180	None	replace
831	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  defaultCfgNode;  [CE]  cannot  find  symbol  defaultCfgNode  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  defaultCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  defaultCfgNode;	  return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  defaultCfgNode	180	None	replace
832	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<ControlFlowGraph<Node>>,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<ControlFlowGraph<Node>>,Node,Node)	23	None	replace
833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lastNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  lastNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  lastNode,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  lastNode,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastNode	23	None	replace
834	[BUG]  [BUGGY]  return  fallThrough  >>  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >>  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >>  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    >=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	125	None	replace
835	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  first.nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
836	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  first;	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
837	[BUG]  [BUGGY]  return  nextCfgNode  >=  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  >=  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  >=  fallThrough?  fallThrough  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	175	None	replace
838	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.first;	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
839	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.removeFirst();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough.removeFirst();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
840	[BUG]  [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  not  a  statement	44	None	replace
841	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	44	None	replace
842	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  first;  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  first;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	160	None	replace
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
844	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	160	2	replace
845	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  lastCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	160	None	replace
846	[BUG]  [BUGGY]  return  fallThrough  >>  nextCfgNode?  null  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >>  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >>  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    >=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	replace
847	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	68	None	add
848	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
849	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  n  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  n  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  n  =  outEdges.get(0).getDestination();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
850	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  n  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  n  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  n  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
851	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	114	None	add
852	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  NodeUtil.removeChild(nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  NodeUtil.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    NodeUtil.removeChild(nextCfgNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	114	None	add
853	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.replaceChild(nextCfgNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.replaceChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.replaceChild(nextCfgNode);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	add
854	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	114	10	add
855	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  removeDeadExprStatementSafely(n);  [FE]  AssertionFailedError  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	114	10	add
856	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	compilable	  [FE]  RuntimeException  	184	6	replace
857	[BUG]  [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  null;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(nextCfgNode)?  fallThrough  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	compilable	  [FE]  RuntimeException  	184	6	replace
858	[BUG]  [BUGGY]  return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  null;  [CE]  cannot  find  symbol  dependThrough  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(dependThrough)?  nextCfgNode  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  dependThrough	184	None	replace
859	[BUG]  [BUGGY]  return  nextCfgNode.equals(skipThrough)?  fallThrough  :  null;  [CE]  cannot  find  symbol  skipThrough  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(skipThrough)?  fallThrough  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(skipThrough)?  fallThrough  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  skipThrough	184	None	replace
860	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.getParent();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.getParent();	  return    fallThrough    ==    nextCfgNode.getParent();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	135	None	replace
861	[BUG]  [BUGGY]  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  not  a  statement	67	None	replace
862	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough  :  nextCfgNode;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  ';'  expected	159	None	add
863	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
864	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	84	6	replace
866	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getLastChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	84	6	replace
867	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1);  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	compilable	  [FE]  RuntimeException  	27	6	add
868	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1);  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	compilable	  [FE]  RuntimeException  	27	6	add
869	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
870	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  incomparable  types:  int  and  Branch  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	27	None	add
871	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  ';'  expected	27	None	add
872	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  NodeTraversal.shouldRemoveUnconditionalBranching(computeFollowing(n)));  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  NodeTraversal.shouldRemoveUnconditionalBranching(computeFollowing(n)));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  NodeTraversal.shouldRemoveUnconditionalBranching(computeFollowing(n)));	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
873	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));  [CE]  incomparable  types:  int  and  Branch  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	27	None	add
874	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  nextCfgNode;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  nextCfgNode;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	86	None	replace
875	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  lastCfgNode;	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	86	None	replace
876	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
877	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
878	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
879	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
880	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	89	None	replace
881	[BUG]  [BUGGY]  return  fallThrough  ==  first  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  first  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  first  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	89	None	replace
882	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1  +  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size()  -  1  +  fallThrough);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	24	None	replace
883	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  not  a  statement	12	None	add
884	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( ".   ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
885	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParent().cloneTree();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParent().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParent().cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	167	None	replace
886	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode).cloneTree();  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode).cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode).cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  void  cannot  be  dereferenced	167	None	replace
887	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  first.cloneTree();  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  first.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  first.cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  first	167	None	replace
888	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode);  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.replaceChild(n,  nextCfgNode);	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	167	None	replace
889	[BUG]  [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getNext();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  unreachable  statement	33	None	replace
890	[BUG]  [BUGGY]  return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	33	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  firstCfgNode  =  firstCfgNode.getNext();  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  firstCfgNode  =  firstCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  firstCfgNode  =  firstCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	33	None	replace
892	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatement(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatement(nextCfgNode);	  removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
893	[BUG]  [BUGGY]  Node  nextCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  firstCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    firstCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	157	None	replace
894	[BUG]  [BUGGY]  return  fallThrough  <  first?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  first?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  first?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    lastCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
895	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
896	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
897	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
898	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
899	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
900	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(nextCfgNode);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
901	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(null,  fallThrough);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(null,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(null,  fallThrough);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
902	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	compilable	  [FE]  AssertionFailedError  	174	2	replace
903	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	compilable	  [FE]  AssertionFailedError  	174	2	replace
904	[BUG]  [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
905	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(fallThrough);	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
906	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1L;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
907	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  2;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  2;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  2;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
908	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  first  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  first  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  first  :  fallThrough  +  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
909	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  >=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
910	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(nextCfgNode);	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
911	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
912	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThr  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThr	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
913	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode!=  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
914	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	186	6	replace
915	[BUG]  [BUGGY]  n  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	186	6	replace
916	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	186	6	replace
917	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	186	6	replace
918	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	compilable	  [FE]  RuntimeException  	173	6	replace
919	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(first));  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	compilable	  [FE]  RuntimeException  	173	6	replace
920	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
921	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
922	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
923	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
925	[BUG]  [BUGGY]  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  lastCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
926	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	146	None	replace
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
928	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
929	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	137	None	replace
930	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.nextCfgNode;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.nextCfgNode;	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
931	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.removeFirst();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.removeFirst();	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
932	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.cloneTree();  [CE]  first  has  private  access  in  Node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
933	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.last;  [CE]  last  has  private  access  in  Node  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.last;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.last;	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  last  has  private  access  in  Node	55	None	replace
934	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.clone();  [CE]  first  has  private  access  in  Node  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.clone();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  ||  fallThrough  ==  nextCfgNode.clone();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
935	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.getLastChild();  [CE]  first  has  private  access  in  Node  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
936	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.clone();  [CE]  first  has  private  access  in  Node  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.clone();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.clone();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
937	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.cloneTree();  [CE]  first  has  private  access  in  Node  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough!=  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
938	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	non-compiled	[CE]  cannot  find  symbol  first	171	None	add
939	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	171	None	add
940	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	non-compiled	[CE]  ';'  expected	171	None	add
941	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThr  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(nextCfgNode,  fallThr	  	non-compiled	[CE]  ';'  expected	171	None	add
942	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThr  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThr	  	non-compiled	[CE]  ';'  expected	171	None	add
943	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	non-compiled	[CE]  ';'  expected	171	None	add
944	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.EMPTY)  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.EMPTY)  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.EMPTY)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	171	None	add
945	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	97	6	replace
946	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	97	6	replace
947	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  nextCfgNode;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  nextCfgNode;	  return    nextCfgNode!=    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	77	None	replace
948	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	36	7	replace
949	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	36	7	replace
950	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  2;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  2;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
951	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1L;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
952	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild().getString();  [CE]  incomparable  types:  Node  and  String  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild().getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild().getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
953	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getLastChild();  [CE]  incomparable  types:  Node  and  String  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
954	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	165	None	replace
955	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	61	None	replace
956	[BUG]  [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
957	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  first;	  return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	69	None	replace
958	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  lastCfgNode;	  return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	69	None	replace
959	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(i).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	140	None	replace
960	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.replaceChild(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.replaceChild(n,  nextCfgNode);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
961	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.replaceChild(n,  fallThrough,  nextCfgNode);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
962	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  first;  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  null  :  first;	  return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	2	None	replace
963	[BUG]  [BUGGY]  return  fallThrough  >>  nextCfgNode?  this  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >>  nextCfgNode?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >>  nextCfgNode?  this  :  fallThrough;	  return    fallThrough    >=    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	76	None	replace
964	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  lastCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  lastCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  lastCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  lastCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	164	None	replace
965	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  first;	  return    fallThrough    <    nextCfgNode    &&    nextCfgNode.getType()    ==    Token.FUNCTION?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	176	None	replace
966	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneBlock();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneBlock();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneBlock();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
967	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  first.cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
968	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
969	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
970	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	90	None	add
971	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  *  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
972	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1L;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
973	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  2;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  2;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
974	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  +  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough  +  1);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	172	None	replace
975	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough  -  1);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	172	None	replace
976	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  fallThrough,  outEdges);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	172	None	replace
977	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	163	None	replace
978	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext().getValue();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  first.getNext().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  first.getNext().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	163	None	replace
979	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(1);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
980	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough,  outEdges.size();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
981	[BUG]  [BUGGY]  return  fallThrough  <  first?  null  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  first?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  first?  null  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	104	None	replace
982	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    AssertionFailedError  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  not  a  statement	4	None	add
983	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
985	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(firstCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first!=  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();  if(first!=  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
987	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first!=  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first!=  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();  if(first!=  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
988	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
989	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	70	None	add
990	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
991	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(first);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(first);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	6	replace
992	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(first);  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(first);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(first);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	6	replace
993	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  outEdges.get(0).getDestination().getValue();  if(first  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
994	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  if(first  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();  if(first  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
996	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	compilable	  [FE]  RuntimeException  	35	7	replace
997	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough  *  1;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	142	None	replace
998	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1L;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	142	None	replace
999	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	25	None	replace
1000	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	78	None	replace
1001	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,UnreachableCodeElimination)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  this);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,UnreachableCodeElimination)	28	None	replace
1002	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  tryRemoveUnconditionalBranching);  [CE]  cannot  find  symbol  tryRemoveUnconditionalBranching  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  tryRemoveUnconditionalBranching);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  tryRemoveUnconditionalBranching);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  cannot  find  symbol  tryRemoveUnconditionalBranching	28	None	replace
1003	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(first,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(first,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	127	None	replace
1004	[BUG]  [BUGGY]  return  nextCfgNode  <  lastCfgNode?  fallThrough  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  lastCfgNode?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  lastCfgNode?  fallThrough  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	111	None	replace
1005	[BUG]  [BUGGY]  return  lastCfgNode  <  nextCfgNode?  fallThrough  :  lastCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  lastCfgNode  <  nextCfgNode?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  lastCfgNode  <  nextCfgNode?  fallThrough  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	111	None	replace
1006	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
1007	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getLastChild();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
1008	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getChildCount();  [CE]  incomparable  types:  Node  and  int  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getChildCount();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getChildCount();	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	50	None	replace
1009	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(first,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	126	None	replace
1010	[BUG]  [BUGGY]  removeUnconditionalBranching(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(curCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(curCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	126	None	replace
1011	[BUG]  [BUGGY]  removeUnconditionalBranching(fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(fallThrough,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1012	[BUG]  [BUGGY]  removeUnconditionalBranching(deadThrough);  [CE]  cannot  find  symbol  deadThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(deadThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(deadThrough);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  deadThrough	126	None	replace
1013	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  Branch.UNCOND);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	106	None	replace
1014	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	106	7	replace
1015	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	106	7	replace
1016	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	62	None	replace
1017	[BUG]  [BUGGY]  return  fallThrough  <  first?  this  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  first?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  first?  this  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	100	None	replace
1018	[BUG]  [BUGGY]  return  first  <  fallThrough?  this  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  first  <  fallThrough?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  first  <  fallThrough?  this  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	100	None	replace
1019	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.removeFirstChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.removeFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.removeFirstChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
1020	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1021	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1022	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  ||  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  ||  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  ||  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1023	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1024	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1025	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	166	None	replace
1026	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	156	None	replace
1027	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  first.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  first.getNext();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	156	None	replace
1028	[BUG]  [BUGGY]          n.removeChild(n.getNext());  NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(n.getNext());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    NodeTraversal.traverse(compiler,  n,  fallThrough);  n.removeChild(n.getNext());	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	29	None	add
1029	[BUG]  [BUGGY]          n.removeChild(n.getNext());  Node  n  =  outEdges.get(n.getNext());  n.removeChild(n.getNext());  [CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  Node  n  =  outEdges.get(n.getNext());  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    Node  n  =  outEdges.get(n.getNext());  n.removeChild(n.getNext());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	29	None	add
1030	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.replaceChild(n.getNext());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.replaceChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.replaceChild(n.getNext());	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	29	None	add
1031	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  first	43	None	replace
1032	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	145	None	replace
1033	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	119	None	replace
1034	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
1035	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
1036	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  null);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(outEdges.get(0).getDestination()!=  null);  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	108	7	replace
1037	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  null);  n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  null);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(0).getDestination()!=  null);  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	108	7	replace
1038	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext().getValue());  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext().getValue());  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext().getValue());  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
1039	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst(nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.next;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	190	None	replace
1040	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove(nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.next;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	190	None	replace
1041	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getLastChild();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
1042	[BUG]  [BUGGY]  return  fallThrough  ==  first.nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  first.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  first.nextCfgNode;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
1043	[BUG]  [BUGGY]  return  fallThrough  ==  lastCfgNode.nextCfgNode;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  lastCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  lastCfgNode.nextCfgNode;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	54	None	replace
1044	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.nextCfgNode;	  return    fallThrough    ==    nextCfgNode.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	54	None	replace
1045	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.getNext();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	56	None	replace
1046	[BUG]  [BUGGY]  return  fallThrough  >>  nextCfgNode.getNext();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >>  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >>  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
1047	[BUG]  [BUGGY]  return  fallThrough  [Delete]  nextCfgNode.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  [Delete]  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  [Delete]  nextCfgNode.getNext();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  ';'  expected	56	None	replace
1048	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1049	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1050	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1051	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1052	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >=  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	51	None	replace
1053	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getTree();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1054	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneBlock();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneBlock();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneBlock();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1055	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n)+  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n)+  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n)+  fallThrough);	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
1056	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1L;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	124	None	replace
1057	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1  +  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	124	None	replace
1058	[BUG]  [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	188	None	replace
1059	[BUG]  [BUGGY]  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	188	None	replace
1060	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1)  ==  n);  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(1)  ==  n);  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(1)  ==  n);  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
1061	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  secondCfgNode;  [CE]  cannot  find  symbol  secondCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  secondCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  return  secondCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	107	None	replace
1062	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getParent();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	187	6	replace
1063	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getParent();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	187	6	replace
1064	[BUG]  [BUGGY]  return  fallThrough.removeUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.removeUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.removeUnconditionalBranching(nextCfgNode);	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1065	[BUG]  [BUGGY]  return  fallThrough.removeCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.removeCfgNode(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.removeCfgNode(nextCfgNode);	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1066	[BUG]  [BUGGY]  return  fallThrough.getNextCfgNode;  [CE]  cannot  find  symbol  getNextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.getNextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.getNextCfgNode;	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  getNextCfgNode	129	None	replace
1067	[BUG]  [BUGGY]  return  fallThrough.removeNoOpStatements();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.removeNoOpStatements();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.removeNoOpStatements();	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1068	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	143	7	replace
1069	[BUG]  [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	143	7	replace
1070	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	121	None	replace
1071	[BUG]  [BUGGY]  return  fallThrough  ==  n?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  n?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  n?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	121	None	replace
1072	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  first,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  first,  fallThrough);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	113	None	replace
1073	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fallThrough,  curCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  fallThrough,  curCfgNode);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	113	None	replace
1074	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
1075	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
1076	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThr  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough.equals(nextCfgNode)?  null  :  fallThr	  	non-compiled	[CE]  ';'  expected	179	None	add
1077	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
1078	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	179	None	add
1079	[BUG]  [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getFirstChild();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough;  Node  firstCfgNode  =  firstCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  unreachable  statement	37	None	replace
1080	[BUG]  [BUGGY]  return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  firstCfgNode;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	37	None	replace
1081	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
1082	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,DiGraphNode<Node,Branch>,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  gNode,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,DiGraphNode<Node,Branch>,Node,Node)	26	None	replace
1083	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<ControlFlowGraph<Node>>,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  cfgStack,  fallThrough,  n);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<ControlFlowGraph<Node>>,Node,Node)	26	None	replace
1084	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(n,  fallThrough);  [CE]  incomparable  types:  int  and  Branch  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeUtil.removeChild(n,  fallThrough);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1085	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  n.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	117	None	add
1086	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  ';'  expected	117	None	add
1087	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  incomparable  types:  int  and  Branch  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1088	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION));  [CE]  incomparable  types:  int  and  Branch  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1089	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  incomparable  types:  int  and  Branch  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1090	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	117	7	add
1091	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(n,  fallThrough);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	117	7	add
1092	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
1093	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  not  a  statement	1	None	add
1094	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
1095	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1L;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	122	None	replace
1096	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough  *  1;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	122	None	replace
1097	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1098	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1099	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fall	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1100	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1101	[BUG]  [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	luate(n,  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
1102	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	88	None	add
1103	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1104	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  getDeadExprStatementSafely(n);  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  getDeadExprStatementSafely(n);  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  getDeadExprStatementSafely(n);  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1105	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1106	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1107	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1108	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1L;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1L;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1L;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
1109	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  *  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
1110	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1+1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1+1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1+1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
1111	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
1112	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	81	None	replace
1113	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
1114	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
1115	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()	  	non-compiled	[CE]  ';'  expected	152	None	add
1116	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree()	  	non-compiled	[CE]  ';'  expected	152	None	add
1117	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  first  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  cannot  find  symbol  first	49	None	replace
1118	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  first;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
1119	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
1120	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode.nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
1121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
1122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  gNode,  fallThrough,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  gNode,  fallThrough,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
1123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph(),  outEdges);  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph(),  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph(),  outEdges);	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
1124	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  first  :  nextCfgNode;  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  first  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  first  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  first	160	None	replace
1125	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  1  :  nextCfgNode;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  1  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  1  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  incompatible  types	160	None	replace
1126	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  first  :  null;  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  first  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  first  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  first	184	None	replace
1127	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  lastCfgNode  :  null;  [CE]  cannot  find  symbol  lastCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  lastCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  lastCfgNode  :  null;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	184	None	replace
1128	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.remove();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	replace
1129	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	134	None	replace
1130	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  first,  fallThrough;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  first,  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  first,  fallThrough;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  ';'  expected	100	None	replace
1131	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  this  :  first;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  firstCfgNode?  this  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  this  :  first;	  return    fallThrough    <    nextCfgNode?    this    :    first;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	100	None	replace
1132	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  unreachable  statement	152	None	add
1133	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
1134	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	152	None	add
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	9	2	replace
1136	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	9	2	replace
1137	[BUG]  [BUGGY]  parent.replaceChild(n,  nextCfgNode);  [CE]  cannot  find  symbol  parent  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  parent.replaceChild(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	parent.replaceChild(n,  nextCfgNode);	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  parent	9	None	replace
1138	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	66	None	replace
1139	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	66	None	replace
1140	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	66	None	replace
1141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	n  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
1142	[BUG]  [BUGGY]  n  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	83	6	replace
1143	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
1144	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode)+  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode)+  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.add(nextCfgNode)+  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	101	None	replace
1145	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  this  :  fallThrough;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  this  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    this    :    fellThrough;    	non-compiled	[CE]  incompatible  types	151	None	replace
1146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    nextCfgNode;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	replace
1147	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  firstCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  firstCfgNode);	  return    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	25	None	replace
1148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  outEdges);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<DiGraphEdge<Node,Branch>>)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  outEdges);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  outEdges);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<DiGraphEdge<Node,Branch>>)	23	None	replace
1149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode,  first);	  NodeTraversal.traverse(compiler,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
1150	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.removeFirst();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.removeFirst();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.removeFirst();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.removeFirst();    	non-compiled	[CE]  ';'  expected	60	None	replace
1151	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	159	None	add
1152	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
1153	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	159	None	add
1154	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode    &&    nextCfgNode    ==    fallThrough?    fallThrough    :    nextCfgNode;    Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	159	None	add
1155	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementsafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  incomparable  types:  int  and  Branch  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	27	None	add
1157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  incomparable  types:  int  and  Branch  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	27	None	add
1158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,    fallThrough,    this);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION);  NodeTraversal.traverse(compiler,  fallThrough,  this);	  	non-compiled	[CE]  cannot  find  symbol  first	27	None	add
1159	[BUG]  [BUGGY]  return  nextCfgNode  >=  fallThrough?  this  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  >=  fallThrough?  this  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  >=  fallThrough?  this  :  nextCfgNode;	  return    nextCfgNode    <    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	74	None	replace
1160	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	107	None	replace
1161	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough  *  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
1162	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode  ||  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode  ||  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode  ||  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
1163	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
1164	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.NAME?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.NAME?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.NAME?  nextCfgNode  :  fallThrough;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
1165	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.BLOCK?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.BLOCK?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.BLOCK?  fallThrough  :  nextCfgNode;	  return    fallThrough    >    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	42	None	replace
1166	[BUG]  [BUGGY]  return  nextCfgNode.equals(collapseThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  collapseThrough  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(collapseThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(collapseThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  collapseThrough	178	None	replace
1167	[BUG]  [BUGGY]  return  nextCfgNode.equals(this.fallThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  fallThrough  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(this.fallThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(this.fallThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  fallThrough	178	None	replace
1168	[BUG]  [BUGGY]  return  nextCfgNode.equals(getThrough)?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  getThrough  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode.equals(getThrough)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode.equals(getThrough)?  nextCfgNode  :  fallThrough;	  return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  getThrough	178	None	replace
1169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	154	2	replace
1170	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	154	2	replace
1171	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeUnconditionalBranching(nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeUnconditionalBranching(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
1172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	19	7	add
1173	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	19	7	add
1174	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  removeCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  removeCfgNode(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    removeCfgNode(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
1175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	19	7	add
1176	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	19	7	add
1177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	19	7	add
1178	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	19	7	add
1179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	7	add
1180	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	19	7	add
1181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  lastCfgNode,  fallThrough,  nextCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	26	None	replace
1182	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.removeFirst()  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
1183	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1184	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThr	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	65	None	replace
1185	[BUG]  [BUGGY]  n  =  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  n  =  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	n  =  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	106	None	replace
1186	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	106	7	replace
1187	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  nextCfgNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(1).getDestination().getValue()  ==  nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	106	7	replace
1188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	67	6	replace
1189	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	67	6	replace
1190	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  incompatible  types	93	None	replace
1191	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
1192	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	132	None	replace
1193	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	132	None	replace
1194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
1195	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	89	2	replace
1196	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
1197	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  if(  fallThrough.equals(nextCfgNode))  {  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  null;  }  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  if(  fallThrough.equals(nextCfgNode))  {  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  null;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    if(  fallThrough.equals(nextCfgNode))  {  return  nextCfgNode.equals(nextCfgNode)?  nextCfgNode  :  null;  }	  	non-compiled	[CE]  unreachable  statement	183	None	add
1198	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  not  a  statement	183	None	add
1199	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  Node  nextCfgNode  =  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    Node  nextCfgNode  =  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	183	None	add
1200	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  if(  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  }  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  if(  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    null;    if(  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  }	  	non-compiled	[CE]  illegal  start  of  type	183	None	add
1201	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.reverse(nextCfgNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.reverse(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.reverse(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
1202	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(nextCfgNode);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.get(nextCfgNode);	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough,    outEdges.size();    	non-compiled	[CE]  ';'  expected	58	None	replace
1203	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	70	None	add
1204	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    nextCfgNode    :    fallThrough;    if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  }	  	non-compiled	[CE]  unreachable  statement	70	None	add
1205	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getParent()  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getParent()  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode.getParent()  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
1206	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallsThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallsThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallsThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode.getNext()    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
1207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	29	10	add
1208	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	29	10	add
1209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	10	add
1210	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	29	10	add
1211	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  }  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
1212	[BUG]  [BUGGY]          n.removeChild(n.getNext());  parent.replaceChild(n,  fallThrough);  n.removeChild(n.getNext());  [CE]  cannot  find  symbol  parent  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  parent.replaceChild(n,  fallThrough);  n.removeChild(n.getNext());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    parent.replaceChild(n,  fallThrough);  n.removeChild(n.getNext());	  	non-compiled	[CE]  cannot  find  symbol  parent	29	None	add
1213	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  }  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  n.removeChild(n.getNext());  }	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
1214	[BUG]  [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  removeDeadExprStatementSafely(n);  [CE]  incomparable  types:  int  and  Branch  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(n.getNext());  n.removeChild(n.getNext());  }  else  {  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(n.getNext());    n.removeChild(n.getNext());  }  else  {  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  removeDeadExprStatementSafely(n);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	29	None	add
1215	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION);	  return    nextCfgNode;    Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	109	None	replace
1216	[BUG]  [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1217	[BUG]  [BUGGY]  parent.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  parent  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  parent.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	parent.removeChild(nextCfgNode);	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
1218	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  firstCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	8	None	add
1219	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first,  fallThrough;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first,  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  first,  fallThrough;	  return    fallThrough    <    nextCfgNode?    null    :    first;    	non-compiled	[CE]  ';'  expected	104	None	replace
1220	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	48	None	replace
1221	[BUG]  [BUGGY]  return  fallThrough  ==  firstCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  firstCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  firstCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	164	None	replace
1222	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getParent();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
1223	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getFirstChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getFirstChild();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
1224	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getParent();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getParent();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext()  &&  fallThrough  ==  nextCfgNode.getParent();	  return    fallThrough!=    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	56	None	replace
1225	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  null?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  null?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  nextCfgNode!=  null?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
1226	[BUG]  [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
1227	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	5	None	replace
1228	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(nextCfgNode,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1229	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(null,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(null,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1230	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(cfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(cfgNode,  nextCfgNode);	  return    collapseUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	128	None	replace
1231	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
1232	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clonePosition();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clonePosition();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.clonePosition();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
1233	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	119	None	replace
1234	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	64	None	replace
1235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  RuntimeException  	15	7	replace
1236	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  RuntimeException  	15	7	replace
1237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  RuntimeException  	15	7	replace
1238	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  RuntimeException  	15	7	replace
1239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
1240	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
1241	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  lastCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  lastCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  lastCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
1242	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  lastCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  lastCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  lastCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    lastCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	111	None	replace
1243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
1244	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
1245	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	63	None	replace
1246	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	120	None	replace
1247	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
1248	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	179	None	add
1249	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(cfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(cfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	126	None	replace
1250	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  removeUnconditionalBranching(cfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(cfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	126	None	replace
1251	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  ';'  expected	16	None	add
1252	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  }	  	non-compiled	[CE]  unreachable  statement	16	None	add
1253	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  first  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  first  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  first  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	16	None	add
1254	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	16	None	add
1255	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  ';'  expected	16	None	add
1256	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  not  a  statement	16	None	add
1257	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  >>  fallThrough?  null  :  nextCfgNode;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  >>  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  >>  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  ';'  expected	16	None	add
1258	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1259	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1260	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1261	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	177	None	add
1262	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  firstCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	12	None	add
1263	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getLastChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getLastChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getLastChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
1264	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild(),  fallThrough;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild(),  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild(),  fallThrough;	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	53	None	replace
1265	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getFirstChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild()  &&  fallThrough!=  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	53	None	replace
1266	[BUG]  [BUGGY]  return  fallThrough.removeUnconditionalBranching();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.removeUnconditionalBranching();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.removeUnconditionalBranching();	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1267	[BUG]  [BUGGY]  return  fallThrough.removeNoOpStatements(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.removeNoOpStatements(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.removeNoOpStatements(nextCfgNode);	  return    fallThrough.nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1268	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	181	None	add
1269	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(n);  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
1270	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  first.getNext();  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
1271	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough.equals(nextCfgNode)?    null    :    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(n.getDestination());  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	181	None	add
1272	[BUG]  [BUGGY]  NodeUtil.removeChild(previousCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  previousCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(previousCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(previousCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  previousCfgNode	170	None	replace
1273	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(. "   ");  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(. "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException(. "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
1274	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	replace
1275	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    if(nextCfgNode!=    fallThrough)    {    removeDeadExprStatementSafely(n);    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	replace
1276	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode    ==    null)    {    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    }    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	147	None	replace
1277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Node  first  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	188	6	replace
1278	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  first  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node    nextCfgNode    =    first.getNext();    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	188	6	replace
1279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	171	7	add
1280	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1);  NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	171	7	add
1281	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	171	None	add
1282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	171	10	add
1283	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(n);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  {  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	171	10	add
1284	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  incomparable  types:  int  and  Branch  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	171	None	add
1285	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe	  	non-compiled	[CE]  not  a  statement	171	None	add
1286	[BUG]  [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.  [CE]  <identifier>  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(nextCfgNode,  fallThrough);  NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(nextCfgNode,    fallThrough);    NodeUtil.removeChild(nextCfgNode,  fallThrough);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Branch.	  	non-compiled	[CE]  <identifier>  expected	171	None	add
1287	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild().getNext();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild().getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild().getNext();	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
1288	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getFirstChild();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext()  &&  fallThrough!=  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode.getNext();    	non-compiled	[CE]  incompatible  types	50	None	replace
1289	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    if(nextCfgNode!=    fallThrough)    {    return    tryRemoveUnconditionalBranching(computeFollowing(n));    }    	non-compiled	[CE]  ')'  expected	174	None	replace
1290	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough  ==  nextCfgNode.cloneTree();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough  ==  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough  ==  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
1291	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough!=  nextCfgNode.cloneTree();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough!=  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneTree()  ||  fallThrough!=  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.cloneTree();    	non-compiled	[CE]  incompatible  types	51	None	replace
1292	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  fallThrough  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  fallThrough  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  fallThrough  :  fallThrough;	  return    fallThrough    <    lastCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	112	None	replace
1293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	31	2	replace
1294	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	31	2	replace
1295	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  *  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	124	None	replace
1296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  nextCfgNode,  new  ControlFlowGraph());  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  nextCfgNode,  new  ControlFlowGraph());	          NodeTraversal.traverse(compiler,    fallThrough,    new    ControlFlowGraph());    	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	116	None	replace
1297	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode    &&    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	168	None	replace
1298	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  firstCfgNode;	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    nextCfgNode;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	36	None	replace
1299	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  lastCfgNode;	  return    nextCfgNode    <    fallThrough?    fallThrough    :    nextCfgNode;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
1300	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  :  expected	186	None	replace
1301	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode.getParent()  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode.getParent()  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  ||  fallThrough  ==  nextCfgNode.getParent()  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	186	None	replace
1302	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode,  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode,  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode,  tryRemoveUnconditionalBranching(nextCfgNode);	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
1303	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode.next();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough,  nextCfgNode.next();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode.next();	  return    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	130	None	replace
1304	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getNext();  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getNext();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	33	None	replace
1305	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode.toString();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode.toString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  nextCfgNode.toString();	  return    nextCfgNode    ==    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	86	None	replace
1306	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode);	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough,    nextCfgNode;    	non-compiled	[CE]  ';'  expected	166	None	replace
1307	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  firstCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  firstCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  firstCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  firstCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	4	None	add
1308	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [CE]  cannot  find  symbol  firstCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    removeDeadExprStatementSafely(n);    }    if(fallThrough  ==  nextCfgNode)  {  return  firstCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	4	None	add
1309	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  *  1;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
1310	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
1311	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
1312	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  first  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  first  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  first  =  nextCfgNode.getNext();  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	1	None	add
1313	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    fallThrough?    null    :    nextCfgNode;    Node  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  	non-compiled	[CE]  ';'  expected	1	None	add
1314	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	compilable	  [FE]  RuntimeException  	28	4	replace
1315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	compilable	  [FE]  RuntimeException  	28	4	replace
1316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  removeCfgNode);  [CE]  cannot  find  symbol  removeCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  removeCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  removeCfgNode);	  NodeTraversal.traverse(compiler,    fallThrough,    this);    	non-compiled	[CE]  cannot  find  symbol  removeCfgNode	28	None	replace
1317	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(nextCfgNode);  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
1318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	114	10	add
1319	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  removeDeadExprStatementSafely(n);	  	compilable	  [FE]  AssertionFailedError  	114	10	add
1320	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue()	  	non-compiled	[CE]  ';'  expected	114	None	add
1321	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	114	None	add
1322	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValu	  	non-compiled	[CE]  ';'  expected	114	None	add
1323	[BUG]  [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                n.removeChild(nextCfgNode);    n.removeChild(nextCfgNode);  }  else  {  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue	  	non-compiled	[CE]  ';'  expected	114	None	add
1324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	22	6	replace
1325	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  return    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	22	6	replace
1326	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(. "   ");  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(. "   ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException(. "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
1327	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  }	  	non-compiled	[CE]  unreachable  statement	68	None	add
1328	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
1329	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.cloneTree();  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	68	None	add
1330	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	21	None	add
1331	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1332	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1333	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  firstCfgNode  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1334	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  first  =  nextCfgNode.getNext();  return  tryRemoveUnconditionalBranching(computeFollowing(first));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1335	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  first  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  first  =  nextCfgNode.getFirstChild();  return  tryRemoveUnconditionalBranching(computeFollowing(first));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1336	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  unreachable  statement	21	None	add
1337	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  NodeTraversal.traverse(compiler,  n,  fallThrough);  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  NodeTraversal.traverse(compiler,  n,  fallThrough);  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    tryRemoveUnconditionalBranching(computeFollowing(n));    NodeTraversal.traverse(compiler,  n,  fallThrough);  return  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	21	None	add
1338	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1339	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1340	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	88	None	add
1341	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode    &&    nextCfgNode!=    fallThrough?    nextCfgNode    :    fallThrough;    Node  first  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	88	None	add
1342	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.redeclareVarsInsideBranching(n,  nextCfgNode);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1343	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  fallThrough);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.redeclareVarsInsideBranching(n,  fallThrough);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1344	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(n);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.redeclareVarsInsideBranching(n);	          NodeUtil.removeChild(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1345	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  n.removeChild(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  n.removeChild(nextCfgNode);	  return    nextCfgNode;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    n.removeChild(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	108	None	replace
1346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  firstCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  firstCfgNode,  fallThrough);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	113	None	replace
1347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  n,  nextCfgNode,  fallThrough);	          NodeTraversal.traverse(compiler,    n,    fallThrough);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	113	None	replace
1348	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  unreachable  statement	149	None	add
1349	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  fallThrough.cloneTree();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
1350	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough.cloneTree();    Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	149	None	add
1351	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	165	6	replace
1352	[BUG]  [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  RuntimeException  	165	6	replace
1353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	13	2	replace
1354	[BUG]  [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fallThrough    ==    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	13	2	replace
1355	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(nextCfgNode,  fallThrough);	  return    collapseUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  tryRemoveUnconditionalBranching(nextCfgNode);	  return    collapseUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
1357	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(nextCfgNode);	  return    collapseUnconditionalBranching(n);    	compilable	  [FE]  AssertionFailedError  	131	2	replace
1358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	11	7	replace
1359	[BUG]  [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	11	7	replace
1360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	11	7	replace
1361	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  fallThrough;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fallThrough!=    nextCfgNode)    {    return    nextCfgNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	11	7	replace
1362	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	47	None	replace
1363	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	117	None	add
1364	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);  [CE]  incomparable  types:  int  and  Branch  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  NodeUtil.removeChild(n,  fallThrough);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1365	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  NodeUtil.removeChild(n,  fallThrough);  }  else  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    NodeUtil.removeChild(n,  fallThrough);  }  else  if(nextCfgNode  ==  nextCfgNode)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  illegal  start  of  type	117	None	add
1366	[BUG]  [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]          NodeUtil.removeChild(n,  fallThrough);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	                NodeUtil.removeChild(n,    fallThrough);    Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	117	None	add
1367	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  first);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  first);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	172	None	replace
1368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeUtil.removeChild(nextCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	compilable	  [FE]  RuntimeException  	172	7	replace
1369	[BUG]  [BUGGY]  NodeUtil.removeChild(nextCfgNode,  nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  NodeUtil.removeChild(nextCfgNode,  nextCfgNode);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeUtil.removeChild(nextCfgNode,  nextCfgNode);	          NodeUtil.removeChild(nextCfgNode,    fallThrough);    	compilable	  [FE]  RuntimeException  	172	7	replace
1370	[BUG]  [BUGGY]  return  first  <  nextCfgNode?  fallThrough  :  first;  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  first  <  nextCfgNode?  fallThrough  :  first;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  first  <  nextCfgNode?  fallThrough  :  first;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    first;    	non-compiled	[CE]  cannot  find  symbol  first	110	None	replace
1371	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  first  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  <  nextCfgNode?  first  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  first  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    first;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	110	None	replace
1372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(n);    	compilable	  [FE]  RuntimeException  	20	7	replace
1373	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(n);    	compilable	  [FE]  RuntimeException  	20	7	replace
1374	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  collapsedThrough  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  collapsedThrough  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  collapsedThrough  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  collapsedThrough  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  collapsedThrough	61	None	replace
1375	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  first.getNext().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  first.getNext().getValue();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	72	None	add
1376	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode!=    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	72	None	add
1377	[BUG]  [BUGGY]  return  firstCfgNode!=  nextCfgNode?  null  :  firstCfgNode;  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  firstCfgNode!=  nextCfgNode?  null  :  firstCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  firstCfgNode!=  nextCfgNode?  null  :  firstCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node    firstCfgNode    =    nextCfgNode.getNext();    return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	157	None	replace
1378	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getFirstChild();  [CE]  variable  firstCfgNode  might  not  have  been  initialized  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  firstCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	non-compiled	[CE]  variable  firstCfgNode  might  not  have  been  initialized	37	None	replace
1379	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	7	replace
1380	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  return    nextCfgNode;    Node    firstCfgNode    =    nextCfgNode.getFirstChild();    	compilable	  [FE]  RuntimeException  	37	7	replace
1381	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  unreachable  statement	90	None	add
1382	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode?  fallThrough  :  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode    ==    nextCfgNode?    fallThrough    :    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode?  fallThrough  :  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	90	None	add
1383	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(nextCfgNode,  outEdges.size()  -  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(nextCfgNode,  outEdges.size()  -  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(nextCfgNode,  outEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
1384	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(n,  outEdges.size()  -  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  tryRemoveUnconditionalBranching(n,  outEdges.size()  -  1);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(n,  outEdges.size()  -  1);	  return    tryRemoveUnconditionalBranching(outEdges.size()    -    1);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
1385	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  first  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	44	None	replace
1386	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParser().cloneTree();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParser().cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  compiler.getParser().cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough.cloneTree();    	non-compiled	[CE]  ';'  expected	167	None	replace
1387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	163	2	replace
1388	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	163	2	replace
1389	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  first.getNext().getValue();	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	163	None	replace
1390	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    first.getNext().getValue();    return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	163	None	replace
1391	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  }	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
1392	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThr  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThr  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  return  fallThrough!=  nextCfgNode  :  fallThrough;  }  else  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThr	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    return    fallThrough!=    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  ';'  expected	46	None	replace
1393	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getString();  [CE]  incomparable  types:  Node  and  String  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getString()  &&  fallThrough!=  nextCfgNode.getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
1394	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext().getString();  [CE]  incomparable  types:  Node  and  String  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext().getString();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext().getString();	  return    fallThrough    ==    nextCfgNode.getString();    	non-compiled	[CE]  incomparable  types:  Node  and  String	52	None	replace
1395	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  collapseUnconditionalBranching(n,  firstCfgNode,  fallThrough);  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  firstCfgNode,  fallThrough);	  return    collapseUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	127	None	replace
1396	[BUG]  [BUGGY]  return  fallThrough  ==  firstCfgNode,  fallThrough?  this  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  firstCfgNode,  fallThrough?  this  :  fallThrough;  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  firstCfgNode,  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode,    fallThrough?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	87	None	replace
1397	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough  ==  nextCfgNode.cloneTree();  [CE]  first  has  private  access  in  Node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);      [BUGGY]  return  fallThrough  ==  nextCfgNode.first  &&  fallThrough  ==  nextCfgNode.cloneTree();  [BUGGY]      }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first  &&  fallThrough  ==  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode.first;    	non-compiled	[CE]  first  has  private  access  in  Node	55	None	replace
