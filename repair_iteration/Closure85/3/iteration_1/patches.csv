bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	10	2	replace
2	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  null  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	10	2	replace
3	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
5	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
7	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  removeDeadExprStatementSafely(n);  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
9	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
11	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
13	[BUG]  [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough  ==  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  AssertionFailedError  	7	2	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
15	[BUG]  [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	if(fallThrough!=  nextCfgNode)  {  return  nextCfgNode;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	7	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
17	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  null  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
18	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  >=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  null  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  removeDeadExprStatementSafely(n);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	removeDeadExprStatementSafely(n);	      	compilable	  [FE]  RuntimeException  	14	7	replace
20	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  removeDeadExprStatementSafely(n);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeDeadExprStatementSafely(n);	      	compilable	  [FE]  RuntimeException  	14	7	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  tryRemoveUnconditionalBranching(computeFollowing(n));	      	compilable	  [FE]  AssertionFailedError  	14	2	replace
22	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n));	      	compilable	  [FE]  AssertionFailedError  	14	2	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  nextCfgNode);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	14	None	replace
24	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  tryRemoveUnconditionalBranching(outEdges.size()  -  1);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(outEdges.size()  -  1);	      	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
25	[BUG]  [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	      	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  n);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  n);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	14	None	replace
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	NodeTraversal.traverse(compiler,  fallThrough,  this);	      	compilable	  [FE]  RuntimeException  	14	6	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  NodeTraversal.traverse(compiler,  fallThrough,  this);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	NodeTraversal.traverse(compiler,  fallThrough,  this);	      	compilable	  [FE]  RuntimeException  	14	6	replace
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      n.removeChild(n.getNext());  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	        n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	13	7	add
30	[BUG]  [BUGGY]      n.removeChild(n.getNext());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      n.removeChild(n.getNext());  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        n.removeChild(n.getNext());	  	compilable	  [FE]  RuntimeException  	13	7	add
31	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
32	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
33	[BUG]  [BUGGY]  return  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  firstCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  unreachable  statement	6	None	add
34	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
35	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
36	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
37	[BUG]  [BUGGY]  return  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  firstCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	6	None	add
38	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  nextCfgNode;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
39	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
40	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode.getNext()  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
41	[BUG]  [BUGGY]  return  fallThrough  <  firstCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  firstCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  firstCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	5	None	replace
42	[BUG]  [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	5	None	replace
43	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
44	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
45	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
46	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  ';'  expected	3	None	add
47	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
48	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  ';'  expected	3	None	add
49	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
50	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incompatible  types	18	None	replace
51	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.cloneTree();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incompatible  types	18	None	replace
52	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getString();  [CE]  incomparable  types:  Node  and  String  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.getString();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getString();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incomparable  types:  Node  and  String	18	None	replace
53	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getFirstChild();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incompatible  types	18	None	replace
54	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.nextCfgNode;	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	18	None	replace
55	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.first;  [CE]  first  has  private  access  in  Node  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.first;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.first;	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  first  has  private  access  in  Node	18	None	replace
56	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode.getNext();  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode.getNext();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incompatible  types	18	None	replace
57	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
58	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough,  outEdges.size();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.getNext();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
60	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.removeFirst();	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
61	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
62	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
63	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
64	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
65	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  ';'  expected	1	None	add
66	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  ';'  expected	1	None	add
67	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
69	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
71	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
73	[BUG]  [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
74	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  <  fallThrough?  this  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  this  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
75	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough  +  1;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
76	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  this  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  >=  nextCfgNode?  this  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  this  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	replace
77	[BUG]  [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  fallThrough;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode!=  fallThrough?  this  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode!=  fallThrough?  this  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	16	None	replace
78	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
79	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
80	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
81	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
82	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
83	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
84	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
85	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getLastChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
86	[BUG]  [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  fallThrough?  this  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	15	None	replace
87	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode,  fallThrough?  this  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	15	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
89	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode!=  fallThrough?  nextCfgNode  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
91	[BUG]  [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  ==  nextCfgNode?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
92	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
93	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
94	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
95	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
96	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
97	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
98	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getLastChild();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
99	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getLastChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
100	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  first;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  first;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	17	None	replace
101	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough  +  1;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
102	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  lastCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
103	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.nextCfgNode;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
104	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  first;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  first;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
105	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
106	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
107	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  nextCfgNode;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
108	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  n.removeChild(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
109	[BUG]  [BUGGY]  return  nextCfgNode;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  unreachable  statement	6	None	add
110	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  first;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  first;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode  :  first;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
111	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  lastCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  nextCfgNode  :  lastCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  nextCfgNode  :  lastCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
112	[BUG]  [BUGGY]  return  fallThrough  <  lastCfgNode?  nextCfgNode  :  fallThrough;  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  lastCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  lastCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	5	None	replace
113	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  fallThrough);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeTraversal.traverse(compiler,  n,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        NodeTraversal.traverse(compiler,  n,  fallThrough);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	13	None	add
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      n.removeChild(nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	        n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	13	7	add
115	[BUG]  [BUGGY]      n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      n.removeChild(nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        n.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	13	7	add
116	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph());  [CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph());  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        NodeTraversal.traverse(compiler,  fallThrough,  new  ControlFlowGraph());	  	non-compiled	[CE]  constructor  ControlFlowGraph  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	13	None	add
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeUtil.removeChild(n,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	        NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	13	7	add
118	[BUG]  [BUGGY]      NodeUtil.removeChild(n,  fallThrough);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeUtil.removeChild(n,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        NodeUtil.removeChild(n,  fallThrough);	  	compilable	  [FE]  RuntimeException  	13	7	add
119	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
120	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
121	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
122	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
123	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  first;  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  first;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  first;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
124	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
125	[BUG]  [BUGGY]  return  fallThrough  >=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  >=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  >=  nextCfgNode?  nextCfgNode  :  fallThrough;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	4	None	replace
126	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  removeUnconditionalBranching(nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	removeUnconditionalBranching(nextCfgNode);	  return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
127	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  collapseUnconditionalBranching(n,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  fallThrough);	  return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
128	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  collapseUnconditionalBranching(n,  nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n,  nextCfgNode);	  return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
129	[BUG]  [BUGGY]  return  fallThrough.nextCfgNode;  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.nextCfgNode;	  return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	7	None	replace
130	[BUG]  [BUGGY]  return  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough,  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough,  nextCfgNode;	  return    nextCfgNode;    	non-compiled	[CE]  ';'  expected	7	None	replace
131	[BUG]  [BUGGY]  return  collapseUnconditionalBranching(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  collapseUnconditionalBranching(n);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  collapseUnconditionalBranching(n);	  return    nextCfgNode;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
132	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
133	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
134	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
135	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode.getParent();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode.getParent();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode.getParent();	  return    fallThrough    ==    nextCfgNode;    	non-compiled	[CE]  incompatible  types	18	None	replace
136	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
137	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
138	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
139	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
140	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
141	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
142	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough  +  1;	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	12	None	replace
143	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
144	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
145	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
146	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
147	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  null)  {  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
148	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(n);  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	10	2	replace
150	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	10	2	replace
151	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fellThrough;  [CE]  cannot  find  symbol  fellThrough  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  this  :  fellThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  this  :  fellThrough;	  return    fallThrough!=    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  fellThrough	16	None	replace
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	12	6	replace
153	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode?  null  :  fallThrough.cloneTree();	  return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    	compilable	  [FE]  RuntimeException  	12	6	replace
154	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	11	None	add
155	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
156	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  first.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	11	None	add
157	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    null    :    fallThrough;    Node  firstCfgNode  =  nextCfgNode.getNext();  return  fallThrough!=  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	11	None	add
158	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	4	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
160	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough!=  nextCfgNode  &&  nextCfgNode  ==  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
161	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	3	None	add
162	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
163	[BUG]  [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough!=    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  first.getNext().getValue();  return  fallThrough!=  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	3	None	add
164	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	1	None	add
165	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  return  fallThrough  ==  nextCfgNode?  nextCfgNode  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
166	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	15	None	replace
167	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.cloneTree();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.cloneTree();  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  this  :  fallThrough.cloneTree();	  return    fallThrough    ==    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  incompatible  types	15	None	replace
168	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode  &&  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
169	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  ==  nextCfgNode?  first  :  fallThrough;	  return    fallThrough    ==    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  cannot  find  symbol  first	2	None	replace
170	[BUG]  [BUGGY]      NodeUtil.removeChild(nextCfgNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeUtil.removeChild(nextCfgNode);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        NodeUtil.removeChild(nextCfgNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	13	None	add
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	        NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	13	7	add
172	[BUG]  [BUGGY]      NodeUtil.removeChild(nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]      NodeUtil.removeChild(nextCfgNode,  fallThrough);  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	        NodeUtil.removeChild(nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	13	7	add
173	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode  ==  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
174	[BUG]  [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode;  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    nextCfgNode;    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if(nextCfgNode!=  fallThrough)  {  return  tryRemoveUnconditionalBranching(computeFollowing(n));  }	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	6	None	add
175	[BUG]  [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  nextCfgNode  <  fallThrough?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
176	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode  &&  nextCfgNode.getType()  ==  Token.FUNCTION?  fallThrough  :  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    nextCfgNode    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
178	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  fallThrough;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
180	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  fallThrough;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
182	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  null  :  nextCfgNode;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	add	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
184	[BUG]  [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough.equals(nextCfgNode)?  nextCfgNode  :  null;	  return    nextCfgNode;    	compilable	  [FE]  RuntimeException  	7	6	replace
185	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  this  :  fallThrough,  nextCfgNode;	  return    fallThrough    <    nextCfgNode?    this    :    fallThrough;    	non-compiled	[CE]  ';'  expected	17	None	replace
186	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  unreachable  statement	9	None	add
187	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  nextCfgNode.getParent();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
188	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  first.getNext();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
189	[BUG]  [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return    fallThrough    ==    nextCfgNode?    null    :    fallThrough;    Node  nextCfgNode  =  outEdges.get(0).getDestination();  return  fallThrough  ==  nextCfgNode?  null  :  fallThrough;	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	9	None	add
190	[BUG]  [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.next;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);    [BUGGY]  return  fallThrough  <  nextCfgNode?  null  :  fallThrough.next;  [BUGGY]    }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	187	187	2	replace	return  fallThrough  <  nextCfgNode?  null  :  fallThrough.next;	  return    fallThrough    <    nextCfgNode?    null    :    fallThrough;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
