bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  first,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  first,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  first,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
2	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  n,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  n,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
3	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
4	[BUG]  [BUGGY]  removeDeadExprStatementSafely(dead,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  dead  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(dead,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(dead,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	16	None	replace
5	[BUG]  [BUGGY]  removeDeadExprStatementSafely(gNode,  fallThrough,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(gNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(gNode,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
6	[BUG]  [BUGGY]  removeDeadExprStatement(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(n,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
7	[BUG]  [BUGGY]  removeDeadExprStatement(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(null,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(null,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
8	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	82	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	82	None	replace
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());	  	compilable	  [FE]  RuntimeException  	100	6	add
14	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());	  	compilable	  [FE]  RuntimeException  	100	6	add
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	100	6	add
16	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	100	6	add
17	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	100	6	add
19	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	100	6	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());	  	compilable	  [FE]  RuntimeException  	100	6	add
21	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());	  	compilable	  [FE]  RuntimeException  	100	6	add
22	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
23	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
24	[BUG]  [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
25	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
26	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
27	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfgNode.cloneTree());  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfgNode.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  curCfgNode.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	135	None	replace
28	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode.cloneTree(),  nextCfgNode);	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
29	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode.cloneTree(),  fallThrough);	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
30	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough.cloneTree());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
31	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  cfgStack.cloneTree());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  cfgStack.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  cfgStack.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
32	[BUG]  [BUGGY]  removeDeadCfgNode(n.getFirstChild(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getFirstChild(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getFirstChild(),  nextCfgNode);	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
33	[BUG]  [BUGGY]  removeDeadCfgNode(n,  nextCfgNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  nextCfgNode.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  nextCfgNode.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
34	[BUG]  [BUGGY]  removeDeadCfgNode(n.getFirstChild(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getFirstChild(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getFirstChild(),  fallThrough);	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
35	[BUG]  [BUGGY]  removeDeadCfgNode(n.getLastChild());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getLastChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getLastChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
36	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
37	[BUG]  [BUGGY]  RemoveDeadCfgNode(n,  nextCfgNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(n,  nextCfgNode.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(n,  nextCfgNode.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
38	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(n.getNext()  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	143	7	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	143	7	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
43	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
44	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
46	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
47	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode  +  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode  +  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
48	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  first);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  first);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
49	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  lastCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  lastCfgNode);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
50	[BUG]  [BUGGY]  removeDeadExprStatementSafely(deadCfgNode  +  fallThrough);  [CE]  cannot  find  symbol  deadCfgNode  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(deadCfgNode  +  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(deadCfgNode  +  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  deadCfgNode	117	None	replace
51	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(n);	  tryRemoveUnconditionalBranching(curCfgNode);    	compilable	  [FE]  StackOverflowError  	146	7	replace
52	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n);  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(n);	  tryRemoveUnconditionalBranching(curCfgNode);    	compilable	  [FE]  StackOverflowError  	146	7	replace
53	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nullCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nullCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nullCfgNode);	  tryRemoveUnconditionalBranching(curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	146	None	replace
54	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(outEdges);	  tryRemoveUnconditionalBranching(curCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	146	None	replace
55	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
56	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
57	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
58	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
59	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
60	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  incomparable  types:  int  and  Branch  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	176	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
64	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
65	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
66	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
67	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
69	[BUG]  [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	compilable	  [FE]  RuntimeException  	180	6	add
71	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	compilable	  [FE]  RuntimeException  	180	6	add
72	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  TryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  TryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    TryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
73	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  attemptRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  attemptRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    attemptRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
74	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  return  fallThrough;  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  return  fallThrough;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  return  fallThrough;	  	non-compiled	[CE]  unreachable  statement	180	None	add
75	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  findUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  findUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    findUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
76	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  getUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  getUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    getUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
77	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(n,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(n,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	47	None	replace
78	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(outEdges,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(outEdges,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(outEdges,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	47	None	replace
79	[BUG]  [BUGGY]  RemoveDeadCfgNode(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(first,  nextCfgNode,  nextCfgNode);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	169	None	replace
80	[BUG]  [BUGGY]  RemoveDeadCfgNode(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(lastCfgNode,  nextCfgNode);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	169	None	replace
81	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  first);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	169	None	replace
82	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  nextCfgNode.cloneTree());	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
83	[BUG]  [BUGGY]  RemoveDeadCfgNode(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(curCfgNode,  nextCfgNode);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	169	None	replace
84	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  lastCfgNode);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	169	None	replace
85	[BUG]  [BUGGY]  removeCfgNode(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(n,  nextCfgNode);	  removeCfgNode(nextCfgNode,    secondCfgNode);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
86	[BUG]  [BUGGY]  removeCfgNode(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(null,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(null,  nextCfgNode);	  removeCfgNode(nextCfgNode,    secondCfgNode);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	49	7	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	49	7	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	49	7	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	49	7	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
94	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	49	None	replace
95	[BUG]  [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(outEdges,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
96	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  outEdges);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
97	[BUG]  [BUGGY]  removeUnconditionalBranching(last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(last,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(last,  nextCfgNode);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	72	None	replace
98	[BUG]  [BUGGY]  removeUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
99	[BUG]  [BUGGY]  removeDeadExprStatement(node,  nextCfgNode);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(node,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(node,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    secondCfgNode);    	non-compiled	[CE]  cannot  find  symbol  node	167	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	92	7	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough!=  nextCfgNode);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	92	7	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	92	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	92	7	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	92	7	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	92	7	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	92	7	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	92	None	replace
108	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	137	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	137	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	137	None	replace
111	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	137	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
113	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExpr  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExpr  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExpr	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDead  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDead  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDead	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
116	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	118	None	replace
117	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	118	None	replace
118	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null  ||  nextCfgNode.	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  n);	  Preconditions.checkState(nextCfgNode    ==    curCfgNode);    	compilable	  [FE]  RuntimeException  	93	7	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  n);	  Preconditions.checkState(nextCfgNode    ==    curCfgNode);    	compilable	  [FE]  RuntimeException  	93	7	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);	  Preconditions.checkState(nextCfgNode    ==    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	93	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  noOpStatements);  [CE]  cannot  find  symbol  noOpStatements  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  noOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  noOpStatements);	  Preconditions.checkState(nextCfgNode    ==    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	93	None	replace
123	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  curCfgNode,  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  curCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  curCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	18	None	replace
124	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  lastCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  lastCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	18	None	replace
125	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  outEdges,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  outEdges,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  outEdges,  fallThrough);	  removeDeadExprStatementSafely(n,    firstCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	18	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
127	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
128	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	120	None	replace
129	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeUnconditionalBranching(nextCfgNode);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeUnconditionalBranching(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
131	[BUG]  [BUGGY]  removeDeadFunctionStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadFunctionStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadFunctionStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
132	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getNext();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
133	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getNext();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
134	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
135	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext(),  fallThrough;	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
136	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext()  -  1;  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext()  -  1;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext()  -  1;	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
137	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	45	10	add
139	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	45	10	add
140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	45	10	add
141	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	45	10	add
142	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
143	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf	  	non-compiled	[CE]  ')'  expected	45	None	add
144	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
145	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
146	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	45	None	add
147	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType	  	non-compiled	[CE]  not  a  statement	45	None	add
148	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [CE]  incomparable  types:  int  and  Branch  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	142	None	replace
151	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	79	7	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	79	7	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	79	None	replace
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	79	7	replace
166	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
167	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
168	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
169	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode),  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode),  fallThrough);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	182	None	replace
170	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
171	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	7	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	7	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	7	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	44	7	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	86	7	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	compilable	  [FE]  RuntimeException  	86	7	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	86	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  curCfgNode);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	86	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCf    	non-compiled	[CE]  ';'  expected	121	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCf    	non-compiled	[CE]  ';'  expected	121	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	54	7	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  RuntimeException  	54	7	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
192	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  nextCfgNode.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
193	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode.cloneTree(),  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
194	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfgNode.cloneTree());  [CE]  cannot  find  symbol  curCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfgNode.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  curCfgNode.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	179	None	replace
195	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode.cloneTree(),  fallThrough);	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
196	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.cloneTree());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  compiler.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
197	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough.cloneTree());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
198	[BUG]  [BUGGY]  removeUnconditionalBranching(n.getNext(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(n.getNext(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n.getNext(),  nextCfgNode);	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
199	[BUG]  [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n,  nextCfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
200	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgNode.getNext());  [CE]  cannot  find  symbol  cfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(cfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(cfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol  cfgNode	57	None	replace
201	[BUG]  [BUGGY]  removeUnconditionalBranching(outEdges.getNext());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(outEdges.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(outEdges.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
202	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
203	[BUG]  [BUGGY]  removeUnconditionalBranching(n.getNext(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(n.getNext(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n.getNext(),  fallThrough);	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
204	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
205	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	7	None	replace
206	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	7	None	replace
207	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
208	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
209	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  RuntimeException  	88	7	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  fallThrough);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  RuntimeException  	88	7	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  fallThrough,  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  AssertionFailedError  	88	7	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough,  nextCfgNode);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  fallThrough,  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  AssertionFailedError  	88	7	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  null);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  AssertionFailedError  	88	7	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  null);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  AssertionFailedError  	88	7	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  &&  nextCfgNode.getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  &&  nextCfgNode.getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  fallThrough  &&  nextCfgNode.getType()  ==  Branch.UNCOND);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	88	None	replace
217	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
218	[BUG]  [BUGGY]  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
219	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	102	None	replace
220	[BUG]  [BUGGY]  removeDeadExprStatementSafely(firstCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(firstCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(firstCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	102	None	replace
221	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
222	[BUG]  [BUGGY]  removeCfgNode(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(cfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(cfgNode,  nextCfgNode);	  removeCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	26	None	replace
223	[BUG]  [BUGGY]  RemoveCfgNode(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveCfgNode(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveCfgNode(nextCfgNode,  fallThrough);	  removeCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
224	[BUG]  [BUGGY]  removeCfgNode(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(curCfgNode,  nextCfgNode);	  removeCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	26	None	replace
225	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  fallThrough);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
226	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  nextCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
227	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  first);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	128	None	replace
228	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  lastCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	128	None	replace
229	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  curCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	128	None	replace
230	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  n);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
231	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(curCfgNode,  nextCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	128	None	replace
232	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
233	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
234	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
235	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
236	[BUG]  [BUGGY]  removeDeadCfgNode(n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  fallThrough,  nextCfgNode);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
237	[BUG]  [BUGGY]  removeDeadCfgNode(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  nextCfgNode,  fallThrough);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
238	[BUG]  [BUGGY]  removeDeadCfgNode(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(first,  nextCfgNode,  fallThrough);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	109	None	replace
239	[BUG]  [BUGGY]  removeDeadCfgNode(first,  n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(first,  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(first,  n,  fallThrough);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	109	None	replace
240	[BUG]  [BUGGY]  RemoveDeadCfgNode(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(n,  nextCfgNode,  fallThrough);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
241	[BUG]  [BUGGY]  removeDeadCfgNode(n,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  fallThrough,  curCfgNode);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	109	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  collapseThrough);  [CE]  cannot  find  symbol  collapseThrough  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  collapseThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  collapseThrough);	  Preconditions.checkState(nextCfgNode    ==    lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  collapseThrough	150	None	replace
243	[BUG]  [BUGGY]  removeUnconditionalBranching(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(lastCfgNode,  nextCfgNode);	  removeUnconditionalBranching(curCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	147	None	replace
244	[BUG]  [BUGGY]  removeCfgNode(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(lastCfgNode,  nextCfgNode);	  removeCfgNode(nextCfgNode,    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	28	None	replace
245	[BUG]  [BUGGY]  removeCfgNode(currentCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  currentCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(currentCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(currentCfgNode,  nextCfgNode);	  removeCfgNode(nextCfgNode,    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  currentCfgNode	28	None	replace
246	[BUG]  [BUGGY]  removeDeadExprStatementSafely(cfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(cfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(cfgNode,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    first,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	133	None	replace
247	[BUG]  [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  deadCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    first,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  deadCfgNode	133	None	replace
248	[BUG]  [BUGGY]  attemptRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  attemptRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	attemptRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    attemptRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
249	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(firstCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    attemptRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	114	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
251	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(n.getNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	80	None	replace
255	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	7	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	7	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	7	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	46	7	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()  ==  null  ||  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  1);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	84	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  curCfgNode,  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  curCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  curCfgNode,  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	84	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  0);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  0);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  0);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	84	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  1);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  >  1);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	84	None	replace
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  n,  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	compilable	  [FE]  RuntimeException  	84	7	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n,  fallThrough);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  n,  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	compilable	  [FE]  RuntimeException  	84	7	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough)  {	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  ';'  expected	84	None	replace
269	[BUG]  [BUGGY]  RemoveDeadExprStatement(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatement(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatement(nextCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
270	[BUG]  [BUGGY]  removeDeadExprStatement(nullCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nullCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nullCfgNode,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	64	None	replace
271	[BUG]  [BUGGY]  removeDeadExprStatement(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(cfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(cfgNode,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	64	None	replace
272	[BUG]  [BUGGY]  removeDeadExprStatement(nullCfgNode,  fallThrough);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nullCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nullCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	64	None	replace
273	[BUG]  [BUGGY]  removeUnconditionalBranching(curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(curCfgNode);	  removeUnconditionalBranching(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	132	None	replace
274	[BUG]  [BUGGY]  removeUnconditionalBranching(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(null);	  removeUnconditionalBranching(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
275	[BUG]  [BUGGY]  removeUnconditionalBranching(nullCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nullCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nullCfgNode);	  removeUnconditionalBranching(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	132	None	replace
276	[BUG]  [BUGGY]  removeUnconditionalBranching(outEdges);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(outEdges);	  removeUnconditionalBranching(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
277	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  cfgNode,  fallThrough);  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  cfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  cfgNode,  fallThrough);	  removeDeadExprStatementSafely(cfgNode,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	134	None	replace
278	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(cfgNode,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	134	None	replace
279	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(first,  n),  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	6	None	replace
280	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
281	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
282	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
284	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	97	None	replace
285	[BUG]  [BUGGY]  noOpStatements.remove(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  noOpStatements  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  noOpStatements.remove(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	noOpStatements.remove(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	97	None	replace
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	48	10	add
287	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	48	10	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	48	10	add
289	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	48	10	add
290	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
291	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
292	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
293	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	48	None	add
294	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.	  	non-compiled	[CE]  not  a  statement	48	None	add
295	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
296	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
297	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
298	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
300	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
302	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
304	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
305	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  curCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	36	None	replace
306	[BUG]  [BUGGY]  removeDeadExprStatementSafely(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(curCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	105	None	replace
307	[BUG]  [BUGGY]  removeDeadExprStatementSafely(deadThrough,  nextCfgNode);  [CE]  cannot  find  symbol  deadThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(deadThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(deadThrough,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  deadThrough	105	None	replace
308	[BUG]  [BUGGY]  removeDeadExprStatementSafely(cfgStack,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(cfgStack,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(cfgStack,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
309	[BUG]  [BUGGY]  removeDeadExprStatementSafely(fallThrough,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
310	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
311	[BUG]  [BUGGY]  removeDeadExprStatementSafely(outEdges,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(outEdges,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(outEdges,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
312	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    firstCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	170	None	replace
313	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  firstCfgNode);	  removeDeadExprStatementSafely(n,    firstCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	170	None	replace
314	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  lastCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    firstCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	170	None	replace
315	[BUG]  [BUGGY]  Deque  <  Node>  first  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	compilable	  [FE]  RuntimeException  	172	7	replace
317	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	compilable	  [FE]  RuntimeException  	172	7	replace
318	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  fallThrough));  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  fallThrough));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
319	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
320	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
321	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	42	7	replace
323	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);  n.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	42	7	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	42	7	replace
325	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	42	7	replace
326	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  n,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  n,  fallThrough);	  removeDeadExprStatementSafely(first,    n,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	17	None	replace
327	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  secondCfgNode,  fallThrough);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  secondCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  secondCfgNode,  fallThrough);	  removeDeadExprStatementSafely(first,    n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	17	None	replace
328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
329	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
331	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
332	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FU  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FU  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FU	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	155	None	replace
333	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
334	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
335	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	155	None	replace
336	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	155	None	replace
337	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	4	None	replace
338	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(cfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(cfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	4	None	replace
339	[BUG]  [BUGGY]  removeDeadCfgNode(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(curCfgNode,  nextCfgNode);	  removeDeadCfgNode(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	108	None	replace
340	[BUG]  [BUGGY]  removeDeadCfgNode(n,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  curCfgNode);	  removeDeadCfgNode(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	108	None	replace
341	[BUG]  [BUGGY]  removeNoOpStatements(nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeNoOpStatements(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeNoOpStatements(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	41	2	add
343	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	41	2	add
344	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
345	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    attemptRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
346	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
347	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
348	[BUG]  [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  deadCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(deadCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(deadCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  deadCfgNode	19	None	replace
349	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getNext(),  nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext(),  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getNext(),  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(deadCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
350	[BUG]  [BUGGY]  removeDeadExprStatementSafely(negCfgNode,  fallThrough);  [CE]  cannot  find  symbol  negCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(negCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(negCfgNode,  fallThrough);	  removeDeadExprStatementSafely(deadCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  negCfgNode	19	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(curCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(curCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(curCfgNode  ==  nextCfgNode);	  Preconditions.checkState(lastCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	149	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);	  Preconditions.checkState(lastCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(first!=  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first!=  nextCfgNode);	  Preconditions.checkState(lastCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	149	None	replace
354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getLastChild();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
355	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
357	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  n.getNext();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	7	replace
359	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getNext();  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  n.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  n.getNext();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	7	replace
360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.cloneTree();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
361	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.cloneTree();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	7	replace
363	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode!=  null?  nextCfgNode.getNext()  :  null;	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  AssertionFailedError  	33	7	replace
364	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getNext(),  fallThrough;	          Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  fallThrough  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	33	None	replace
365	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(firstCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	112	None	replace
366	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
367	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first);  TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
368	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode  +  fallThrough,  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode  +  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode  +  fallThrough,  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  +  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  first);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  first);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  lastCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  lastCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges.size());  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges.size());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges.size());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
375	[BUG]  [BUGGY]  removeDeadCfgNode(n.getNext(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getNext(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getNext(),  nextCfgNode);	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
376	[BUG]  [BUGGY]  removeDeadCfgNode(n,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  nextCfgNode.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
377	[BUG]  [BUGGY]  removeDeadCfgNode(n.getNext(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getNext(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getNext(),  fallThrough);	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
378	[BUG]  [BUGGY]  removeDeadCfgNode(n.getNext()  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(n.getNext()  +  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getNext()  +  fallThrough);	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	110	None	replace
379	[BUG]  [BUGGY]  removeDeadCfgNode(cfgNode.getNext());  [CE]  cannot  find  symbol  cfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgNode.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol  cfgNode	110	None	replace
380	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  lastCfgNode);	  removeDeadExprStatementSafely(n,    first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	136	None	replace
381	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  n,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  n,  nextCfgNode);	  removeDeadExprStatementSafely(n,    first,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	136	None	replace
382	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	163	None	replace
383	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  finallyCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  finallyCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  finallyCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	163	None	replace
384	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  firstCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  firstCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  firstCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	163	None	replace
385	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  n.setString(computeFollowing(nextCfgNode));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  n.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  n.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	163	None	replace
386	[BUG]  [BUGGY]  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	163	None	replace
387	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
388	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough,  curCfgNode);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	67	None	replace
389	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough,  first);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	67	None	replace
390	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
391	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough,  lastCfgNode);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	67	None	replace
392	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	67	None	replace
393	[BUG]  [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(null,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
394	[BUG]  [BUGGY]  removeDeadExprStatement(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(lastCfgNode,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	63	None	replace
395	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nCfgNode);  [CE]  cannot  find  symbol  nCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nCfgNode);	  tryRemoveUnconditionalBranching(first);    	non-compiled	[CE]  cannot  find  symbol  nCfgNode	144	None	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(null);	  tryRemoveUnconditionalBranching(first);    	compilable	  [FE]  AssertionFailedError  	144	7	replace
397	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(null);	  tryRemoveUnconditionalBranching(first);    	compilable	  [FE]  AssertionFailedError  	144	7	replace
398	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(node);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(node);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(node);	  tryRemoveUnconditionalBranching(first);    	non-compiled	[CE]  cannot  find  symbol  node	144	None	replace
399	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
400	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  first);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	22	None	replace
401	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  first,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	22	None	replace
402	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
403	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  curCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	22	None	replace
404	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(lastCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	20	None	replace
405	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getCfgNode(),  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getCfgNode(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getCfgNode(),  fallThrough);	  removeDeadExprStatementSafely(lastCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION,  fallThrough);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
412	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(cfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(cfgNode,  nextCfgNode);	  removeUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	68	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	174	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  AssertionFailedError  	174	7	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  AssertionFailedError  	174	7	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getChildCount()  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Node	174	None	replace
418	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
419	[BUG]  [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
421	[BUG]  [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
422	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	101	None	replace
423	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	101	None	replace
424	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n.removeChild(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
425	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
426	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	119	None	replace
427	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(n	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
430	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	119	None	replace
431	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
432	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  first);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	24	None	replace
433	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  curCfgNode);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	24	None	replace
434	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	24	None	replace
435	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
436	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  outEdges);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
437	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  curCfg);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough,  curCfg);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough,  curCfg);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
438	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	6	replace
439	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	6	replace
440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
441	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
442	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
444	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	158	None	replace
445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
446	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
447	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  cannot  find  symbol  curCfgNode  [FE]                          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	158	None	replace
448	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  cannot  find  symbol  [FE]                            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	73	2	add
450	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	73	2	add
451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	73	7	add
452	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	73	7	add
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	73	7	add
454	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	73	7	add
455	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	add
456	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	add
457	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	73	None	add
458	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode;	  	non-compiled	[CE]  ')'  expected	73	None	add
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	compilable	  [FE]  AssertionFailedError  	87	2	add
460	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	compilable	  [FE]  AssertionFailedError  	87	2	add
461	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
462	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
463	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
464	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Preconditions.checkState(nextCfgNode!=  fallThrough);	  	compilable	  [FE]  RuntimeException  	87	7	add
465	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Preconditions.checkState(nextCfgNode!=  fallThrough);	  	compilable	  [FE]  RuntimeException  	87	7	add
466	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getNext();  preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
467	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getLastChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
468	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
469	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	75	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	75	None	replace
471	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	75	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	75	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	75	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	75	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	173	2	add
476	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	173	2	add
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  RuntimeException  	173	7	add
478	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  RuntimeException  	173	7	add
479	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	173	None	add
480	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	  	non-compiled	[CE]  ')'  expected	173	None	add
481	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	  	non-compiled	[CE]  ')'  expected	173	None	add
482	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	173	None	add
483	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	173	None	add
484	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(compute	  	non-compiled	[CE]  ')'  expected	173	None	add
485	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	162	None	replace
486	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
487	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
488	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(1).getDestination().getValu	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	162	None	replace
489	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
490	[BUG]  [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
491	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	162	None	replace
492	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue();  [CE]  ')'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ')'  expected	162	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
495	[BUG]  [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
497	[BUG]  [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(compute  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(compute  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(compute	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
499	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    curCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	104	None	replace
500	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  secondCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  secondCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  secondCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    curCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	104	None	replace
501	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  incomparable  types:  int  and  Branch  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	139	None	replace
504	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
505	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
507	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
508	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
509	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
510	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
511	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	140	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	140	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  incomparable  types:  int  and  Branch  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	140	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
521	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	175	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  incomparable  types:  int  and  Branch  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	175	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	175	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	175	None	replace
525	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	175	None	replace
526	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	175	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	85	7	add
529	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	85	7	add
530	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	85	None	add
531	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  >>  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	85	None	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	85	7	add
533	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	85	7	add
534	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  [Delete]  nextCfgNode);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  [Delete]  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  [Delete]  nextCfgNode);	  	non-compiled	[CE]  ')'  expected	85	None	add
535	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  [BUGGY]  nextCfgNode);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  [BUGGY]  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  [BUGGY]  nextCfgNode);	  	non-compiled	[CE]  ')'  expected	85	None	add
536	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
537	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
538	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
540	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  incomparable  types:  int  and  Branch  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	141	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	141	None	replace
543	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
544	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getNext();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  firstCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  secondCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  secondCfgNode  =  nextCfgNode.getNext();	  	compilable	  [FE]  RuntimeException  	32	6	add
546	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  secondCfgNode  =  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  secondCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  secondCfgNode  =  nextCfgNode.getNext();	  	compilable	  [FE]  RuntimeException  	32	6	add
547	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
548	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  secondCfgNode.getNext();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  secondCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  firstCfgNode  =  secondCfgNode.getNext();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
549	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  lastCfgNode.getNext();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  lastCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  firstCfgNode  =  lastCfgNode.getNext();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
550	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getParent();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getParent();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  firstCfgNode  =  nextCfgNode.getParent();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
551	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getPrevious();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Node  firstCfgNode  =  nextCfgNode.getPrevious();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Node  firstCfgNode  =  nextCfgNode.getPrevious();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
552	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
553	[BUG]  [BUGGY]  RemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(first,  nextCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	178	None	replace
554	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  fallThrough);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
555	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  curCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	178	None	replace
556	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  first);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	178	None	replace
557	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  lastCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	178	None	replace
558	[BUG]  [BUGGY]  RemoveUnconditionalBranching(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(curCfgNode,  nextCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	178	None	replace
559	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(last,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	106	None	replace
560	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	non-compiled	[CE]  unreachable  statement	116	None	replace
561	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  return  fallThrough;  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  return  fallThrough;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  return  fallThrough;	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	116	None	replace
562	[BUG]  [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(null,  nextCfgNode,  first);	  removeUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	56	None	replace
563	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
564	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
565	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
566	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCON  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCON  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCON	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  ')'  expected	153	None	replace
567	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getNext());  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
568	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	153	None	replace
569	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
570	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	94	6	add
571	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	94	6	add
572	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
573	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(n  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(n	  	non-compiled	[CE]  ';'  expected	94	None	add
574	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	94	None	add
575	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	94	None	add
576	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(	  	non-compiled	[CE]  ';'  expected	94	None	add
577	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	94	None	add
578	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  deleteDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  deleteDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  deleteDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
579	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	53	10	add
580	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	53	10	add
581	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	53	10	add
582	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	53	10	add
583	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
584	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
585	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
586	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	53	None	add
587	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf	  	non-compiled	[CE]  ')'  expected	53	None	add
588	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType	  	non-compiled	[CE]  not  a  statement	53	None	add
589	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
590	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough,  curCfgNode);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	60	None	replace
591	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough,  first);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	60	None	replace
592	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  nextCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
593	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough,  lastCfgNode);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	60	None	replace
594	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough,  outEdges);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
595	[BUG]  [BUGGY]  removeDeadExprStatement(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(first,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	61	None	replace
596	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  firstCfgNode);	  removeDeadExprStatement(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	61	None	replace
597	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	125	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(compute	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
605	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
606	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
609	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	51	10	add
611	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	51	10	add
612	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	51	10	add
613	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	51	10	add
614	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
615	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	51	None	add
616	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
617	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.	  	non-compiled	[CE]  not  a  statement	51	None	add
618	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCf  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCf	  	non-compiled	[CE]  ')'  expected	51	None	add
619	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION	  	non-compiled	[CE]  ')'  expected	51	None	add
620	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
621	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	160	None	replace
623	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  nextCfgNode  =  outEdges.get(0).getDestination().getValu	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	160	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
626	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
627	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
628	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.firstCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.firstCfgNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	21	None	replace
629	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getFirstChild(),  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getFirstChild(),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getFirstChild(),  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	21	None	replace
630	[BUG]  [BUGGY]  removeDeadExprStatementSafely(curCfgNode,  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(curCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(curCfgNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	21	None	replace
631	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExpr	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
632	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDead  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDead  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDead	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
633	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	123	None	replace
634	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
635	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
636	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeCfgNode(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeCfgNode(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeCfgNode(n));	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
637	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
638	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFallThrough(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFallThrough(n));	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
640	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
642	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
643	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	78	None	add
644	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
645	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
646	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
647	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	78	7	add
648	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	78	None	add
649	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	78	None	add
650	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	78	None	add
651	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	43	10	add
652	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	43	10	add
653	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	43	10	add
654	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	43	10	add
655	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
656	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
657	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
658	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	43	None	add
659	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.	  	non-compiled	[CE]  not  a  statement	43	None	add
660	[BUG]  [BUGGY]  removeDeadExprStatement(dead,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  dead  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(dead,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(dead,  nextCfgNode,  fallThrough);	  removeDeadExprStatement(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	65	None	replace
661	[BUG]  [BUGGY]  removeDeadExprStatement(last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(last,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(last,  nextCfgNode);	  removeDeadExprStatement(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	65	None	replace
662	[BUG]  [BUGGY]  removeDeadExprStatement(n.getNext(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(n.getNext(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(n.getNext(),  nextCfgNode);	  removeDeadExprStatement(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
663	[BUG]  [BUGGY]  RemoveDeadExprStatement(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatement(n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatement(n,  nextCfgNode);	  removeDeadExprStatement(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
664	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	113	None	replace
665	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	113	None	replace
666	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  cannot  find  symbol  first	113	None	replace
667	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode,  nextCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(firstCfgNode,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	113	None	replace
668	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(gNode,  nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(gNode,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(gNode,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	113	None	replace
669	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	113	None	replace
670	[BUG]  [BUGGY]  removeDeadCfgNode(curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(curCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	124	None	replace
671	[BUG]  [BUGGY]  removeDeadCfgNode(null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(null);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
672	[BUG]  [BUGGY]  removeDeadCfgNode(node);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(node);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(node);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  node	124	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	76	None	replace
674	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	76	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	76	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	76	None	replace
677	[BUG]  [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getCfgNode()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
678	[BUG]  [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
679	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	31	None	replace
680	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  nextCfgNode));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  nextCfgNode));	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
681	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  fallThrough);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  fallThrough);	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
682	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  fallThrough));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode,  fallThrough));	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
683	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeCfgNode(nextCfgNode));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeCfgNode(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeCfgNode(nextCfgNode));	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  lastCfgNode  =  nextCfgNode.getFirstChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
685	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.getFirstChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  n.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  lastCfgNode  =  n.getLastChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  AssertionFailedError  	39	7	replace
687	[BUG]  [BUGGY]  Node  lastCfgNode  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  n.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  n.getLastChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  AssertionFailedError  	39	7	replace
688	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.removeFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  lastCfgNode  =  nextCfgNode.removeFirstChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
689	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.removeFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.removeFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.removeFirstChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
690	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  lastCfgNode  =  nextCfgNode.getNext();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
691	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.getNext();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
692	[BUG]  [BUGGY]  Node  lastCfgNode  =  first.getLastChild();  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  first.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  first.getLastChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  first	39	None	replace
693	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.next();  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.next();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.next();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
694	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
695	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
696	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
697	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
698	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	161	None	add
699	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()	  	non-compiled	[CE]  ';'  expected	161	None	add
700	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	non-compiled	[CE]  cannot  find  symbol	161	None	add
701	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu	  	non-compiled	[CE]  ';'  expected	161	None	add
702	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu	  	non-compiled	[CE]  ';'  expected	161	None	add
703	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	161	None	add
704	[BUG]  [BUGGY]  removeDeadExprStatement(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(curCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(curCfgNode,  nextCfgNode);	  removeDeadExprStatement(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	148	None	replace
705	[BUG]  [BUGGY]  removeDeadExprStatement(deadThrough,  nextCfgNode);  [CE]  cannot  find  symbol  deadThrough  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(deadThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(deadThrough,  nextCfgNode);	  removeDeadExprStatement(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  deadThrough	148	None	replace
706	[BUG]  [BUGGY]  removeDeadExprStatement(cfgStack.peek(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(cfgStack.peek(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(cfgStack.peek(),  nextCfgNode);	  removeDeadExprStatement(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
707	[BUG]  [BUGGY]  removeDeadExprStatement(cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(cfgStack,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(cfgStack,  nextCfgNode);	  removeDeadExprStatement(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
708	[BUG]  [BUGGY]  removeDeadExprStatement(outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(outEdges,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(outEdges,  nextCfgNode);	  removeDeadExprStatement(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
709	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  nextCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first);  nextCfgNode.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	165	None	replace
710	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	165	7	replace
711	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    	compilable	  [FE]  RuntimeException  	165	7	replace
712	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
713	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
714	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
715	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
716	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeUnconditionalBranching(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  removeUnconditionalBranching(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
717	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
718	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(lastCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(lastCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(lastCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
719	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(secondCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(secondCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(secondCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
720	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  secondCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  secondCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  secondCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
721	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  secondCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  secondCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	compilable	  [FE]  RuntimeException  	35	7	add
722	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  secondCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  secondCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  secondCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	compilable	  [FE]  RuntimeException  	35	7	add
723	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
724	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
725	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
726	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
727	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	15	None	replace
728	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  n,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
729	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
730	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
731	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfg);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfg);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfg);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
732	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  compiler);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  compiler);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  compiler);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
733	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	77	None	replace
737	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	77	None	replace
738	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  first,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
739	[BUG]  [BUGGY]  removeDeadExprStatementSafely(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(lastCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	23	None	replace
740	[BUG]  [BUGGY]  removeDeadExprStatementSafely(null,  nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(null,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(null,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	23	None	replace
741	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
742	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
743	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
744	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
745	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.replaceChild(nextCfgNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.replaceChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.replaceChild(nextCfgNode);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	164	None	add
746	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
747	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
748	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
749	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  firstCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  firstCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  firstCfgNode.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	164	None	add
750	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
751	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  RuntimeException  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	164	7	add
752	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(null,  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
753	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(compiler,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(compiler,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(compiler,  nextCfgNode);	  tryRemoveUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
754	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(null,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	compilable	  [FE]  AssertionFailedError  	83	2	add
756	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	compilable	  [FE]  AssertionFailedError  	83	2	add
757	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
758	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
759	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
760	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	83	7	add
762	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Preconditions.checkState(nextCfgNode!=  nextCfgNode,  fallThrough);	  	compilable	  [FE]  RuntimeException  	83	7	add
763	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
764	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThr  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThr  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThr	  	non-compiled	[CE]  ')'  expected	83	None	add
765	[BUG]  [BUGGY]  removeDeadCfgNode(cfgStack.peek(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgStack.peek(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgStack.peek(),  nextCfgNode);	  removeDeadCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
766	[BUG]  [BUGGY]  removeDeadCfgNode(cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgStack,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgStack,  nextCfgNode);	  removeDeadCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
767	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  firstCfgNode);	  removeDeadCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	14	None	replace
768	[BUG]  [BUGGY]  removeDeadCfgNode(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(null,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(null,  nextCfgNode);	  removeDeadCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
770	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
771	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
772	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
773	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	91	None	add
774	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
775	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
776	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >>  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >>  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >>  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	91	None	add
777	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	91	None	add
778	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	91	None	add
779	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
780	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
781	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  compiler,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  compiler,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  compiler,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
782	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
783	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	3	None	replace
784	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(firstCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(firstCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	115	None	replace
785	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	115	None	replace
786	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
787	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	115	None	replace
788	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	74	None	replace
789	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	74	7	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	74	7	replace
791	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	74	7	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  null);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	74	7	replace
793	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	74	7	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	74	7	replace
795	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  first);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	177	None	replace
796	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  curCfgNode);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	177	None	replace
797	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  removeNoOpStatements);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  removeNoOpStatements);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
798	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(first,  nextCfgNode,  fallThrough);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	177	None	replace
799	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  outEdges);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
800	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  first,  nextCfgNode,  fallThrough);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	177	None	replace
801	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  lastCfgNode);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	177	None	replace
802	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  fallThrough);	  removeDeadCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
803	[BUG]  [BUGGY]  removeDeadCfgNode(cfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgNode,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	12	None	replace
804	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
805	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n.removeChild(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
806	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
807	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
808	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
809	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  curCfgNode);	  RemoveDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	168	None	replace
810	[BUG]  [BUGGY]  RemoveDeadCfgNode(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(first,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(first,  nextCfgNode);	  RemoveDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	168	None	replace
811	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(first));	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	181	None	replace
812	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
813	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getNext()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
815	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  incomparable  types:  int  and  Branch  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Branch.UNCOND);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	138	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
817	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
818	[BUG]  [BUGGY]  removeDeadCfgNode(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(lastCfgNode,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode,    lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	11	None	replace
819	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
820	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
822	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
824	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
825	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	89	None	add
826	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	89	None	add
827	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  Context	89	None	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
829	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	89	2	add
830	[BUG]  [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
831	[BUG]  [BUGGY]  removeUnconditionalBranching(n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(n,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n,  fallThrough,  nextCfgNode);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
832	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  n,  fallThrough);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
833	[BUG]  [BUGGY]  removeUnconditionalBranching(firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(firstCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(firstCfgNode,  fallThrough);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	58	None	replace
834	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	129	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	129	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	129	None	replace
837	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()!=  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	129	None	replace
839	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  first	129	None	replace
840	[BUG]  [BUGGY]  removeUnconditionalBranching(nullCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nullCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nullCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	71	None	replace
841	[BUG]  [BUGGY]  removeUnconditionalBranching(nullCfgNode,  fallThrough);  [CE]  cannot  find  symbol  nullCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nullCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nullCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  nullCfgNode	71	None	replace
842	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  n,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  n,  nextCfgNode);	  removeUnconditionalBranching(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	55	None	replace
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	151	7	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirstChild()  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	151	7	replace
845	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  nextCfgNode);  [CE]  incomparable  types:  int  and  Node  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  int  and  Node	151	None	replace
846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(n  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	151	7	replace
847	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  nextCfgNode);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	151	7	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  NextCfgNode);  [CE]  cannot  find  symbol  NextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  NextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  NextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  NextCfgNode	151	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirst()  ==  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getFirst()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getFirst()  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
850	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
851	[BUG]  [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  first.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
852	[BUG]  [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  lastCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
853	[BUG]  [BUGGY]  Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  node.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
854	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	81	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	81	None	replace
856	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	157	7	replace
857	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	157	7	replace
858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n.removeChild(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	157	7	replace
859	[BUG]  [BUGGY]  n.removeChild(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n.removeChild(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n.removeChild(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	157	7	replace
860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	157	7	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	157	7	replace
862	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  removeUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1);  removeUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1);  removeUnconditionalBranching(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
863	[BUG]  [BUGGY]  removeCfgNode(cfgStack.peek(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(cfgStack.peek(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(cfgStack.peek(),  nextCfgNode);	  removeCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
864	[BUG]  [BUGGY]  removeCfgNode(cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(cfgStack,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(cfgStack,  nextCfgNode);	  removeCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
865	[BUG]  [BUGGY]  removeCfgNode(n.getFirstChild(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(n.getFirstChild(),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(n.getFirstChild(),  nextCfgNode);	  removeCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
866	[BUG]  [BUGGY]  removeDeadCfgNode(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(first,  nextCfgNode,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
867	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  nextCfgNode);	  removeDeadExprStatementSafely(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	107	None	replace
868	[BUG]  [BUGGY]  removeDeadExprStatementSafely(dead,  fallThrough);  [CE]  cannot  find  symbol  dead  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(dead,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(dead,  fallThrough);	  removeDeadExprStatementSafely(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	107	None	replace
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	90	7	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  &&  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	90	7	replace
871	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	90	None	replace
872	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	90	7	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  fallThrough  ||  nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	90	7	replace
874	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	90	None	replace
875	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
876	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  first);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	9	None	replace
877	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfgNode);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	9	None	replace
878	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  lastCfgNode);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	9	None	replace
879	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  outEdges);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
880	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  nextCfgNode,  fallThrough);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
881	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfg);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfg);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  curCfg);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
882	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
883	[BUG]  [BUGGY]  removeDeadExprStatementSafely(firstCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(firstCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(firstCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	96	None	replace
884	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
885	[BUG]  [BUGGY]  removeDeadCfgNode(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(lastCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(lastCfgNode,  fallThrough);	  removeDeadCfgNode(nextCfgNode,    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	13	None	replace
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
887	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	159	2	add
889	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	159	2	add
890	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	159	7	add
891	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	159	7	add
892	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue()  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue()	  	non-compiled	[CE]  ';'  expected	159	None	add
893	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValu	  	non-compiled	[CE]  ';'  expected	159	None	add
894	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue	  	non-compiled	[CE]  ';'  expected	159	None	add
895	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    TryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  cannot  find  symbol	159	None	add
896	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
897	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
898	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  	compilable	  [FE]  RuntimeException  	156	6	add
899	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  	compilable	  [FE]  RuntimeException  	156	6	add
900	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
901	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
902	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
903	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveUnconditionalBranching(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveUnconditionalBranching(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    RemoveUnconditionalBranching(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
904	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
905	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  deleteDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  deleteDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  deleteDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
906	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  replaceDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
907	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  lastCfgNode  =  nextCfgNode.getLastChild();	  	non-compiled	[CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
908	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  nextCfgNode  =  nextCfgNode.getLastChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
909	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  firstCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	38	6	add
910	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  firstCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  firstCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	38	6	add
911	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  lastCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
912	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  previousCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  previousCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	38	6	add
913	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  previousCfgNode  =  nextCfgNode.getLastChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  previousCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  previousCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	38	6	add
914	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  first.getLastChild();  [CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  first.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  lastCfgNode  =  first.getLastChild();	  	non-compiled	[CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
915	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getLastChild());  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  nextCfgNode.getLastChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  lastCfgNode  =  nextCfgNode.getLastChild());	  	non-compiled	[CE]  ';'  expected	38	None	add
916	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
917	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
918	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
919	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
920	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
921	[BUG]  [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	1	2	add
923	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	1	2	add
924	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
925	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
926	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION))  {	  	compilable	  [FE]  AssertionFailedError  	1	9	add
927	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION))  {	  	compilable	  [FE]  AssertionFailedError  	1	9	add
928	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
929	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
930	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
931	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
932	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	1	10	add
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {	  	compilable	  [FE]  AssertionFailedError  	1	9	add
934	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {	  	compilable	  [FE]  AssertionFailedError  	1	9	add
935	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND	  	non-compiled	[CE]  ')'  expected	1	None	add
936	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  nextCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	66	None	replace
937	[BUG]  [BUGGY]  removeUnconditionalBranching(firstCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(firstCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(firstCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	66	None	replace
938	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	82	None	replace
939	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getFirstChild();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	82	None	replace
940	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue()	  	non-compiled	[CE]  ';'  expected	159	None	add
941	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValu	  	non-compiled	[CE]  ';'  expected	159	None	add
942	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExp  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExp  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExp	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDea	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	118	None	replace
946	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  fallThrough);	  removeDeadExprStatementSafely(lastCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	20	None	replace
947	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(lastCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
948	[BUG]  [BUGGY]  removeDeadExprStatementSafely(null,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(null,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(null,  fallThrough);	  removeDeadExprStatementSafely(lastCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	20	None	replace
949	[BUG]  [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  [CE]  cannot  find  symbol  curCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  curCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  curCfgNode.getNext();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	33	None	replace
950	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.removeFirst();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.removeFirst();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.removeFirst();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
951	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  n,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  n,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  n,  fallThrough);	  removeDeadExprStatementSafely(first,    n,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	17	None	replace
952	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	156	None	add
953	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);	  	compilable	  [FE]  RuntimeException  	156	6	add
954	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);	  	compilable	  [FE]  RuntimeException  	156	6	add
955	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough,  outEdges);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
956	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough!=  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	92	None	replace
957	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	92	None	replace
958	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  outEdges);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  removeNoOpStatements);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough,  removeNoOpStatements);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
960	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	142	None	replace
961	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	142	None	replace
962	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	142	None	replace
963	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	142	None	replace
964	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  collapse);  [CE]  cannot  find  symbol  collapse  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  collapse);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  collapse);	  removeCfgNode(nextCfgNode,    lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  collapse	27	None	replace
965	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  fallThrough,  firstCfgNode);	  removeDeadExprStatementSafely(n,    firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	18	None	replace
966	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  firstCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  Node  firstCfgNode  =  firstCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    Node  firstCfgNode  =  firstCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	add
967	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
968	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	97	None	replace
969	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
970	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
971	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
972	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	139	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	139	None	replace
974	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	139	None	replace
975	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getDestination().getValue());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
976	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	141	None	replace
977	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	141	None	replace
978	[BUG]  [BUGGY]  removeDeadExprStatement(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(first,  nextCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	60	None	replace
979	[BUG]  [BUGGY]  removeCfgNode(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(lastCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(lastCfgNode,  fallThrough);	  removeCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	26	None	replace
980	[BUG]  [BUGGY]  removeDeadExprStatementSafely(negNode,  fallThrough);  [CE]  cannot  find  symbol  negNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(negNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(negNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  negNode	21	None	replace
981	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  	non-compiled	[CE]  not  a  statement	45	None	add
982	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode	  	non-compiled	[CE]  ')'  expected	45	None	add
983	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
984	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
985	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  lastCfgNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	162	None	replace
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	162	7	replace
987	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode  ==  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	162	7	replace
988	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue()  [CE]  ')'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue()  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue()	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ')'  expected	162	None	replace
989	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatement	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
990	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExpr  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExpr  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExpr	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
991	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
992	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExp  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExp  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExp	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
993	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollow(n));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollow(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollow(n));	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
994	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  first);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	105	None	replace
995	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  firstCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	105	None	replace
996	[BUG]  [BUGGY]  removeDeadExprStatementSafely(null,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(null,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(null,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	105	None	replace
997	[BUG]  [BUGGY]  removeDeadExprStatementSafely(negNode,  nextCfgNode);  [CE]  cannot  find  symbol  negNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(negNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(negNode,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  negNode	105	None	replace
998	[BUG]  [BUGGY]  removeDeadExprStatementSafely(node,  nextCfgNode);  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(node,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(node,  nextCfgNode);	  removeDeadExprStatementSafely(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
1000	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadFunctionStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadFunctionStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadFunctionStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
1001	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
1002	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	80	None	replace
1003	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	80	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	80	None	replace
1005	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	90	None	replace
1006	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	90	None	replace
1007	[BUG]  [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  n.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
1008	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
1009	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	115	None	replace
1010	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	115	None	replace
1011	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
1012	[BUG]  [BUGGY]  removeDeadExprStatement(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(lastCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(lastCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	64	None	replace
1013	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  outEdges.get(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	160	None	replace
1014	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	160	None	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(outEdges.get(0).getDestination()!=  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
1016	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  nextCfgNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination()!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.get(0).getDestination()!=  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	160	7	replace
1017	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.get(0).getDestination().getValue()  ==  Branch.UNCOND);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	160	None	replace
1018	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
1019	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
1020	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	180	None	add
1021	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  ';'  expected	180	None	add
1022	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	180	None	add
1023	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	180	None	add
1024	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  n);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  n);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  n);	  removeDeadExprStatementSafely(first,    n,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	103	None	replace
1025	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  	non-compiled	[CE]  not  a  statement	53	None	add
1026	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode	  	non-compiled	[CE]  ')'  expected	53	None	add
1027	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().	  	non-compiled	[CE]  not  a  statement	53	None	add
1028	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1030	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadUnconditionalBranching(nextCfgNode);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadUnconditionalBranching(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1031	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1032	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  firstCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	76	None	replace
1033	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	76	None	replace
1034	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	76	None	replace
1035	[BUG]  [BUGGY]  removeUnconditionalBranching(currentCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  currentCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(currentCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(currentCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  currentCfgNode	66	None	replace
1036	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	74	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	74	None	replace
1038	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	74	None	replace
1039	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	74	None	replace
1040	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(initialCfgNode);  [CE]  cannot  find  symbol  initialCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(initialCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(initialCfgNode);	  tryRemoveUnconditionalBranching(curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  initialCfgNode	146	None	replace
1041	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  cannot  find  symbol  curCfgNode  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	158	None	replace
1042	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1043	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1044	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(null);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(null);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1045	[BUG]  [BUGGY]  removeDeadExprStatementSafely(null);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(null);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(null);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1046	[BUG]  [BUGGY]  removeUnconditionalBranching(first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first);	  removeUnconditionalBranching(cfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	59	None	replace
1047	[BUG]  [BUGGY]  removeUnconditionalBranching(firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(firstCfgNode);	  removeUnconditionalBranching(cfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	59	None	replace
1048	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExp  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExp  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExp	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
1049	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDea  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDea  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDea	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
1050	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
1051	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatement  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatement  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatement	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	123	None	replace
1052	[BUG]  [BUGGY]  removeDeadCfgNode(last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(last,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(last,  nextCfgNode);	  removeDeadCfgNode(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	108	None	replace
1053	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	                Node    firstCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode!=  null);	  	compilable	  [FE]  RuntimeException  	32	6	add
1054	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode!=  null);	  	compilable	  [FE]  RuntimeException  	32	6	add
1055	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  secondCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  secondCfgNode);	  RemoveDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	169	None	replace
1056	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  lastCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	23	None	replace
1057	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1059	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first);  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first);  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first);  RemoveDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	96	None	replace
1060	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(curCfgNode,  nextCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(curCfgNode,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(curCfgNode,  nextCfgNode));	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	145	None	replace
1061	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	77	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  Node  nextCfgNode  =  nextCfgNode.getLastChild();	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	77	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	86	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	79	None	replace
1065	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	79	None	replace
1066	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	79	None	replace
1067	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  secondCfgNode);	  Preconditions.checkState(nextCfgNode    ==    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	93	None	replace
1068	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	143	None	replace
1069	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	143	None	replace
1070	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
1071	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	143	None	replace
1072	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	175	None	replace
1073	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	175	None	replace
1074	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	175	None	replace
1075	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	175	None	replace
1076	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	157	None	replace
1077	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1078	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1079	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1080	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1081	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  >>  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1082	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfg.cloneTree());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfg.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  curCfg.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1083	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getTreeLocation(nextCfgNode));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getTreeLocation(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  compiler.getTreeLocation(nextCfgNode));	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1084	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getTreeElement());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getTreeElement());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  compiler.getTreeElement());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1085	[BUG]  [BUGGY]  removeDeadCfgNode(firstCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(firstCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(firstCfgNode,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	12	None	replace
1086	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  cannot  find  symbol  firstCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	176	None	replace
1087	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	176	None	replace
1088	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	176	None	replace
1089	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n.getNext());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	176	None	replace
1090	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(outEdges.get(1));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(outEdges.get(1));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(outEdges.get(1));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	47	None	replace
1091	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  return  null;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  return  null;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  return  null;	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	non-compiled	[CE]  unreachable  statement	116	None	replace
1092	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	165	None	replace
1093	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  firstCfgNode);	  removeCfgNode(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	29	None	replace
1094	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
1095	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
1096	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	140	None	replace
1097	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	140	None	replace
1098	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	140	None	replace
1099	[BUG]  [BUGGY]  Preconditions.checkState(false  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  boolean  and  Node  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(false  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(false  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  boolean  and  Node	140	None	replace
1100	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	140	None	replace
1101	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
1102	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
1103	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
1104	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  lastCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	22	None	replace
1105	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  outEdges);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough,  outEdges);	  removeDeadExprStatementSafely(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
1106	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
1107	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveUnreachableCodeElimination(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  RemoveUnreachableCodeElimination(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    RemoveUnreachableCodeElimination(nextCfgNode);  logger.fine( "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
1108	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	73	None	add
1109	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	73	None	add
1110	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode;  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode;	  	non-compiled	[CE]  ')'  expected	89	None	add
1111	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  cannot  find  symbol  firstCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	138	None	replace
1112	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	138	None	replace
1113	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	138	None	replace
1114	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
1117	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first);  [CE]  cannot  find  symbol  first  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	154	None	replace
1118	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(cfgStack,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(cfgStack,  nextCfgNode);	  removeUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1119	[BUG]  [BUGGY]  removeUnconditionalBranching(child,  nextCfgNode);  [CE]  cannot  find  symbol  child  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(child,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(child,  nextCfgNode);	  removeUnconditionalBranching(curCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  child	147	None	replace
1120	[BUG]  [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(firstCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	81	None	replace
1121	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	81	None	replace
1122	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  >=  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  >=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  >=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	81	None	replace
1123	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()!=  null  &&  lastCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()!=  null  &&  lastCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()!=  null  &&  lastCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
1124	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION),  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION),  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION),  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getParent()!=  null  &&  nextCfgNode.getParent().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
1126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	94	6	add
1127	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	94	6	add
1128	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprCfgNode(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1129	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExpr(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExpr(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExpr(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1130	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementsafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementsafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementsafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1131	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  nextCfgNode  =  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
1132	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
1133	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode,  nextCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	113	None	replace
1134	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  curCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfgNode,  nextCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	113	None	replace
1135	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  closeCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  closeCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  closeCfgNode,  removeNoOpStatements);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  closeCfgNode,  removeNoOpStatements);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,    removeNoOpStatements);    	non-compiled	[CE]  cannot  find  symbol  closeCfgNode	113	None	replace
1136	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1137	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(lastCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(lastCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(lastCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	130	None	replace
1138	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.redeclareVarsInsideBranching(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          NodeUtil.removeCfgNode(nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1140	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1141	[BUG]  [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  MutableCodeElimination  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  MutableCodeElimination	44	None	replace
1142	[BUG]  [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
1143	[BUG]  [BUGGY]  RemoveDeadCfgNode(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadCfgNode(lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(lastCfgNode);	  RemoveDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	168	None	replace
1144	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	163	None	replace
1145	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	163	None	replace
1146	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	163	None	replace
1147	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	163	None	replace
1148	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  node.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  node.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  node.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  node	164	None	add
1149	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  lastCfgNode.removeChild(nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  lastCfgNode.removeChild(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  lastCfgNode.removeChild(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	164	None	add
1150	[BUG]  [BUGGY]  removeDeadCfgNode(cfgNode,  fallThrough);  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgNode,  fallThrough);	  removeDeadCfgNode(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	109	None	replace
1151	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFo	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
1152	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
1153	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
1154	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  n,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(last,  n,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  n,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	16	None	replace
1155	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(cfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(cfgNode);	  tryRemoveUnconditionalBranching(first);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	144	None	replace
1156	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
1157	[BUG]  [BUGGY]  removeDeadCfgNode(null,  nextCfgNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(null,  nextCfgNode.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(null,  nextCfgNode.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1158	[BUG]  [BUGGY]  removeDeadExprStatementOnly(nextCfgNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementOnly(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementOnly(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1159	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
1160	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  first	50	None	replace
1161	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  lastCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    first.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
1162	[BUG]  [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
1163	[BUG]  [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  MutableCodeElimination  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	MutableCodeElimination.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  MutableCodeElimination	46	None	replace
1164	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  firstCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
1165	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1166	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1167	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1168	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1169	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  secondCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  secondCfgNode);	  removeDeadExprStatementSafely(n,    first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	136	None	replace
1170	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  first);	  removeDeadExprStatementSafely(n,    first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	136	None	replace
1171	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  Branch.UNCOND);  [CE]  incomparable  types:  Node  and  Branch  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  Branch.UNCOND);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  incomparable  types:  Node  and  Branch	88	None	replace
1172	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  branch.UNCOND);  [CE]  cannot  find  symbol  branch  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  branch.UNCOND);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  branch	88	None	replace
1173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  null);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  RuntimeException  	88	7	replace
1174	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  null);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  null);	  Preconditions.checkState(nextCfgNode    ==    fallThrough);    	compilable	  [FE]  RuntimeException  	88	7	replace
1175	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  dead);  [CE]  cannot  find  symbol  dead  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  dead);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  dead);	  removeDeadExprStatementSafely(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	107	None	replace
1176	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	add
1177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	91	7	add
1178	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	91	7	add
1179	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  >=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	91	None	add
1180	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1181	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1182	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1183	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1184	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1185	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1186	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
1188	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
1189	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  curCfgNode  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	155	None	replace
1190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
1191	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	155	7	replace
1192	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FU  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FU  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FU	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	155	None	replace
1193	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.FUNCTION	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	155	None	replace
1194	[BUG]  [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  curCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  curCfgNode.getNext();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
1195	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.cloneTree();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
1196	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.removeFirst();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.removeFirst();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.removeFirst();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
1197	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
1198	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  TryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  TryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    TryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
1199	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
1200	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	1	None	add
1201	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
1202	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode  ==  nextCfgNode));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode  ==  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode  ==  nextCfgNode));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
1203	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND));	  	non-compiled	[CE]  ';'  expected	1	None	add
1204	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  }  );  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  }  );  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  }  );	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  ')'  expected	84	None	replace
1205	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  *  2);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  *  2);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  *  2);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	84	None	replace
1206	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  outEdges);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode  +  fallThrough,  outEdges);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
1207	[BUG]  [BUGGY]  removeDeadCfgNode(first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(first);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	124	None	replace
1208	[BUG]  [BUGGY]  removeDeadCfgNodes(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNodes(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNodes(nextCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1209	[BUG]  [BUGGY]  removeDeadCfgNode(cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(cfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(cfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	124	None	replace
1210	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
1211	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
1212	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  outEdges);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  outEdges);	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
1213	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	48	None	add
1214	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode	  	non-compiled	[CE]  not  a  statement	48	None	add
1215	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  fallCfgNode,  fallThrough);  [CE]  cannot  find  symbol  fallCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  fallCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  fallCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    first,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  fallCfgNode	133	None	replace
1216	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(first);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	102	None	replace
1217	[BUG]  [BUGGY]  removeDeadExprStatementSafely(lastCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(lastCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(lastCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	102	None	replace
1218	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first);	  tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
1219	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  firstCfgNode);	  tryRemoveUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	4	None	replace
1220	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	98	None	replace
1221	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1222	[BUG]  [BUGGY]  removeCfgNode(first,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeCfgNode(first,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(first,  nextCfgNode,  fallThrough);	  removeCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	24	None	replace
1223	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1224	[BUG]  [BUGGY]  RemoveUnconditionalBranching(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(lastCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	178	None	replace
1225	[BUG]  [BUGGY]  RemoveUnconditionalBranching(lastCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(lastCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(lastCfgNode,  nextCfgNode);	  RemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	178	None	replace
1226	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  dead);  [CE]  cannot  find  symbol  dead  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatement(nextCfgNode,  dead);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  dead);	  removeDeadExprStatement(dead,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	65	None	replace
1227	[BUG]  [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  root);  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.removeCfgNode(nextCfgNode,  root);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.removeCfgNode(nextCfgNode,  root);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  root	128	None	replace
1228	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  first.cloneTree());  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  first.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  first.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  first	135	None	replace
1229	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfg.cloneTree());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfg.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  curCfg.cloneTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1230	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  cfgStack.peek());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  cfgStack.peek());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1231	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  compiler.getTree());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  compiler.getTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  compiler.getTree());	  removeDeadCfgNode(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	174	7	replace
1233	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  RuntimeException  	174	7	replace
1234	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  lastCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	174	None	replace
1235	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  first	174	None	replace
1236	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	174	None	replace
1237	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  first);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  first);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  first	174	None	replace
1238	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	174	None	replace
1239	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	51	10	add
1241	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	51	10	add
1242	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	51	None	add
1243	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode	  	non-compiled	[CE]  ')'  expected	51	None	add
1244	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1245	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1246	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValu  [CE]  not  a  statement  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValu  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(1).getDestination().getValu	  	non-compiled	[CE]  not  a  statement	161	None	add
1247	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1248	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    if(nextCfgNode!=  null)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1249	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  n.getNext());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  n.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1250	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	78	None	add
1251	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(last,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(last,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	106	None	replace
1252	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	  	non-compiled	[CE]  ')'  expected	173	None	add
1253	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeF	  	non-compiled	[CE]  ')'  expected	173	None	add
1254	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	  	non-compiled	[CE]  ')'  expected	173	None	add
1255	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
1256	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
1257	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	129	None	replace
1258	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
1259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	43	10	add
1260	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	43	10	add
1261	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	43	None	add
1262	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode	  	non-compiled	[CE]  ')'  expected	43	None	add
1263	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFo  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFo	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
1264	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND))  {  fallThrough  =  tryRemoveUnconditionalBranching(computeF	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
1265	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFoll  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFoll  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFoll	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
1266	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  first);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  first);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	182	None	replace
1267	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  outEdges);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
1268	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  lastCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough,  lastCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	182	None	replace
1269	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);	  Preconditions.checkState(lastCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	149	None	replace
1270	[BUG]  [BUGGY]  Preconditions.checkState(child  ==  nextCfgNode);  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(child  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(child  ==  nextCfgNode);	  Preconditions.checkState(lastCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  child	149	None	replace
1271	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.nextChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.nextChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.nextChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
1272	[BUG]  [BUGGY]  Node  lastCfgNode  =  curCfgNode.getLastChild();  [CE]  cannot  find  symbol  curCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  curCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  curCfgNode.getLastChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	39	None	replace
1273	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkState(curCfg  ==  nextCfgNode);  [CE]  incomparable  types:  ControlFlowGraph<Node>  and  Node  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(curCfg  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(curCfg  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  ControlFlowGraph<Node>  and  Node	151	None	replace
1275	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.first  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.first  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.first  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	151	None	replace
1276	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
1277	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  curCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  curCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	153	None	replace
1278	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  incomparable  types:  int  and  Branch  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  fallThrough.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  incomparable  types:  int  and  Branch	153	None	replace
1279	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  ')'  expected	153	None	replace
1280	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	73	None	add
1281	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.check(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.check(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.check(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
1282	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLastChild();  [CE]  unexpected  type  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLastChild();	  	non-compiled	[CE]  unexpected  type	1	None	add
1283	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  attemptRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  attemptRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    attemptRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
1284	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLength();  [CE]  unexpected  type  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLength();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getLength();	  	non-compiled	[CE]  unexpected  type	1	None	add
1285	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getFirstChild();  [CE]  unexpected  type  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getFirstChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  outEdges.size()  +=  nextCfgNode.getFirstChild();	  	non-compiled	[CE]  unexpected  type	1	None	add
1286	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  if(  fallThrough!=  nextCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  tryRemoveUnconditionalBranching(computeFollowing(n));  if(  fallThrough!=  nextCfgNode)  {  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));    tryRemoveUnconditionalBranching(computeFollowing(n));  if(  fallThrough!=  nextCfgNode)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1287	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next	  	non-compiled	[CE]  ')'  expected	45	None	add
1288	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
1289	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode;  removeDeadExprStatementSafely(nextCfgNode);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode;  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprCfgNode;  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  not  a  statement	94	None	add
1290	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  not  a  statement	94	None	add
1291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
1292	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
1293	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	125	None	replace
1294	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1295	[BUG]  [BUGGY]  Preconditions.checkState(this.nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(this.nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(this.nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode!=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	86	None	replace
1296	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1297	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
1298	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	137	None	replace
1299	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  first,  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	6	None	replace
1300	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  next	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
1301	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1302	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  nextCfgNode.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1303	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  n.getNext());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  n.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  n.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1304	[BUG]  [BUGGY]  removeDeadCfgNode(null,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(null,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(null,  nextCfgNode.getNext());	  removeDeadCfgNode(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1305	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough  +  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough  +  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough  +  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
1306	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first  +  fallThrough);  [CE]  cannot  find  symbol  first  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  first  +  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  first  +  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode    +    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	117	None	replace
1307	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n    	non-compiled	[CE]  ')'  expected	127	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getParent();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.getParent();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.getParent();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1309	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.cloneTree();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Node  nextCfgNode  =  nextCfgNode.cloneTree();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Node  nextCfgNode  =  nextCfgNode.cloneTree();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	83	None	add
1310	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Context.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  Context  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  Context.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    Context.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  	non-compiled	[CE]  cannot  find  symbol  Context	83	None	add
1311	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	174	None	replace
1312	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	174	None	replace
1313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  null);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  AssertionFailedError  	174	7	replace
1314	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  null);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  null);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	compilable	  [FE]  AssertionFailedError  	174	7	replace
1315	[BUG]  [BUGGY]  Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol  Context	174	None	replace
1316	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
1317	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
1318	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	171	None	replace
1319	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1320	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(2).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1321	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1322	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	161	7	add
1323	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough  ==  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	89	None	add
1324	[BUG]  [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  secondCfgNode.getLastChild();  [CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  lastCfgNode  =  nextCfgNode.getLastChild();  Node  lastCfgNode  =  secondCfgNode.getLastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    lastCfgNode    =    nextCfgNode.getLastChild();    Node  lastCfgNode  =  secondCfgNode.getLastChild();	  	non-compiled	[CE]  variable  lastCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	38	None	add
1325	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	120	None	replace
1326	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1327	[BUG]  [BUGGY]  removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	120	None	replace
1328	[BUG]  [BUGGY]  removeDeadExprStatementsafely(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementsafely(n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementsafely(n,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    first,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1329	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getParent();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getParent();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
1330	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getParent();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getParent();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getParent();	          Node    firstCfgNode    =    nextCfgNode.getNext();    	compilable	  [FE]  RuntimeException  	33	7	replace
1331	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1332	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    fallThrough);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	87	None	add
1333	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1334	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough,  nextCfgNode);	  RemoveDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1335	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n.getFirstChild(),  nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n.getFirstChild(),  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n.getFirstChild(),  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    firstCfgNode,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	18	None	replace
1336	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.setString(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	163	None	replace
1337	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
1338	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  first);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough  +  first);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    +    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
1339	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	80	None	replace
1340	[BUG]  [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	151	None	replace
1341	[BUG]  [BUGGY]  Preconditions.checkState(cfgStack.peek()  ==  nextCfgNode);  [CE]  incomparable  types:  ControlFlowGraph<Node>  and  Node  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(cfgStack.peek()  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(cfgStack.peek()  ==  nextCfgNode);	  Preconditions.checkState(first    ==    nextCfgNode);    	non-compiled	[CE]  incomparable  types:  ControlFlowGraph<Node>  and  Node	151	None	replace
1342	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	123	None	replace
1343	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getLastChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getFirstChild();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	40	None	replace
1344	[BUG]  [BUGGY]  removeUnconditionalBranching(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(lastCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(lastCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    first);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	71	None	replace
1345	[BUG]  [BUGGY]  eradicateUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  eradicateUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	eradicateUnconditionalBranching(nextCfgNode);	  removeUnconditionalBranching(cfgNode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1346	[BUG]  [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  incompatible  types	172	None	replace
1347	[BUG]  [BUGGY]  Node  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);  [CE]  type  Node  does  not  take  parameters  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first),  fallThrough);	          Deque    <    Node>    first    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first));    	non-compiled	[CE]  type  Node  does  not  take  parameters	172	None	replace
1348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
1349	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
1350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
1351	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	98	7	replace
1352	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  next  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  next  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  next	  	non-compiled	[CE]  ')'  expected	51	None	add
1353	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfg  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfg  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfg	  	non-compiled	[CE]  ')'  expected	51	None	add
1354	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	115	None	replace
1355	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	115	None	replace
1356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.cloneTree();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1357	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.cloneTree();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.cloneTree();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1359	[BUG]  [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  firstCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Node    firstCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));    	compilable	  [FE]  RuntimeException  	36	7	replace
1360	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getFirst();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	34	None	replace
1361	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	122	None	replace
1362	[BUG]  [BUGGY]  removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeNoOpStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDe	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
1363	[BUG]  [BUGGY]  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  remove  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  remove  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  remove	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	122	None	replace
1364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1365	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1367	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1369	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  fallThrough;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1371	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1373	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  return  null;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    return    fallThrough;    	compilable	  [FE]  AssertionFailedError  	116	7	replace
1374	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1,  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ';'  expected	126	None	replace
1375	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  first	52	None	replace
1376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
1377	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	52	7	replace
1378	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()!=    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  first	52	None	replace
1379	[BUG]  [BUGGY]  removeDeadExprStatementsafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementsafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementsafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1380	[BUG]  [BUGGY]  removeDeadExprStatementsSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementsSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementsSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1381	[BUG]  [BUGGY]  reduceDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  reduceDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	reduceDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(firstCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1382	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	78	None	add
1383	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  secondCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	78	None	add
1384	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  lastCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  lastCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode        ==        nextCfgNode);        Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  lastCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	78	None	add
1385	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getFirst()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
1386	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  first  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(first);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  first	162	None	replace
1387	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  first  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
1388	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  first  =  outEdges.get(1).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	162	7	replace
1389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	162	7	replace
1390	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	compilable	  [FE]  AssertionFailedError  	162	7	replace
1391	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFallThrough(nextCfgNode));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFallThrough(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFallThrough(nextCfgNode));	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1392	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  fallThrough));	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	181	None	replace
1393	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  outEdges);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
1394	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode),  fallThrough,  nextCfgNode);	  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	182	None	replace
1395	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  secondCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  secondCfgNode);	  removeUnconditionalBranching(nextCfgNode,    curCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	70	None	replace
1396	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	74	None	replace
1397	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	118	None	replace
1398	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1399	[BUG]  [BUGGY]  if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(removeNoOpStatements)  {  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ')'  expected	118	None	replace
1400	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getLastChild();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  preconditions	77	None	replace
1401	[BUG]  [BUGGY]  NodeUtil.redeclareCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  NodeUtil.redeclareCfgNode(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	NodeUtil.redeclareCfgNode(nextCfgNode);	          NodeUtil.removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1402	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	7	None	replace
1403	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
1404	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
1405	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCf	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
1406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Node  lastCfgNode  =  nextCfgNode.cloneTree();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
1407	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.cloneTree();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.cloneTree();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.cloneTree();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	compilable	  [FE]  RuntimeException  	39	7	replace
1408	[BUG]  [BUGGY]  Node  lastCfgNode  =  nextCfgNode.lastChild();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  lastCfgNode  =  nextCfgNode.lastChild();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  lastCfgNode  =  nextCfgNode.lastChild();	          Node    lastCfgNode    =    nextCfgNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
1409	[BUG]  [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Context.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	          Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND)    {    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(    	non-compiled	[CE]  ';'  expected	131	None	replace
1410	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	156	None	add
1411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
1412	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        Preconditions.checkState(outEdges.size()    ==    1);    removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1,  nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	156	6	add
1413	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }	  	non-compiled	[CE]  illegal  start  of  type	41	None	add
1414	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode),  nextCfgNode);	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1415	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollow(nextCfgNode));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollow(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollow(nextCfgNode));	  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1416	[BUG]  [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Token  firstCfgNode  =  nextCfgNode.getNext();  [CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Node  firstCfgNode  =  nextCfgNode.getNext();  Token  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Node    firstCfgNode    =    nextCfgNode.getNext();    Token  firstCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  firstCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	32	None	add
1417	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  curCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  curCfgNode);	  removeDeadExprStatementSafely(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	23	None	replace
1418	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  incomparable  types:  int  and  Branch  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	129	None	replace
1419	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  incomparable  types:  int  and  Branch  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	129	None	replace
1420	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1,  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1,  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  incomparable  types:  int  and  Branch	129	None	replace
1421	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  ||  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	          Preconditions.checkState(outEdges.size()    ==    1    &&    (n.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Branch.UNCOND));    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  ')'  expected	129	None	replace
1422	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n));    preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  preconditions	140	None	replace
1423	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	  	non-compiled	[CE]  ')'  expected	173	None	add
1424	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	173	None	add
1425	[BUG]  [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  Context  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]          Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	                Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n));    Context.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  cannot  find  symbol  Context	173	None	add
1426	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    nextCfgNode.removeChild(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	164	None	add
1427	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  last,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  last,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  last,  nextCfgNode);	  removeDeadExprStatementSafely(last,    n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	106	None	replace
1428	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
1429	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	141	None	replace
1430	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
1431	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
1432	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	142	None	replace
1433	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n);    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	142	None	replace
1434	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf	  	non-compiled	[CE]  ')'  expected	43	None	add
1435	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next	  	non-compiled	[CE]  ')'  expected	43	None	add
1436	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.FUNCTION)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	43	None	add
1437	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
1438	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode);	          Node    nextCfgNode    =    nextCfgNode.getNext();    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	37	None	replace
1439	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  curCfgNode  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  curCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	155	None	replace
1440	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1441	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  outEdges.get(nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1442	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  outEdges.get(nextCfgNode).getDestination().getValue();  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1443	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1444	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	85	None	add
1445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  }	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
1446	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  }	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
1447	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatement  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatement  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatement	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  not  a  statement	101	None	replace
1448	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfg  [CE]  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfg  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfg	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  	101	None	replace
1449	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExpr  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExpr  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExpr	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  not  a  statement	101	None	replace
1450	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
1451	[BUG]  [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	101	7	replace
1452	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  firstCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  firstCfgNode);	  removeUnconditionalBranching(first,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	68	None	replace
1453	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	143	None	replace
1454	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  nextCfgNode.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1455	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  n.getFirstChild());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  n.getFirstChild());	  removeDeadCfgNode(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1456	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	180	None	add
1457	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	180	None	add
1458	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(nextCfgNode);  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    Node  nextCfgNode  =  outEdges.get(nextCfgNode);  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	180	None	add
1459	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  return  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	180	None	add
1460	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  cannot  find  symbol  Context  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Context.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  Context	91	None	add
1461	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough!=    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  firstCfgNode  ||  fallThrough!=  nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	91	None	add
1462	[BUG]  [BUGGY]  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(curCfgNode);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1463	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  firstCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	76	None	replace
1464	[BUG]  [BUGGY]  removeDeadFunctionCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadFunctionCfgNode(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadFunctionCfgNode(nextCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1465	[BUG]  [BUGGY]  removeDeadThrough(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadThrough(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadThrough(nextCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1466	[BUG]  [BUGGY]  removeDeadConfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadConfgNode(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadConfgNode(nextCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1467	[BUG]  [BUGGY]  removeDeadFunctionNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadFunctionNode(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadFunctionNode(nextCfgNode);	  removeDeadCfgNode(lastCfgNode);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1468	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	112	None	replace
1469	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  first);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  first);  TryRemoveUnconditionalBranching(nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	112	None	replace
1470	[BUG]  [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode    ||    fallThrough    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	90	None	replace
1471	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  compiler);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough,  compiler);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough,  compiler);	  removeDeadCfgNode(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1472	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first.cloneTree());  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first.cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  first.cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  first	179	None	replace
1473	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getNativeFunctionDeclaration().cloneTree());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  compiler.getNativeFunctionDeclaration().cloneTree());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  compiler.getNativeFunctionDeclaration().cloneTree());	  removeUnconditionalBranching(nextCfgNode.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	n  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	154	7	replace
1475	[BUG]  [BUGGY]  n  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  n  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	n  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	compilable	  [FE]  RuntimeException  	154	7	replace
1476	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getNext();  if(nextCfgNode!=  null)  {  removeDeadExprStatementSafely(nextCfgNode);  }	  removeDeadExprStatementSafely(nextCfgNode);    Node    nextCfgNode    =    nextCfgNode.getNext();    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	154	None	replace
1477	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  nextCfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1478	[BUG]  [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(null,  nextCfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1479	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode.getNext());  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode.getNext());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  nextCfgNode.getNext());	  removeUnconditionalBranching(n.getNext());    	non-compiled	[CE]  cannot  find  symbol  first	57	None	replace
1480	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
1482	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfg	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()    ==    null    ||    nextCfgNode.getType()    ==    Token.FUNCTION)    {    removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  ';'  expected	119	None	replace
1483	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode,  fallThrough);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode,  nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  ')'  expected	3	None	replace
1484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
1485	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
1486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  throw  new  IllegalStateException( " ");  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
1487	[BUG]  [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode  ==  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  throw  new  IllegalStateException( " ");  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
1488	[BUG]  [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  breakThrough;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  breakThrough;  }  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	if(nextCfgNode!=  nextCfgNode)  {  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  {  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  breakThrough;  }	  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  not  a  statement	42	None	replace
1489	[BUG]  [BUGGY]  removeUnconditionalBranching(node,  nextCfgNode);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(node,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(node,  nextCfgNode);	  removeUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  node	56	None	replace
1490	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext().getType()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1491	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(nextCfgNode,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode,  outEdges);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1492	[BUG]  [BUGGY]  removeUnconditionalBranching(currentCfgNode,  outEdges);  [CE]  cannot  find  symbol  currentCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(currentCfgNode,  outEdges);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(currentCfgNode,  outEdges);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  currentCfgNode	72	None	replace
1493	[BUG]  [BUGGY]  removeUnconditionalBranching(in,  nextCfgNode);  [CE]  cannot  find  symbol  in  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(in,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(in,  nextCfgNode);	  removeUnconditionalBranching(outEdges,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  in	72	None	replace
1494	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(curCfg,  nextCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfg,  nextCfgNode);	  tryRemoveUnconditionalBranching(null,    nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	8	None	replace
1495	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >>  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	81	None	replace
1496	[BUG]  [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(this.nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode    >=    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	81	None	replace
1497	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);    logger.fine(   "Unreachable  code:   "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);        logger.fine(   "Unreachable    code:   "    +    nextCfgNode.getType());    removeDeadExprStatementSafely(nextCfgNode);    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	100	None	add
1498	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(last,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  last	15	None	replace
1499	[BUG]  [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  nextCfgNode.getParent();  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  nextCfgNode.getParent();	          Node    nextCfgNode    =    nextCfgNode.getNext();    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	30	None	replace
1500	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  ||  nextCfgNode  ==  null);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  ||  nextCfgNode  ==  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough  ||  nextCfgNode  ==  null);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode,    fallThrough);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	84	None	replace
1501	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  first);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode,  first);	  removeDeadExprStatementSafely(n,    fallThrough,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
1502	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	139	None	replace
1503	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  first,  fallThrough);	  removeUnconditionalBranching(nextCfgNode,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	67	None	replace
1504	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadCfgNode(nextCfgNode,  secondCfgNode);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  secondCfgNode);	  removeDeadCfgNode(nextCfgNode,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	10	None	replace
1505	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1507	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  n.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()    ==    1    &&    first.getNext()    ==    null    ||    nextCfgNode.getNext()!=    null);    	compilable	  [FE]  RuntimeException  	158	7	replace
1508	[BUG]  [BUGGY]  RemoveUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  RemoveUnconditionalBranching(n,  nextCfgNode,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(n,  nextCfgNode,  fallThrough);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1509	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  removeUnconditionalBranching(first,  fallThrough);  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  fallThrough);	  removeUnconditionalBranching(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
1510	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf  [CE]  ')'  expected  [FE]    RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCf	  	non-compiled	[CE]  ')'  expected	48	None	add
1511	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.	  	non-compiled	[CE]  ')'  expected	48	None	add
1512	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode	  	non-compiled	[CE]  ')'  expected	48	None	add
1513	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);        tryRemoveUnconditionalBranching(nextCfgNode);    }    else    if(outEdges.size()    ==    1    &&    nextCfgNode.getNext()    ==    null    &&    nextCfgNode.getNext().getType()    ==    Token.BLOCK)    {    tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  next	  	non-compiled	[CE]  ')'  expected	48	None	add
1514	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node    nextCfgNode    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	138	None	replace
1515	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeDestination(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {      [BUGGY]  tryRemoveUnconditionalBranching(computeDestination(n));  [BUGGY]      return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeDestination(n));	  tryRemoveUnconditionalBranching(computeFollowing(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
