bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	14	7	replace
2	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n));	  tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	14	7	replace
3	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
4	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
5	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(lastCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	14	None	replace
6	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
7	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
8	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(null,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(null,  nextCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
9	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  fallThrough);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
11	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode,  lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  lastCfgNode);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	5	None	replace
12	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode,  first);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  first);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
13	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode,  curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode,  curCfgNode);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	5	None	replace
14	[BUG]  [BUGGY]  removeDeadCfgNode(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(first,  nextCfgNode);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
15	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
16	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  fallThrough,  nextCfgNode);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
17	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  n,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(first,  n,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  n,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
18	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  firstCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  firstCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	4	None	replace
19	[BUG]  [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  fallThrough);  [CE]  cannot  find  symbol  deadCfgNode  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(deadCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(deadCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  deadCfgNode	4	None	replace
20	[BUG]  [BUGGY]  removeDeadExprStatementSafely(lastCfgNode,  fallThrough);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(lastCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(lastCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	4	None	replace
21	[BUG]  [BUGGY]  removeDeadExprStatementSafely(firstCfgNode,  fallThrough);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(firstCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(firstCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	4	None	replace
22	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
23	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
24	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  fallThrough);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  nextCfgNode);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  first);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  first);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	11	None	replace
27	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  lastCfgNode);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	11	None	replace
28	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  curCfgNode);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	11	None	replace
29	[BUG]  [BUGGY]  removeCfgNode(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(first,  nextCfgNode);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	11	None	replace
30	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getNext();	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
31	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	        Node  firstCfgNode  =  nextCfgNode.getNext();	  	compilable	  [FE]  RuntimeException  	8	6	add
33	[BUG]  [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  firstCfgNode  =  nextCfgNode.getNext();	  	compilable	  [FE]  RuntimeException  	8	6	add
34	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	        Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	compilable	  [FE]  RuntimeException  	8	7	add
36	[BUG]  [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  firstCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(firstCfgNode));	  	compilable	  [FE]  RuntimeException  	8	7	add
37	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  lastCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	        Node  lastCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	8	6	add
39	[BUG]  [BUGGY]      Node  lastCfgNode  =  nextCfgNode.getLastChild();  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  lastCfgNode  =  nextCfgNode.getLastChild();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  lastCfgNode  =  nextCfgNode.getLastChild();	  	compilable	  [FE]  RuntimeException  	8	6	add
40	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getFirstChild();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
42	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
44	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
46	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
47	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  cannot  find  symbol  first	13	None	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
49	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
50	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  first.getNext()  ==  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  cannot  find  symbol  first	13	None	add
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
52	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()!=  null  &&  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
54	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  }  else  if(outEdges.size()  ==  1  &&  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.BLOCK)  {	  	compilable	  [FE]  RuntimeException  	13	10	add
55	[BUG]  [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(n,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n,  nextCfgNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(null,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(null,  nextCfgNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
57	[BUG]  [BUGGY]  removeUnconditionalBranching(n.getNext());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(n.getNext());  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n.getNext());	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
58	[BUG]  [BUGGY]  removeUnconditionalBranching(n,  fallThrough);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(n,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(n,  fallThrough);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
59	[BUG]  [BUGGY]  removeUnconditionalBranching(cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(cfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(cfgNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	6	None	replace
60	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  fallThrough);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
61	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
62	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  lastCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	10	None	replace
63	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  curCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	10	None	replace
64	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  first);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  first);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
65	[BUG]  [BUGGY]  removeDeadExprStatement(dead,  nextCfgNode);  [CE]  cannot  find  symbol  dead  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(dead,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(dead,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	10	None	replace
66	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
67	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  fallThrough);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
68	[BUG]  [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(first,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	12	None	replace
69	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode,  lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  lastCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	12	None	replace
70	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode,  curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  curCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	12	None	replace
71	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode,  first);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode,  first);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	12	None	replace
72	[BUG]  [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(outEdges,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(outEdges,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
74	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
75	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
76	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
77	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getLastChild();  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	15	7	add
79	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  	compilable	  [FE]  RuntimeException  	15	7	add
80	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getNext();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
81	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Preconditions.checkState(nextCfgNode  >=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Preconditions.checkState(nextCfgNode  >=  nextCfgNode);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	add
82	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getFirstChild();  Preconditions.checkState(nextCfgNode  ==  fallThrough);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode,  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	16	7	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  RuntimeException  	16	7	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  ||  fallThrough!=  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	compilable	  [FE]  AssertionFailedError  	16	7	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  curCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	16	None	replace
94	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
95	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
96	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
97	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
98	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    RemoveDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
99	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    NodeUtil.removeDeadExprStatementSafely(nextCfgNode);  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
101	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    logger.fine( "Unreachable  code: "  +  nextCfgNode.getType());  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
102	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  replaceDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    replaceDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
103	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  n,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(first,  n,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  n,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
104	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  curCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  curCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	3	None	replace
105	[BUG]  [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(first,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
106	[BUG]  [BUGGY]  removeDeadExprStatementSafely(last,  n,  nextCfgNode);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(last,  n,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(last,  n,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  last	3	None	replace
107	[BUG]  [BUGGY]  removeDeadExprStatementSafely(dead,  nextCfgNode);  [CE]  cannot  find  symbol  dead  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(dead,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(dead,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  dead	3	None	replace
108	[BUG]  [BUGGY]  removeDeadCfgNode(n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(n,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  nextCfgNode);	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
109	[BUG]  [BUGGY]  removeDeadCfgNode(n,  fallThrough);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(n,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n,  fallThrough);	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
110	[BUG]  [BUGGY]  removeDeadCfgNode(n.getNext());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(n.getNext());  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getNext());	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
111	[BUG]  [BUGGY]  removeDeadCfgNode(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(n.getFirstChild());  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(n.getFirstChild());	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
112	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  TryRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    TryRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
113	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode,  removeNoOpStatements);	  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	add
114	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  attemptRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    attemptRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
115	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  checkRemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    checkRemoveUnconditionalBranching(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
116	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  return  fallThrough;	  	non-compiled	[CE]  unreachable  statement	13	None	add
117	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode  +  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode  +  fallThrough);	  removeDeadExprStatementSafely(nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
118	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	1	None	add
119	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	1	None	add
120	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	1	None	add
121	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCf	  	non-compiled	[CE]  ';'  expected	1	None	add
122	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	1	None	add
123	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  ';'  expected	1	None	add
124	[BUG]  [BUGGY]  removeDeadCfgNode(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(lastCfgNode);	  removeDeadCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	5	None	replace
125	[BUG]  [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  cannot  find  symbol  first	8	None	add
126	[BUG]  [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Token.FUNCTION)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  ';'  expected	8	None	add
127	[BUG]  [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n	  	non-compiled	[CE]  ')'  expected	8	None	add
128	[BUG]  [BUGGY]      NodeUtil.removeCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      NodeUtil.removeCfgNode(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        NodeUtil.removeCfgNode(nextCfgNode);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
129	[BUG]  [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  incomparable  types:  int  and  Branch  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  nextCfgNode.getType()  ==  Branch.UNCOND));  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  incomparable  types:  int  and  Branch	8	None	add
130	[BUG]  [BUGGY]      NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        NodeUtil.removeCfgNode(nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
131	[BUG]  [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND)  {  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(	  	non-compiled	[CE]  ';'  expected	8	None	add
132	[BUG]  [BUGGY]  removeUnconditionalBranching(lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(lastCfgNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	6	None	replace
133	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  first,  fallThrough);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  first,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  first,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
134	[BUG]  [BUGGY]  removeDeadExprStatementSafely(cfgNode,  n,  fallThrough);  [CE]  cannot  find  symbol  cfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(cfgNode,  n,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(cfgNode,  n,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	4	None	replace
135	[BUG]  [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadCfgNode(nextCfgNode.cloneTree());  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadCfgNode(nextCfgNode.cloneTree());	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
136	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  first,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
138	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
139	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n).getDestination().getValue());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
140	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n));  preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
141	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
142	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
143	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n.getNext()));  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
144	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(first);  [CE]  cannot  find  symbol  first  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(first);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(first);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
145	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(testCfgNode(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
146	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(curCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(curCfgNode);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	14	None	replace
147	[BUG]  [BUGGY]  removeUnconditionalBranching(curCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(curCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(curCfgNode,  nextCfgNode);	  removeUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	12	None	replace
148	[BUG]  [BUGGY]  removeDeadExprStatement(first,  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(first,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(first,  nextCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(lastCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(lastCfgNode  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	16	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  lastCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  lastCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	16	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(first  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(first  ==  nextCfgNode);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode  ==  nextCfgNode  +  fallThrough);	  Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
153	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  first  [FE]    RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Branch.UNCOND);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
154	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Node  nextCfgNode  =  nextCfgNode.getNext();  removeDeadExprStatementSafely(nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	1	None	add
155	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  first  [FE]        RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext().getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
157	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1);  removeDeadExprStatementSafely(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	1	6	add
158	[BUG]  [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [CE]  cannot  find  symbol  first  [FE]            RuntimeException    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(nextCfgNode);  Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(nextCfgNode);    Preconditions.checkState(outEdges.size()  ==  1  &&  first.getNext()  ==  null  ||  nextCfgNode.getNext()!=  null);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	13	2	add
160	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	  	compilable	  [FE]  AssertionFailedError  	13	2	add
161	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	13	7	add
162	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	13	7	add
163	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.setString(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	13	None	add
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	13	7	add
165	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(nextCfgNode);  tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(nextCfgNode);    tryRemoveUnconditionalBranching(nextCfgNode);  nextCfgNode.removeChild(nextCfgNode);	  	compilable	  [FE]  RuntimeException  	13	7	add
166	[BUG]  [BUGGY]  removeCfgNode(nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeCfgNode(nextCfgNode,  secondCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeCfgNode(nextCfgNode,  secondCfgNode);	  removeCfgNode(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	11	None	replace
167	[BUG]  [BUGGY]  removeDeadExprStatement(nextCfgNode,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatement(nextCfgNode,  secondCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatement(nextCfgNode,  secondCfgNode);	  removeDeadExprStatement(nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	10	None	replace
168	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  RemoveDeadCfgNode(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode);	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
169	[BUG]  [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  RemoveDeadCfgNode(nextCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadCfgNode(nextCfgNode,  nextCfgNode);	  removeDeadCfgNode(n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
170	[BUG]  [BUGGY]  removeDeadExprStatementSafely(n,  firstCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeDeadExprStatementSafely(n,  firstCfgNode,  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeDeadExprStatementSafely(n,  firstCfgNode,  nextCfgNode);	  removeDeadExprStatementSafely(n,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	3	None	replace
171	[BUG]  [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Node  nextCfgNode  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	8	None	add
172	[BUG]  [BUGGY]      Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Deque  <  Node>  first  =  nextCfgNode.getNext();  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first));	  	non-compiled	[CE]  incompatible  types	8	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	        Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	8	2	add
174	[BUG]  [BUGGY]      Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]      Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	        Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));	  	compilable	  [FE]  AssertionFailedError  	8	2	add
175	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode);  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
176	[BUG]  [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	Preconditions.checkState(nextCfgNode    ==    nextCfgNode);    Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n.getNext());  Preconditions.checkState(nextCfgNode  ==  nextCfgNode);	  	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	15	None	add
177	[BUG]  [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveDeadExprStatementSafely(n,  nextCfgNode,  fallThrough);	  removeDeadExprStatementSafely(n,    fallThrough);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
178	[BUG]  [BUGGY]  RemoveUnconditionalBranching(nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  RemoveUnconditionalBranching(nextCfgNode);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	RemoveUnconditionalBranching(nextCfgNode);	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
179	[BUG]  [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  removeUnconditionalBranching(nextCfgNode.cloneTree());  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	removeUnconditionalBranching(nextCfgNode.cloneTree());	  removeUnconditionalBranching(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	add	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	14	7	replace
181	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));	  tryRemoveUnconditionalBranching(nextCfgNode);    	compilable	  [FE]  RuntimeException  	14	7	replace
182	[BUG]  [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {    [BUGGY]  tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);  [BUGGY]    return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.5345224838248488	186	186	2	replace	tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode),  fallThrough);	  tryRemoveUnconditionalBranching(nextCfgNode);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
