bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
2	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
4	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
5	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
7	[BUG]  [BUGGY]  if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
8	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
11	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
12	[BUG]  [BUGGY]  if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
13	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  Node  first  =  gNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  gNode.getFirstChild();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  gNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  Node  first  =  gNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  gNode.getLastChild();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  gNode.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  Node  first  =  gNode.getFirst();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  gNode.getFirst();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  gNode.getFirst();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  Node  first  =  gNode.getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  gNode.getNext();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  gNode.getNext();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  first  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
21	[BUG]  [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(n.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
22	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    if(outEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
25	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  ==  2)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    if(outEdges.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
26	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  If(outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    If(outEdges.size()  ==  1)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
27	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()!=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    if(outEdges.size()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
28	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  if(outEdges.size()  >=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    if(outEdges.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
29	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  if(OutEdges.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  if(OutEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    if(OutEdges.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
30	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
31	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
32	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION)	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
33	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
35	[BUG]  [BUGGY]  if(outEdges.size()  >  1)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
37	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
39	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()!=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
41	[BUG]  [BUGGY]  if(outEdges.size()!=  1)  {  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()!=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  <  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  <  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
43	[BUG]  [BUGGY]  if(outEdges.size()  <  1)  {  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  <  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  <  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  2)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
45	[BUG]  [BUGGY]  if(outEdges.size()  ==  2)  {  [FE]  AssertionFailedError  [FE]              RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  2)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  2)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	7	7	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(outEdges!=  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Preconditions.checkState(outEdges!=  null);  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Preconditions.checkState(outEdges!=  null);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  n  =  outEdges.get(0);  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  NodeUtil.removeChild(outEdges);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  NodeUtil.removeChild(outEdges);  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	NodeUtil.removeChild(outEdges);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDestination();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  n  =  outEdges.get(0).getDestination();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDestination();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  nextCfgNode  =  outEdges.getNext();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  nextCfgNode  =  outEdges.getNext();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
52	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
53	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
54	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION	  if(outEdges!=    null    ||    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
56	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges!=  null)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
58	[BUG]  [BUGGY]  if(outEdges!=  null)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
59	[BUG]  [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
60	[BUG]  [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  ||  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
61	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
62	[BUG]  [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges  ==  null  &&  outEdges.size()  >  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
63	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
64	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]      RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  >  expected	6	None	add
65	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [CE]  ']'  expected  [FE]        RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  [Delete]  outEdges  =  gNode.getOutEdges();	  	non-compiled	[CE]  ']'  expected	6	None	add
66	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.size();	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
67	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  OutEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
68	[BUG]  [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1)  {  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()    ==    1)    {    List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  outEdges.getOutEdges();	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
69	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  ||  outEdges.size()  ==  2  ||  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    ||    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
70	[BUG]  [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges!=  null  &&  outEdges.size()  ==  2  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges!=    null    &&    outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
71	[BUG]  [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(!outEdges.isEmpty()  &&  outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
72	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  this  leap  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()!=    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
73	[BUG]  [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()!=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
74	[BUG]  [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  1  &&  //  If  there  is  a  next  node,  there  is  no  chance  that  this  jump  is  useless.  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
76	[BUG]  [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {	  if(outEdges.size()    ==    1    &&    //    If    there    is    a    next    node,    there    is    no    chance    that    this    jump    is    useless.    (n.getNext()    ==    null    ||    n.getNext().getType()    ==    Token.FUNCTION))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
77	[BUG]  [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	List  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >>  outEdges  =  gNode.getOutEdges();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Deque  <  DiGraphEdge  <  Node,Branch  >=  outEdges  =  gNode.getOutEdges();	      	non-compiled	[CE]  >  expected	5	None	replace
80	[BUG]  [BUGGY]  Node  n  =  outEdges.get(0).getDestination().getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  Node  n  =  outEdges.get(0).getDestination().getValue();  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	Node  n  =  outEdges.get(0).getDestination().getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	add	if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
82	[BUG]  [BUGGY]  if(outEdges.size()  >=  1)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (n.hasChildren())  {  break;  }  case  Token.BREAK:  case  Token.CONTINUE:    List<DiGraphEdge<Node,Branch>>  outEdges  =  gNode.getOutEdges();    [BUGGY]  if(outEdges.size()  >=  1)  {  [BUGGY]      (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	178	180	2	replace	if(outEdges.size()  >=  1)  {	  if(outEdges.size()    ==    1)    {    	compilable	  [FE]  RuntimeException  	7	3	replace
